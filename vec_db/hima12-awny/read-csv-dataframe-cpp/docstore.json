{"docstore/metadata": {"6b75c2c1-0d66-4f61-95c2-998ef865a2fd": {"doc_hash": "63c84e8b1937b53670c900f05ff59f2224a99c644bc65002709519be7570ed21"}, "5f870049-3cd2-4284-a792-d138f05b3f6a": {"doc_hash": "d5fb39d10b262ce22296c0967db49ac1f2f5338d98c853002a0d00e1f7ddc01a"}, "17944380-e88f-4346-b2a4-888289b7d250": {"doc_hash": "a825fe2bf957a882165fa70264bc0181b923dba4a6e13f98a18c7639da621ecf"}, "d4911bc9-1758-47bb-a460-2f8e47a91c7c": {"doc_hash": "e2bded5869516a3bfeb49888cd989fcebace3deab6a3e9f411c0862dc7e8cf3d"}, "cf0f1d2d-94de-4c9a-9bbd-5fb82da4da73": {"doc_hash": "09f249f25a7d8e94cebb31ffd7cba62642456f86c3099d6a348d314444d3e550"}, "fb8dc5a4-b61d-4ba4-8182-602d3b7e090c": {"doc_hash": "b3f0f9e013e0d54b8403ea5beed6551f67200d8f468f720146dcce1dba8363a0"}, "84804a87-a5ef-4bbe-8c9a-02c6de28922d": {"doc_hash": "51db357e58b0235bdf0c804073564859bcc9338f16dfe5020723d634c1683082"}, "bc41a12c-3714-4b97-9d00-7bb0ff8af8f5": {"doc_hash": "1b61ea8c36b356e12f93b7248e44bbfd22188809a27ed9eac426c43aa601a15c"}, "30bfa035-6d72-402c-815e-291881214e1b": {"doc_hash": "b1651e9a815a7bcaa82d8a98f8f09534b15eec8aaa87dfb8f1d9936f4b91e9d8"}, "6d1b9bd2-e429-434e-9283-7c3523e4dab8": {"doc_hash": "e03c7dacbe0a732f9beaa41fcd1e6df51bf8dfce0b2d3cd93b8586112169c67b"}, "fdd0a366-46e3-4109-a516-c12a161f6918": {"doc_hash": "92fbff7e6966d61ed81743ec21c8344a104a01703e4755dc70761fccf59137ee"}, "9f3a89ae-63f3-489f-8bb0-4980ddb577b4": {"doc_hash": "58c66e7728c67313576b9663efb9463b6b1de0aa220a5258aa9e9509fd61d661"}, "b50279fe-23f8-4f9f-8f75-98a47016a0de": {"doc_hash": "57977a9da3aae8e33f261be52548b066c53429f897050847aacfae25fa2dc263"}, "199c534c-487a-4222-bd21-b7ac05a2e3f5": {"doc_hash": "dc95a4ce0ac315c92e523a4c5bfd7be08ffb672bbfbda4aa2ead435bf890c07c"}, "3deb2676-5a68-4df2-b1eb-5c8509435275": {"doc_hash": "482c5212e5b843c83a7da8c2bcd0765023d0a8fd11ba223456b8e06966fa947e"}, "9fac8d03-dbc3-4de1-8014-680bddfbac48": {"doc_hash": "fccd844d11ea794c94a39c6c1ad86f1bcdc222b4cb47538fa8c9e37bca41d60a"}, "616a031e-90cd-46ce-a6ab-2ba89c64e5f8": {"doc_hash": "4ec8cab0bc2556bca2de410ec86deaaff2a7855a788abeeb2104c5e08e806d38"}, "769584eb-c0e4-4a74-b751-80c83d80a0fa": {"doc_hash": "2794c2d464e92699c5d1b6e801e559352d1e108624e30c8304cd731b5a34131a"}, "722ca348-7e3e-4b08-b8b5-5aacae00e539": {"doc_hash": "f79a7e039ad3f2fc956ed14b2490966ea18bbeb6ec343e5828f35816cbc875ca"}, "78d9b081-2291-4957-869b-87275b038805": {"doc_hash": "79582d46e3eea5a2587087302acd689c2cee80c2809bad2ed9a0874ce7c3bb8b"}, "675cb5e2-457e-4fc3-9e5d-c82ac84a4ea5": {"doc_hash": "c00d272e5442effe2294278412199e3b0d6248aa1ec99885996d570c92802afd"}, "ed4f65a6-67b1-4528-afd0-0394b7e11f03": {"doc_hash": "b81774d2fbfd2bd54e2b3aab7a6bc661079fb1d5aacc69b33e43c7b513f3646f"}, "f12e7db3-0a73-4dbe-8a17-18858f34152a": {"doc_hash": "aa4bde2175909c02b98dc8c70074aadb19991aa703fbb16d4401720fdc5e498f"}, "0aafbd97-d626-4089-8e7f-ff40407a38ad": {"doc_hash": "e8f8701c3d806ccf020c7172552fdf75e958676aac999f5b6825d50bfdf6c2ef"}, "d79a52bc-fe42-4c06-a291-faf08e22d866": {"doc_hash": "17fec1214f23afed7aa0e6bbc0c3881ed64ea52500446c865b1062b8485b980b"}, "ff4a3b22-13e1-4312-b6ec-a03c2bba0ef4": {"doc_hash": "56d882c5be0bfcbb41b7c0a7e951ae1ed5faf434299daa174bf7a2e977454457"}, "518b4fe8-81fe-4c60-b0cb-ee219cfc90a2": {"doc_hash": "ea8a82fed50a4e3aec00a94c20699cfe9cad85bc758fb1a5fde01419bca2ee2b"}, "7218757a-7429-4a3a-ba40-f6a5a69b17f9": {"doc_hash": "8bd6b4bdc1a449d2b05fd29c89c4c2a6f519c9b24e5259ad64a4f23ee504c12a"}, "153d19db-0955-49ee-8e42-b2ab554904b2": {"doc_hash": "ac170fda95e1be781db015fa8ea8273022a5649fc9292638ea9973f5761eeaf3"}, "541ba03d-106c-49f3-ab61-01d208a67f87": {"doc_hash": "2fee50133c2209d8a9230c74e51820e9062ae381c3eafc605b4a4aae3d98809c"}, "22f6be7b-60fb-486c-9757-b3d1f3928022": {"doc_hash": "632a4b51c64f1a2b32e928bb579f88e52d4b27ea94cee2f4bc3e7038f71ce838"}, "752a038c-1d56-4151-a6e1-57ade34d0d61": {"doc_hash": "0885c834fc4bb06358a3f6c53bb97f67859f3c5f0056b54acb9a568caba51bf0"}, "099db20d-999b-4095-8f84-621ea3f159c5": {"doc_hash": "0e666c684d8d88a8df242d60fa7742b7b54715f7929f9b35c80192f8918a5fb8"}, "de9c27cc-5cc9-4d8d-9ce2-4a2227a5cbec": {"doc_hash": "58163fc8c055b7271c3cbbd88716c135a4a9bb83c2051aaca487499f2691f10c"}, "c2f9c82f-c936-4520-b31e-8fa0ea6281b8": {"doc_hash": "25ea0a609db96794ea808167e8a0f64e9195049bea83fd9b1f003dba0b104ae4"}, "6e05c47c-aa36-44f3-a77e-6fe0172304bf": {"doc_hash": "ae9244e38cdaedd960ece58a281e2c2ec95e032c5a67e99101afd47d9fa35fc6"}, "facb0366-5c6e-4b81-8871-d4e5730f1eb6": {"doc_hash": "e6b7cb5e167f6f78e981e784a4ef559a368d05f98dd58fa4e4b4cf145460e1fa"}, "b3a64e42-4adb-4c02-b4de-9344759a047a": {"doc_hash": "cdb05f82a5f8400324d3c23ca234690b2bed86683f39c5bb76eff3bf52e6a679"}, "e55daa4d-a26f-49ae-85d5-8ec166ac552a": {"doc_hash": "a8e4c1adb24a8d9785fa8308ad14c0356e6a726ffe90d295931235d8292904b1"}, "4b7936b3-1dd9-486f-94bc-917aaac01460": {"doc_hash": "18818becd58312291b4693f2ece140671b1a776e2a0cdd206e375ce99808ea69"}, "ea1f226d-c62c-418f-bfdc-906a7cd13daf": {"doc_hash": "3d48e923a3eb1220ace1455086d6e53fc6bfdcb0077af4852ea1f11765644af1"}, "877da1ed-aa76-4bc1-a4e7-8567ff314cbe": {"doc_hash": "4105280844a686784a74291daa9a4e37797a295f3756eb777c7058e61c3f6033"}, "7a523f53-d272-4679-8c83-46223db58026": {"doc_hash": "1065ed31755db13c82e388ddb5e1839f6011912c547170460b7b443e3a26ac70"}, "d8364767-e8f5-48cf-9c2c-20b3621d772c": {"doc_hash": "bd2ca2e26f6d473da27588bffbf04e480221fd928f5f27ee6592be7581c99da0"}, "c1dff4c5-6324-4968-abcf-f761e1d6a0b9": {"doc_hash": "daf8a17ee9ec0f7591f38e411f44e1b66ce8ad1fe5af17b0abcf046d48304759"}, "64106a82-9b59-4f60-82cd-c682b8a70d56": {"doc_hash": "7e0b8d0ac30eb3fcde908d9976657f69d44e5122e77cad6a02806e07085fbd8b"}, "da136a53-3d61-49af-9fbc-5c05208d11de": {"doc_hash": "6b1177169aaa0a4589b3eef011f464ddf97c8094435d4ef8492eebe5495bb31f"}, "b5f78e2b-6707-4f9f-b151-08655d360a9b": {"doc_hash": "b19bf3019523be27bb24229cfd0544e252db23f80314ec672bdf558a33971f2b"}, "72d90471-ef21-4160-bebc-8d3970f18b9b": {"doc_hash": "6c6e1e01a72ea111bb659da2dfa431879c38dd41d0e1a9230908d6ad4307a842"}, "1121d67d-f094-47cd-b8a5-1a9e70b648b8": {"doc_hash": "2534818e49856de86f48006ca2543c87dfa63f309a6d359441bdda54aa693e41"}, "fa21f75b-45a8-450b-837f-ff4a21788c16": {"doc_hash": "55833c0c2b8060ba660606c90e1497f9c1513ac26bef3be832e2780179f34aad"}, "f3651a62-81d3-43bc-84f2-80e66bfd05dd": {"doc_hash": "4b7feed16a6fe7ca1ff37e6efa3d79c9bf927bae4d972fb18838756895533a29"}, "92aaf5a3-585f-4001-aef4-05541309319d": {"doc_hash": "254bf0bbcd6f1c94a2c0cafde6b99d40d6b9eb729da9091c09a2f58c4863dce0"}, "d225eaf8-cbcd-4a0a-a8bd-4939b398a87f": {"doc_hash": "2765b77ba9d268debef433c7185840779685375eeb97747877f5da513784ab53"}, "c4b7a296-d9b3-48e1-b5f5-267544c79b27": {"doc_hash": "bbc49c98d77971e3477bfc83cb5c33230dc7b12febd62884058736183586a5cb"}, "6bb2cd90-4ade-4bfd-9895-5961a43e2f66": {"doc_hash": "29d1155c1d6d4af9950784a59faa4481070a941606c03074a6ca8ed30e689803"}, "c39686df-3202-475a-a323-ce5ea6a5572c": {"doc_hash": "ca353ed30ff1b3144a15c0224f68d4fbeef1f09aa8de5c0889b94cf02136c596"}, "a55c2433-1bed-42e2-b400-bde775997f03": {"doc_hash": "761bb1a8abce145bfab7320db968d3c1ab980d1ec8ab0819a458701fef5409c3"}, "3a26d13d-c3fe-4e66-a13b-69e1125f9429": {"doc_hash": "ec2c3e6a1561e11624d966270cfc00dff475a7de1e66ab090cd16f5f7db8fd81"}, "3ca0527b-de9c-42a1-9ace-e747fd467139": {"doc_hash": "811092e9a58ac4fa4a36f40c221f605f23c60183fd504ad6941743aaa0f23a8f"}, "778cc87b-1fc4-4d08-b45b-ac3484fb24b6": {"doc_hash": "d315cfe5e2f87cbcfc95212da19ceed2a75d57ad7e1550d8e60f9b990222633c"}, "66b02433-a600-4ec4-97c2-b6a6afe1b473": {"doc_hash": "6bb936f3c18a53497fa7c99594c2d1cad77502a245c360d6aed053bb4c1889f0"}, "2826eadd-fbf7-460b-8716-3c1cc7eabc90": {"doc_hash": "9a691f58d422cccc2a448671e2ab8e97eba441a2843b8e9cddf68a7a5a82ae70"}, "515f93f6-703a-4e6a-829e-b2fa6ef1c7ac": {"doc_hash": "142a20d237e9394af8c43cf4d6ed37cd308789be18d2a231fe37fe1cc8ef5ada"}, "85e919df-9c3e-4ef8-819d-3b1cb93f1c75": {"doc_hash": "ae2ceffe1ec409e1c05edb44d269f8fd327b829621e77f5ab35437bb2e9bee88"}, "6f23c2b4-233f-4d4e-91d6-d4a8f69466a6": {"doc_hash": "8173dc9af5e17320f54dce9a02097569ad3285b81b795632d0549d9c4b402522"}, "3b22d43b-5ee2-43b7-9298-f4e232a0c352": {"doc_hash": "f334447fb8c1958796227cacb3848d0d0093251ec25fb36841e85665c70b9a55"}, "e5611e91-5ca2-4f95-85b5-afa4c2fa4204": {"doc_hash": "8cd3032cc1ddd7f35c06a5ac81f426f081780bb2efd2702a2a28d04cb4b2ed83"}, "8e07f125-b421-4605-878a-2900ba5f8c9d": {"doc_hash": "828de099ba025994ee190c4d9a1942daf77c4c01a7329173e18b9445e57e45fc"}, "272782eb-53a5-4cda-8285-e8a7f00d2a1b": {"doc_hash": "4290ceaa99ef2db575af212d2429e8c058f06ab7586d538c014dd1d2176df597"}, "49482eee-b2d3-4a89-ba69-605b95356f12": {"doc_hash": "dce2acea60c0b3c7c9e2c1bffdbaeb79c27773634e1d0d64aea9f1a4850832a0"}, "7e966d04-965d-4f00-b743-472b2cfbffad": {"doc_hash": "ad279a12779213e6cdf43c2d7d24adb1e186aa7fa4500964040417f4c615f6db"}, "d3225cf5-bb14-4533-b02d-05c3997a452a": {"doc_hash": "a83ebd9151742f65ccb237305bf55740fd36915d8b5cbf2a6c4028aba1cd4a63"}, "44c48063-0ae3-44dc-ac5d-cf2ccb2743c6": {"doc_hash": "9ef1edba0723d1198653e7038ddb4314d9f92add0dcd9ae789cc7e9bafdb0c21"}, "67330ad6-fc3b-4fdf-a98a-3d67952fea53": {"doc_hash": "c1e7c8829553dc8106c5010b37175f25aa6cdcf1b9af9bc97be6dc3b04c907d9"}, "b614016b-6733-4631-8627-ee6dedd125aa": {"doc_hash": "63e1564fbb17485b78e7b03c48045227bdb249eb3f3e7d19156935ef73b3b6f2"}, "3d6c5555-bb51-4a89-9d1e-b658cc51f07e": {"doc_hash": "b27c16e9b43b8c0cd5bf68a6d14ddfc7474cc257f290b4b71f266cbbf40bd2f2"}, "a4599e28-6422-4e1e-916e-586b94af6474": {"doc_hash": "d17c4b22b8632f33c1c8cdae51d38a4fe562a6f32f0a6299f707971d5c286fca"}, "0b246e80-9431-4929-a624-276108b13180": {"doc_hash": "3e65a7b8cdbc880621b5155b15a27b96b9cecba63469652b4c744d9ded1750a3"}, "12d708cc-7ca2-48f7-91dc-245d76dd6b51": {"doc_hash": "fa46e1a332e48fcd31d3da1fc51f756cacc2df75716b35ddddea77de351c7a47"}, "b7a92457-8d71-4a06-a829-cf4e22bf2b42": {"doc_hash": "4f4c31254c8df7cc89c1455c686f4e9f96692d9e940ebc215e5b102e748b5843"}, "ca001477-1244-4160-9e5d-88e3ed0a397d": {"doc_hash": "cc9df5b53f01345e9bf0238153b1127815ba01df552e9913e297b23d47c811f8"}, "37c6bd61-b717-459f-9a59-e193ca43b858": {"doc_hash": "3f92a61cb4a6d9301d719c9b5f595d648f583ab1ef64e625d4368ca4f53607f1"}, "49535141-ce99-4070-8cb2-320ca16fe77e": {"doc_hash": "0cdfc04b3a82d44608c3dc7e02fdb37f2075f0bdac5d4e7e03764a8ad263c80e"}, "58483fe6-0b10-4fab-bb16-4b9f3f7038d7": {"doc_hash": "f5a76639bca55dc3ad4661f73c25cf11d884001a959d9ece1070cc737ff6fde9"}, "ae3f4d3f-a8c2-40de-851f-f2e04a462c13": {"doc_hash": "6ef77f838497f589e1a62e23c00a89857be81326e560dfc297d480d1bb389f57"}, "602cc5ea-2f78-406a-be3b-c671a0444208": {"doc_hash": "6dba430ae598fcac0e4ed73a27142fab6ff13c6a6ffe0468cdf0c274744df8b7"}, "9b3e4c17-24b1-4c17-bbec-f16c22d45d56": {"doc_hash": "ed84139986a40a43c4ee0371670d91878ace503b3c0fe82c7d2706bb393e892d"}, "c275e3c3-0b7d-4d30-9dc8-4cbf80c39d36": {"doc_hash": "536cbedb56261a5927c16ccd28f8c748b08269094b9b874cc2a17a6c6e52568d"}, "ddd38615-de89-42cf-9cbf-b015d69cd98c": {"doc_hash": "4fc54830f6ac370bc469d402de82a75c03f24245488713ba4f8ac8f39e3f20c4"}, "f91c9a09-d9d5-4fd3-8559-77cc1726605f": {"doc_hash": "6194aa52f653e180f73c9a3416d54f2e986cffd8ee10359f1496d62e0ec06a1c"}, "255f7452-e5ad-4c15-b55c-3e150ed788e5": {"doc_hash": "711144a8a576b30d3b27350c39104417f16c365f7ab2c2fefcc2037edddd45fe"}, "f3de3db1-7ee3-492a-8a0d-50c8e770c31c": {"doc_hash": "1d9b59acef960a164fca41dfd2a850be2bc99be0b55573e394d662ff93534fe0"}, "22bf0130-134f-4783-a1db-e9e3e7fcf943": {"doc_hash": "b560542656a5e62542ecbaa590d4efcb1354ce6ca128e2c59ad7762b2ae7101b"}, "847a8708-685c-4c97-961c-4bb18ac39a54": {"doc_hash": "f52e76db133f232e25e56889bd180bb82daf031377953adcc5dfcc581f06c24d"}, "d8254abe-abbb-42e0-aef2-d1e18668d931": {"doc_hash": "bc6ad5a3a3d3f83663ae46fdc9592f48febc7015b508c3d1b47ed0af3672cf47"}, "6404afb5-2906-43d3-94d0-307aed47cb0c": {"doc_hash": "caaa0848125eb499cac8257332f5e35f67184b0bc33a6adb9a46d0cd875e5412"}, "a56c38cc-81ef-4da9-92f8-651ff2550d34": {"doc_hash": "99d5bbb8ddecdfe97f109994feb9ca8df3a0a8dfc84c593e9361b0b0c1b5b01f"}, "55aed45c-13b5-48f9-9836-092d41f95dfd": {"doc_hash": "f9881a1f3cf86d0e2c762bcf5cef85c7c90e455c81ab7281f7fd0ba8f6e04845"}, "d6d59b5c-620c-44a4-891c-9f126cf3ed49": {"doc_hash": "5460d60c665dd048fa9243af55eb4a9b569b892227b05174121e78c78d6cb43d"}, "01b5e478-15d5-4a9b-9a95-5a5b8ef48289": {"doc_hash": "98cbc07366780cc3247bf6420a5dedf29253a188610dfcb2c373b213f63d6575"}, "5f555fec-e0b8-49a7-9756-a205e490cb6b": {"doc_hash": "9ba9c8f853ffe424568f5c448cf397e561ed215add1c87d77860ee258ea25e2e"}, "6030e332-da6c-48fd-96a5-cd1da6680c04": {"doc_hash": "d331f28ae7d5498f54d99d69e6a7a9d7194922ebd97f3680cfc955f744e1b469"}, "606c77e6-88ba-42fd-b29b-486611922bf7": {"doc_hash": "392531960ec56538a2678d4286d8f3ef3e6ad59934519eeb2681939f7146d653"}, "aab63da3-52b9-4995-966a-337cd7793b69": {"doc_hash": "d14fcc09c4cdae8dd1debaac36230a3a4e8ee91d36bf8131b5664550779d7bf4"}, "31b09439-5754-4758-a659-f27d5b0db384": {"doc_hash": "9fbe70d6de7208dc5b9116057a968276555da097f0b58f4fe3ac305f55b8c1b8"}, "8e40a6f1-39a9-4d99-8df9-3781bc15fd13": {"doc_hash": "88590b07a933a1d338be37e20ea4e983f946958b8be1289d3410679161d14699"}, "841863cc-ac91-4c04-aa0e-61789519e340": {"doc_hash": "9001d9c0d37f1e9678d2e3b6050bb7bf7043e5c8105aaaef15ac239eb3b008e5"}, "53adbefa-b741-4033-a374-21cf8c391907": {"doc_hash": "1136a2145f234583308d040618521ebf28ede24b674b7fcc3bff9e4558405295"}, "95d9d9eb-3e47-4697-acf8-a80c2d1df643": {"doc_hash": "7c2d9b8782f66e13c551b82b640c997585c8a177326d828d392214b6ceec9e9f"}, "8e7b6de9-1c12-4808-acc7-c379c22665c1": {"doc_hash": "6c890b87777adf94076cfd4443b79d1925de24d08bdec5ca2a554548a007373b"}, "5797c2d1-8dcf-4cb2-b0fd-beae5d3dbc15": {"doc_hash": "20947f5c056594d6b3808287d25a36f20bbb14483cc2f6da3249ca3d9c626445"}, "b400607f-5963-476f-a123-c0aacb332a1d": {"doc_hash": "6fff0ac8fe7ff7bde635e8712b0e44744bc1272615aa7212d0d8a1c8eeceba60"}, "3fe49d07-4daf-4b7d-9f77-d9d0b0d93c2a": {"doc_hash": "42b93692069c51b63d173d24f250a236f2032734eff8ddffb42ff3ebf969e841"}, "9480e5db-34ab-499b-98b7-8f28ba13925a": {"doc_hash": "7becbb4e51816dc974a4b6e88ea4a8291779743eba6630c5cc4bd50621595730"}, "fab7694f-f2a4-4fa6-88e3-33e93b725137": {"doc_hash": "e2d39e78b76f0ce8b96066e7cd05131a742e90385754513e32ba4df177f41c5c"}, "cbb653e9-9993-4085-a896-350d25a77429": {"doc_hash": "110fcf68cdee920ce64c8e690f02a939b6d4a4244607d06c90f9089f0250c8b7"}, "2bf72bfc-8d4e-41fc-a8a1-7d9312278018": {"doc_hash": "ee047d9391d551c7d7871383b2c47a6a2c44ded8da9956f132ea071525f6cd52"}, "fca68294-5e7b-4397-9c21-f957aaf0f440": {"doc_hash": "460dc1a7acecc7f8465ba124db0db0d95cb810264eeaabe798d1982269e8cb43"}, "cf856626-99a7-4a6c-b0b8-bdb31d61403e": {"doc_hash": "b7bd71a6ad93cbf8a5d563cae3ff5cbd527d49ca9afd662d7c642ff660fe95f8"}, "05100e91-71db-44cf-9b5e-8c18ce9755a3": {"doc_hash": "3014ecc0900492fa7306eba29f8a7fee87392e2bfeaa130b5a8e6e60086a3310"}, "3e66c6f2-3a07-4681-9126-2a52bb617fed": {"doc_hash": "293c08af5d4abd45f79388cadf25772beca7884990f9a66ff69c225c4027eaa9"}, "87241ec6-977a-4b18-bbe3-7959d33c1453": {"doc_hash": "eed8df9c7074db79718dc5589f6c4f9d75fc8ff923d927fa6028110fdee76e9d"}, "9c963056-63a8-41f7-9c33-3bdec3f8e993": {"doc_hash": "4aa8c0b5b2a43914f7a90f14f0c6354b5f7443960b02e716844041dc76c9f9b3"}, "893a3a3b-787b-4967-a3bd-fc26e16e9509": {"doc_hash": "4f3e779e6269dd2d89471532886b3999f222f5797ce07be2f9d5db565bf5e9c9"}, "df2bb496-c108-4107-b0e5-7b8113dc5706": {"doc_hash": "f5d911ea2bf9efffab096f3683e7949abcf28a79460d846f9223cf768f1b3aa0"}, "86f92053-3759-4a74-9ea5-1dc37329c667": {"doc_hash": "64cd58fd9bf4a5e5f22a31aa01b23ab48f9b1b84644ea7df374b4ab03e48c48a"}, "b38d3d99-4393-4aa0-be88-da83cc072937": {"doc_hash": "0df02fbb6dc8cc68a36f6cd57101c6a593c811cad72a7968155f72cf7086c4b3"}, "c9b723b2-e9ab-49d7-94a5-72d1ea340fae": {"doc_hash": "e98a684601fd7ffa2ea95a4c644c1f6c40fc59208bc68e7c4c2e0621e988d52a"}, "0cf1ecca-3e39-4295-ae0e-59af5b30cd7c": {"doc_hash": "1adc0386537cb0590b3859bec0712623aa1386ad65680ae76e97fd6dcb9a1f11"}, "3171074d-aa39-4841-a466-3dc941727e4d": {"doc_hash": "0dfc96606b7c83036ec905b6e33f688e9404b3ffdb4aa0fd59c401c1ff3d957f"}, "44caa7aa-f85e-4670-80e4-051ed777d0c5": {"doc_hash": "051c43e0f2630934005a80c188d2d14ff49627487016c9681de5891a482d706c"}, "66edd299-9382-409e-b3ef-88672c0d7fe9": {"doc_hash": "5fae743535eee3c3dee852bb38969da6f8fca10ff45758a111bad1288dfd5066"}, "4c1f7836-fba3-4b51-8453-bc485596495c": {"doc_hash": "a257ca753cc92a965a233a916d7a1917c17f14d6519e92b914a700b5d6f6c831"}, "1383af4d-462d-4f37-99a5-e123e5c91877": {"doc_hash": "b1fe96450b228bb7579b23cb6432f4cd439261703792e4c2d54eea1aac8ba465"}, "c23e6e4a-da16-4d12-95fd-8a5073f4a610": {"doc_hash": "09ec8595e2f282c3e77c171b01031fdc8674391087a3016340ea3d2d32bd85e2"}, "02630518-88b9-433b-b555-39f191d2131a": {"doc_hash": "8e5edabe72a7fa2d6ba88dec039b9da0d3254666d76d555a0e905e6c92ba2649"}, "6b15f92e-ee3e-421c-9008-f8684d2007dc": {"doc_hash": "5280ca91a1d94ef2705f32bd6ed9264b3a87a70e3723ad37b062772dba5a2573"}, "1199e8c0-5275-4c26-b4a5-18b4cd3cf963": {"doc_hash": "3f92b3c48b7e9f0577747f24626e492a121240b5a157a7ef22df9969c2e5d052"}, "d7400ea9-dffb-4461-b598-6ef466a6290c": {"doc_hash": "10abea927f8e155f0e194c16673965a5733a08136fdd68f6cd35998b52c972e4"}, "1cee0a90-8243-4b89-b13b-d83205a235ce": {"doc_hash": "e8ba015ace7aae0e9a679869e15b6a4dfdbb3c9742bd46ff1ee124ee8803333f"}, "4a01965c-fc68-4b04-9c8e-9248b4f51bea": {"doc_hash": "b81913d8e8162f9673406e23eea239d43ee338fe92cf6ed1b45f2efcce4901a1"}, "072bcc58-db06-4157-a639-3357a2c45127": {"doc_hash": "d028813ab40273309298a97da87204feaa19a761c195e9d2a6faa997ba269eb3"}, "df030065-bd2a-4db5-b4e5-384d0274029d": {"doc_hash": "9a35e30fb4791483920a38792b00355ef9c5a9f5250e4cf900975167db13828e"}, "a5d67529-eddd-4a48-92ae-e2d8deba9cc9": {"doc_hash": "80c79c553761c5e8f42d19ee97e07555c76958513c4e5202a21361233dda0b87"}, "65726522-4667-43fe-88a2-ea5f80ad8500": {"doc_hash": "48d1ce8879736a0cac2d8feacb660fd94002c0a33e666046997a92dedae98950"}, "4b888147-e092-4335-a5e7-698a9157726b": {"doc_hash": "04d7fd07141688a93b44b07721b7b9e1815c5803f34608a48049d3680b132795"}, "11f652e0-7ae4-42e0-bd79-c3ff258cdd6d": {"doc_hash": "8712d01f395b395c883746d527b41e463ee886d759b2e772c7331c146bd011ee"}, "ddc2fdf9-401e-41a6-a3e6-d6f14dee498a": {"doc_hash": "2e1278b5d725290977b11475d294ae3980f218286bfb6c5a331eae8f28bc65d9"}, "f738f2a1-f7a6-4f6f-a363-2dcbcd75de61": {"doc_hash": "f5ec1c50c19cccca659da817267d1dda29c68d3dda1b3e577cfd8b8ef90daff8"}, "a2661a6a-24df-4584-a455-f5fe8588e904": {"doc_hash": "efbefb1185f596abb8745b67f85a5f094a00198d47f66f7b30a0bb2c9097d7ef"}, "6996ff1c-6afa-4d30-8d41-d778b7a2879d": {"doc_hash": "089917a1ec3c5d29c54537b4c78439dea2a0b348678756d3b71ccc9afda54158"}, "1f3f9551-eb9a-47c2-a529-e07375d3e176": {"doc_hash": "9f6d253b11f2394e6903b36999d5018da9f18abefd0442bf2b2b14ae47815b98"}, "01d805f7-357c-4d69-855c-2772e4f4b38d": {"doc_hash": "af25a19a759149c78fec10b12e90179c58a1269ea79c74e7030fea2c78fc8281"}, "271c89f7-cfbd-47f3-971d-174d5b914a47": {"doc_hash": "0bbf85ee222410a903bfecca8551e72d58e74b2fbb2978a2fd753f39cf6ddba1"}, "c50656dd-cef0-473e-a1a1-a3c97047be6e": {"doc_hash": "4955972c07a8ced7b2dbdccedbc2a150f6ce1cf886d4da69766b711d10e987ac"}, "4de0799b-ae5b-4cae-989d-2478ac087634": {"doc_hash": "657bcd4eb686b615bc0ebe2f06277dd1326b5a08543f1052618f590f866a0dcc"}, "2f496a99-7295-4c19-9526-6b015a74cd5f": {"doc_hash": "6f35adb295527c0661b233561f0fea084287fcb2d3b95a05ac6fd415427f53f1"}, "2567bef6-04b3-4db6-a2da-6e3fc7f18df8": {"doc_hash": "6512ea6e2d109ca6aba27f5a6ea22b32f7726147a1090a7fe845e62a1b311915"}, "0d56e06d-4e02-4fc4-bdf1-48340e40cbca": {"doc_hash": "fdd07c4aa2a33aca06ff26cb8f05d3119b7642c9384a9a53a43b6acf0fbf4ffb"}, "58b91fe9-cbe9-46e9-b4f7-59562db32b9e": {"doc_hash": "7af7d78a516fc73f9c7f127bdbd7a0828c1c4ca3f5f4dede06f083fc3a824e1c"}, "14cf4ea0-32df-43c1-9118-a97cdcc14136": {"doc_hash": "215fad85926d25fe17535fc3652456f91b1cd99a3886a04672c5dc74d82cbfb2"}, "096313e7-9ff4-43d3-af9a-384fbfe09319": {"doc_hash": "4cf4e8ee831e58a4f955e5916a2fde02ccae0fc48da0ac3c90cb322ca6e3c7cc"}, "b02d13c5-4446-4352-94fa-25f2cb6d6525": {"doc_hash": "0cb9565765207764357d6d68998c26fdf32220261489b13e20644066d5c9695d"}, "1a9b820d-105d-45c7-bc65-edd7de3b0020": {"doc_hash": "aefb51a7fea6b798509ef5cd5ad39bdce33bbab4711873b30a82dabaa7454882"}, "3265d7bb-a72a-4c28-80a7-5648f691abb9": {"doc_hash": "cc0710bf5e3c11ca858c873930a738e22d249004c97604f214eef7cfb1302d62"}, "442c8162-2354-402c-8ecd-004677d707ee": {"doc_hash": "afbae6d57b20f8aa855fa8694b20531b2a3afe7300d090a2276a8873a09e404a"}, "9a6ba5c7-a0ce-4089-90ed-f18a8adfc595": {"doc_hash": "9af0a6ef3ab652af691442ed49483f14cfd635bc14b7cc89fd36890456be43ed"}, "23a6a665-6497-4513-b2e6-b0d4b42e146b": {"doc_hash": "1b975c7f9784d570ac15ff90333c0975880c4be4749f614d4c8e062a54c51db5"}, "0e0847a3-cfc5-4b24-9196-8de96131ff80": {"doc_hash": "ba420a1405de184e7d3da86ce33c03825573bf2719fb2f2f7fa1427b2d5a1a64"}, "3cb468df-4593-4f8c-a247-bd568346fe36": {"doc_hash": "fc4f62ed5d81e92314176d800c36ee02e0e7001628838120bcd630df2412a31d"}, "b5cf5cbd-25ac-43ed-8c17-fde0be0a1248": {"doc_hash": "e56026eb6d611066dfcab31111917d151b910371a121c30a0e069d8cf8bce9bc"}, "a68f987e-bab1-4b18-8922-b0ee3a2fccc8": {"doc_hash": "6830841da543402132e200a0e30f6b6bbfd455ab8524b29acc4b2182fd430ca9"}, "3545da3a-97b1-4156-82e0-499abe3f989f": {"doc_hash": "2b30695fd42553167a3d80e4a245b9987ac554f864d95a93a4c4b588fd0ac1fa"}, "2fe53206-f5ce-40f2-9ea9-ddb7c6effcfe": {"doc_hash": "f3222e544a23e8e8bff212af5db18c902a31ccccda399e3e8ccc72df16c7fb98"}, "6f700830-3cc8-47c3-9478-ce95941a5aa4": {"doc_hash": "6e624744d5fb469d1f9b49e1dbf291200c28816d63c697d3148d4587df8beffd"}, "ac1b1127-55d6-4d4d-93e8-2fc18af77ca2": {"doc_hash": "450313d2de7318545370f8f4d97a12f8e636263fac04a50565ac625d17e78661"}, "f578ce7c-c145-478e-a5a9-9aeeac0c5170": {"doc_hash": "cf965e5e9cc3487fff93f5d3406e531ee8994fef6789e9c12708d44d180a06e9"}, "7641c1be-4547-4f93-ad89-1559f198a4e5": {"doc_hash": "e393a4eabdd64aa363d1fc1bc164f5570ce5fd066eccbd0cee3b498d44c60013"}, "3309a702-c80e-4231-80b5-2c721aae4b0c": {"doc_hash": "0e35b4c752d3e864b112af651b5b5c6ff96423cf979f9463369e5ad73e88bc41"}, "65d5062c-6de6-4096-9e9b-07703ae8f0d9": {"doc_hash": "46688666a7d35b30cfefc6b268cf87b6c445b629e6c41a4791ff15a0c9970ba9"}, "fa29b057-a196-44e1-bfe7-9c3d81b4e1d4": {"doc_hash": "5c7fc5606641b69865ced26e3b89a94bc6ecc006475279e5a8383bdb96add7b8"}, "e28d8a45-f621-491e-806b-a94ef966c589": {"doc_hash": "fe71fe36be3450ee9c9277bb7ac96e353d6afec91e7577a4377a9fea71df4bc7"}, "db8d30b2-5b96-4e25-8195-fe5912d150dc": {"doc_hash": "5fa0648f497dc4ee3a447a3593f5dd2cb17197f097fcc2b39e4cb141daa971f2"}, "f081ca32-5cbb-490a-adee-34f3028ec7c7": {"doc_hash": "f4211d96d98a8eeb350b512bde337a00e7f2d33291081a2bc4c696afc09fc925"}, "f29801ec-360d-41fc-9b4b-f56d2e9fe896": {"doc_hash": "857b629e88bc9a3857bb0bcaf19b1c0bdf7ebdfd3d98a77f252b0ae7481bb546"}, "db2c7133-6dad-4797-bd45-082adeaf188b": {"doc_hash": "874bfb71b0072e0b13d3dfd15cffc074cc62c3736ea054ef6d644956652a33b4"}, "a7497795-2a37-43ae-b794-f4899c0e47fd": {"doc_hash": "a67e5002a15c94261baebda8678fef1c4251b054c2f431d781a4b18f9c2d5ab6"}, "14ec726c-fe7e-4fc0-a897-4684d110ebf9": {"doc_hash": "6b442339a79ce36340fe45f3c817cb14bfbc6a259d229ae23a2a728f902edcac"}, "f5469d10-1454-40ff-ba3f-adce46ca9e22": {"doc_hash": "3441c1dfb79b7b30edacd0e8f2cf45bc3ebb5661f4178e4e0db71fd919f23ef0"}, "3334dad8-3af3-4c81-8b00-97d64cbd2612": {"doc_hash": "0a05e1003218cac6b10dcb565e591959670871f16cc2da0700400342a99a3178"}, "af4a47fd-2734-44ae-b615-2fb1dc09d12e": {"doc_hash": "9a2ba8fe1b4ddcf2889dbb777d4f36b601fc2861376a934bbe849c53678321f8"}, "80c65bc8-1996-4d07-8554-7273979a970f": {"doc_hash": "0e7aaa77e40807727980e394a58581241e3c395a76700beb5df392ea434c711b"}, "1caa0533-cd48-4531-b983-dd8c174f0b06": {"doc_hash": "be7b957124cfb516a3cc81c6aa9fb78f4a561d7e259b1041104572715cf29444"}, "e51fca2f-0e04-47f3-85bf-215116efeaea": {"doc_hash": "bb5fa3246c79f4a26592b54f7611f950c8530a97ad0831ed6fd51f78874fc906"}, "90aa792f-0c60-4c61-bcfd-7e2c2b0e791d": {"doc_hash": "59244c8871c812a356a9b62dc5e96081ed2ec35d32a899323010bb43a223bd07"}, "56fd5320-e23b-4e91-9f45-b2b033f9b12c": {"doc_hash": "66a86539945939e77ab117f9779d29eaf6de2728d4dc5b9376a17c5a1c936fa9"}, "b0335f09-1db9-4a17-865f-65912e97017b": {"doc_hash": "d399adeec78b9324c2c99ea4f8cbfb0cc7c36d9ee7f3c6c2262a372cb94f3b47"}, "6861a104-64a5-4300-bcd8-e9193c817d3c": {"doc_hash": "6135eebbebef83900f3fd42b788cac4837762c8d0b62b37136028abe4a70bb1f"}, "77bc0a45-c852-44b0-a809-f2225d5046dc": {"doc_hash": "212a1284c72cb808d22a10f8a2c4fa925767160cfc8d505ec1ab393f97feac15"}, "495b272f-0364-426c-89a2-3fc9e75972d2": {"doc_hash": "c51451462e01e74357bc95b40c290e0a20834fb7d3d84fe3cf7595f94bbeb81d"}, "8499f1ae-8e87-4da1-a904-eb96b280da0e": {"doc_hash": "663cda23bd303326f241c13c3b010fac0ab830e7fe2dd0310033d7f9b67953a2"}, "6c9ba705-414b-48d9-8dd2-1f998b1bcd1f": {"doc_hash": "55f782100b5c828a4ceb9a230c7d3f94b66f893a216fac591964eda1d64e254d"}, "b1eabd8a-9f35-4cc1-a79e-bf251822ba96": {"doc_hash": "7f0fdacccd8b4dc67afc0683c5c3e6bc500a12eeaa19c1a187af6be454fd8cef"}, "09520978-bcb2-4821-88ac-c75c5ae156c5": {"doc_hash": "9c91963b63aa59c05b14f7e8545510190f4fa148dc4746cb66724e6838655f81"}, "3f494070-f51e-4846-becb-5493770c9c93": {"doc_hash": "58546cd49a3b5754629df672c48b77ee0e3a3e290b241278866b75eb3105cf69"}, "1e710377-ed3e-4433-94f6-b87914936025": {"doc_hash": "32d00368fb38474b7cdb076a1293c5f13f1cd78290207abe474718868b9d0b58"}, "ef119e38-5712-4f9f-b8db-34172d462117": {"doc_hash": "2f060642f421178fb2e56d85b15f9aa60560ebf5728616942f0a7875d9699852"}, "586e70af-8bf2-45ff-a3f5-28c88e4cd990": {"doc_hash": "8dbbcf7317337282599d06a7293dc28c37a528e5cc4cba8097c73fb6794b26dd"}, "fc4bce1e-40a5-40da-bdae-8049037790fe": {"doc_hash": "d42f530ec5b17903b576c4c246f94cd73c638e7e557624a4e1c739b83296e600"}, "b16247c3-2168-49a6-8e58-7e8838911cce": {"doc_hash": "3b14e9e4cccfdbcdd48ac36eec09e9e781f61b5a556ba5da50f4dd7954f3d0b7"}, "9212bc18-1b51-4ce0-9700-389b5c493306": {"doc_hash": "8e9cf836bdc7081d221182b26d6f4520bed6a7849eb9cf85f50358c59ae51244"}, "5b049656-be0c-428c-ad11-b1ea3bf73e08": {"doc_hash": "aa5181c6ea64e0e2286a1a98e0633ac6a24bfd3f34d78bf16982403366b3d0c1"}, "28ccbe9b-d7aa-4e64-836a-17a03311ff15": {"doc_hash": "410088d4a91791dadc9d084a200a4e3ba739e3cde0d5527534d5a158bb4302fa"}, "ddda7976-eac8-43e9-9911-3b3a00330b26": {"doc_hash": "175ffb47870957cee504d3729611109a75004cf150524bec0ae77e7207dd5a40"}, "21271cfa-28e6-4725-8d1f-f45fef2e5a2c": {"doc_hash": "57aa9a5bb858e8c70c903650dc5110981631e6f4791fbfe5e2bb26313585f24f"}, "4c21cbd6-bcf1-44d0-85cf-a411e85c5ebc": {"doc_hash": "81454f09c47f5f72edca97a2c0339216ef6bd4a610c36f569ae85d7a3287e18d"}, "accb603c-57d4-430a-957d-66f75ab07d6f": {"doc_hash": "d27c34c4e3a2ff06ea1598c75bef4204c182aa34cb8203f14d5239a944a0d8ec", "ref_doc_id": "6b75c2c1-0d66-4f61-95c2-998ef865a2fd"}, "4850fa5b-5ebf-497f-b524-e252d64bbc6d": {"doc_hash": "57e3ae1295885e3fd2acacad4e78f9441988bfd68f854e42aba7ebdea2a142ca", "ref_doc_id": "5f870049-3cd2-4284-a792-d138f05b3f6a"}, "622cbd7b-2231-4102-8303-b9cec34cc2c0": {"doc_hash": "2dc3fc82eab94017bd72ee0e324163d22c82e184af4fb3948dbfa6a0508da671", "ref_doc_id": "17944380-e88f-4346-b2a4-888289b7d250"}, "707b694e-4330-4a20-b417-cb2f9efdd547": {"doc_hash": "9073e654a213bdf4a061b5134f5e4ae601a1a65dc29ea4f4c9fe4e2413d2de88", "ref_doc_id": "d4911bc9-1758-47bb-a460-2f8e47a91c7c"}, "28f2db0c-124f-44a9-8750-97a534c19819": {"doc_hash": "4e1f4e2319ff49a5bbaefa67e5ba94f92a259bf57f52192ba063a4b3b8829116", "ref_doc_id": "cf0f1d2d-94de-4c9a-9bbd-5fb82da4da73"}, "af249ad6-8d40-41b4-a12c-b40f09830cf8": {"doc_hash": "9a2cbb8df089a1b6ccee0d92ae3bfd44e4f195dba39f812aa42d48f75f68f83a", "ref_doc_id": "fb8dc5a4-b61d-4ba4-8182-602d3b7e090c"}, "4d0723b0-c678-47e4-9ae0-46dadf162840": {"doc_hash": "24fc7a4477c86b7efdcb81d2a75c0fef629623c8040c21f84b316b5541396f09", "ref_doc_id": "84804a87-a5ef-4bbe-8c9a-02c6de28922d"}, "7517649a-3515-4470-8459-37ad1e34250b": {"doc_hash": "00fc7c1d61d4138435d5738494629e5f9cc6db77a3f6ee07fdf7070cdc70d3d3", "ref_doc_id": "bc41a12c-3714-4b97-9d00-7bb0ff8af8f5"}, "0216f8b8-7632-409b-8544-18f7596f40ed": {"doc_hash": "a6eb04cede29ebeb30f38f67afdbc1a18d364f0d094ec9f964d18f2f5d714710", "ref_doc_id": "30bfa035-6d72-402c-815e-291881214e1b"}, "f1211d0b-1f22-45f1-8b52-1b208597b5b9": {"doc_hash": "ef4ed3d501bd6c37c3d0e5e543bf884e06fcfda4f3a9a82f4a7784d0d12964bf", "ref_doc_id": "6d1b9bd2-e429-434e-9283-7c3523e4dab8"}, "3cd40cb2-2fc6-4e58-b2ba-80399a8542b9": {"doc_hash": "4d35ef394305b3f627a498ee696db87fdf892a35685959794b018d601f0d18b7", "ref_doc_id": "fdd0a366-46e3-4109-a516-c12a161f6918"}, "42d8ff52-9ab6-462f-9502-d6b2e12e780a": {"doc_hash": "f57ec9719e6b9eebffec7471009dbb583d22af7093d75d99e04f80f2f7a3db18", "ref_doc_id": "9f3a89ae-63f3-489f-8bb0-4980ddb577b4"}, "e435e1d7-4426-43ac-9ff5-ef7dd205a2a3": {"doc_hash": "f4f7014ea265c156e7eab42b8a36acfa73f428decdd165e017fd7f4fe0313b2a", "ref_doc_id": "b50279fe-23f8-4f9f-8f75-98a47016a0de"}, "5ebc90c3-7e0e-4c97-86b8-0045b805e31e": {"doc_hash": "081e43f6e58adbf3e2f5a253d19c7f71c6dd9ae49f10b13732eecf6b3a3b4117", "ref_doc_id": "199c534c-487a-4222-bd21-b7ac05a2e3f5"}, "1194b624-3751-4099-bda5-e0abed999143": {"doc_hash": "30482349ec3476760fd1e0df9d23ab1e86772fb895cf24895622132d4140d231", "ref_doc_id": "3deb2676-5a68-4df2-b1eb-5c8509435275"}, "603070a7-76e3-48dc-834a-0920ebdd9b05": {"doc_hash": "b345f0476b739ea590e0ccf9fd3ea86ebf7b59c0c804851dd054f95afc0c3418", "ref_doc_id": "9fac8d03-dbc3-4de1-8014-680bddfbac48"}, "90a39c66-82ef-4a1d-a9e7-4708c296d2ed": {"doc_hash": "1b3065c87bf3e82de5a7483bf918889da4285df1e2855168fa49b55dfeaf3dfa", "ref_doc_id": "616a031e-90cd-46ce-a6ab-2ba89c64e5f8"}, "7bd39aa3-59c5-4cd5-baad-6c67919d455d": {"doc_hash": "02c0ddadee207d0310cdec39fa28cc52a93f87862dd440a1c2debed01f0d616a", "ref_doc_id": "769584eb-c0e4-4a74-b751-80c83d80a0fa"}, "a6a3d42b-1eb4-4d19-b4e8-9f60afec655d": {"doc_hash": "547aa6ab1ac556effaaf34c58d45ae75e8b534e93128b1d2db46b1a6afef6706", "ref_doc_id": "722ca348-7e3e-4b08-b8b5-5aacae00e539"}, "db8e4852-1413-429d-a8e3-e601643f3535": {"doc_hash": "75e41b072d7bf53f2964950f27591b3ab54554c58311230a289736fcc0d82916", "ref_doc_id": "78d9b081-2291-4957-869b-87275b038805"}, "e289c411-4e90-4242-956b-b138c8e87c52": {"doc_hash": "f8100c1fc111332e737c9acee77bfbeeb67808510f280b088c839d91b8e1bbff", "ref_doc_id": "675cb5e2-457e-4fc3-9e5d-c82ac84a4ea5"}, "420f247d-03e8-4ab2-9f22-4e4c090e6673": {"doc_hash": "a185a29d0f5e88ba7720a1f292213ac3afa2740d5b37fe6014416548bc0d4e3b", "ref_doc_id": "ed4f65a6-67b1-4528-afd0-0394b7e11f03"}, "d06226c4-05c5-451d-85f9-93d80d99b32e": {"doc_hash": "5c58d883eca1cc560b4c059f75aeb7f22476c6e75d9c6ea4097963f4fc40b356", "ref_doc_id": "f12e7db3-0a73-4dbe-8a17-18858f34152a"}, "e8cbc42e-8030-4a42-8516-2d39445cf8ce": {"doc_hash": "5c266f01dcc15261a5aa4cab67dfc0a03c371e84c0f016e6f0ece1b68ba61a31", "ref_doc_id": "0aafbd97-d626-4089-8e7f-ff40407a38ad"}, "9b32fb10-ab3b-4759-893c-2a1441752c63": {"doc_hash": "f0981853fc59fa00860a53f12fcb6e58689934082a07a0631fe3cfdeabd44cd8", "ref_doc_id": "d79a52bc-fe42-4c06-a291-faf08e22d866"}, "39347ff8-b1ef-4f32-89d7-335f8cd630fa": {"doc_hash": "8b17bf082004efb651fc06224497e007dd9f0accded5e0271ce66da30696ddb7", "ref_doc_id": "ff4a3b22-13e1-4312-b6ec-a03c2bba0ef4"}, "752b8591-c8ce-432b-ba4b-4f80a3cbfb1d": {"doc_hash": "acaaf88b24fe90d8dffe361f2160a37ebeec35ebb014a233c75685654a80ca7e", "ref_doc_id": "518b4fe8-81fe-4c60-b0cb-ee219cfc90a2"}, "73880a0e-4ad1-4921-bb27-311409c33d1b": {"doc_hash": "dd6bd7da50397e37945fefa0107c3b75f30e01330626e44e81e0d0c512c55dcb", "ref_doc_id": "7218757a-7429-4a3a-ba40-f6a5a69b17f9"}, "f40365d2-1875-4898-9af6-aa01dadf5853": {"doc_hash": "8dc5871ebfe23a1c960722163a9450595ef938f13e4cb26cc1ca8bd66be88f04", "ref_doc_id": "153d19db-0955-49ee-8e42-b2ab554904b2"}, "1a99075b-c183-4734-93f5-9d86a4a0ef33": {"doc_hash": "9258cc8216dfef8d2a37eb90364d8d38e3592e6e9f562e53934bd489a9130ba4", "ref_doc_id": "541ba03d-106c-49f3-ab61-01d208a67f87"}, "82514485-7a98-4394-8d08-eae8f403e278": {"doc_hash": "8d5b2b670596252b3a130baeb3bf44f8e753d5e4a68ce1bb0a5dfe7b9a9af7b0", "ref_doc_id": "22f6be7b-60fb-486c-9757-b3d1f3928022"}, "c93b8735-334d-42c1-a0e2-4ecdaa46e211": {"doc_hash": "09919d5f355f539b382a213ab243435c64f30adcb62593d8ba6f55de283fe633", "ref_doc_id": "752a038c-1d56-4151-a6e1-57ade34d0d61"}, "9e929e25-99fb-4219-bff9-cb5d9a9edf37": {"doc_hash": "6f79297909ec53b00dbd39c729612ee40a68e46ef1aae6c6cbbbb1ff25f0028c", "ref_doc_id": "099db20d-999b-4095-8f84-621ea3f159c5"}, "b6cc6e4f-777d-43c5-810b-624c98f964ae": {"doc_hash": "64039aa48d74410f4952682df6c7e41967d9aa2f22843024148ba56a4fc6756d", "ref_doc_id": "de9c27cc-5cc9-4d8d-9ce2-4a2227a5cbec"}, "24709d62-c7d6-4485-a1d9-082afeb133c7": {"doc_hash": "39d0851104d639877f7762cc9ed9ab38d2e08b18a7ee728ce582682c8b3af115", "ref_doc_id": "c2f9c82f-c936-4520-b31e-8fa0ea6281b8"}, "185bbcc7-be3d-4b74-8751-26194a393427": {"doc_hash": "a325ee357b6c21c3a54cf518677fbaeb690315da43300d1b334c6b60239751a0", "ref_doc_id": "6e05c47c-aa36-44f3-a77e-6fe0172304bf"}, "82a993ff-5008-4a78-a90f-b8954eab3d95": {"doc_hash": "ea2c040b7bfb33f164497c390a11e166c79d3349beb6fb49936aae9d98cdec0c", "ref_doc_id": "facb0366-5c6e-4b81-8871-d4e5730f1eb6"}, "6cae80a2-6fb4-4090-9cc6-77c0d2065b54": {"doc_hash": "dfedcf843fdf8d7b126e71d0c7b8b2d55479d68da8f3f34c33e58da68fba300c", "ref_doc_id": "b3a64e42-4adb-4c02-b4de-9344759a047a"}, "2cdfb903-516b-4906-8510-81cf848dd9a4": {"doc_hash": "d406bf1c37d7dc328518ed26cc193aa37023269e9da47c30b4c7dd0e6fcbcb0a", "ref_doc_id": "e55daa4d-a26f-49ae-85d5-8ec166ac552a"}, "6dfd6ee7-9adb-4fa0-abef-17675b545fd4": {"doc_hash": "844b44bf9af57e16e0d80d37a4b345ba8385eb8501ced93d3d196496229017bc", "ref_doc_id": "4b7936b3-1dd9-486f-94bc-917aaac01460"}, "cbf4036f-1b1f-476b-96ef-aae92cd2348e": {"doc_hash": "320de9e83f8470b771c1dc1e74ae4c65541af0f6f61611347ff6b01ee0e48f8a", "ref_doc_id": "ea1f226d-c62c-418f-bfdc-906a7cd13daf"}, "dc9b278d-f302-4790-8119-fd6fa9a8c09c": {"doc_hash": "1152943773e98848105da3eb56f52f00da8773b2951f812703058ef1e955fd96", "ref_doc_id": "877da1ed-aa76-4bc1-a4e7-8567ff314cbe"}, "b2a924a7-7d26-4488-89ac-999bbdbb0c41": {"doc_hash": "c997178a4bf80d19b5ad0a042e9feaa9149b8acc4aad5c69c22e014897d2936d", "ref_doc_id": "7a523f53-d272-4679-8c83-46223db58026"}, "73c9f46d-beaf-4b2a-9519-c526d928352e": {"doc_hash": "6a64c0178e6d247136d6bfda05324c437f8a1678d19551f7120fe3d56e2cb516", "ref_doc_id": "d8364767-e8f5-48cf-9c2c-20b3621d772c"}, "c17ed029-9479-44b9-b441-a8e9bc597b2f": {"doc_hash": "264f1227d0c0596cb5ac5e44de5dc2361cbbb98a4728d4c228bbb5e5cb15a147", "ref_doc_id": "c1dff4c5-6324-4968-abcf-f761e1d6a0b9"}, "9731ba07-c0e2-4950-bafd-6a926bc5a864": {"doc_hash": "2aaffbca2b35ddcfb9b5d2fcd2b538b503265d421d3d42c24e3f588a7bdcc2d6", "ref_doc_id": "64106a82-9b59-4f60-82cd-c682b8a70d56"}, "55bde1b2-b329-431f-85a4-0c1b04099010": {"doc_hash": "498ea2464b661611dc36eac0303b468c179103f29bd10b38fbd1c6c854df93fd", "ref_doc_id": "da136a53-3d61-49af-9fbc-5c05208d11de"}, "0ce329d6-ea59-4026-86d2-a68acf879c1c": {"doc_hash": "6a91d394876f3430fa18c8bf145b32efa68dd1447bccc4ce6910d45aff5b1c13", "ref_doc_id": "b5f78e2b-6707-4f9f-b151-08655d360a9b"}, "33cf35c9-4093-4469-8ebc-c06b1a7ea77a": {"doc_hash": "8ae6110e81399998e316c85bb6c0d3b4cdfb885d0f673828c4260845d1b5e49e", "ref_doc_id": "72d90471-ef21-4160-bebc-8d3970f18b9b"}, "a9592903-191e-47d8-a2e0-e44e57319d98": {"doc_hash": "ea4f850bdf21ad3aa7931df1dc2fe7738e086d9a576ef36ea376e2ed0995c121", "ref_doc_id": "1121d67d-f094-47cd-b8a5-1a9e70b648b8"}, "1c79a8c9-260d-4a8d-801f-2ae08e511f06": {"doc_hash": "47f0fef9a3981c3affcda47246e9ec302272be28cbf338931601974e84a949e7", "ref_doc_id": "fa21f75b-45a8-450b-837f-ff4a21788c16"}, "98dc2280-3688-4a27-b0ad-9fa1a4675a50": {"doc_hash": "3ab532ca8bce0a2d2a531ffcf9246e8dd1095bbd03e0bd90482fa1c1f5294af4", "ref_doc_id": "f3651a62-81d3-43bc-84f2-80e66bfd05dd"}, "b5a46ec2-314f-4e75-8602-ef6076e0c47a": {"doc_hash": "fe2f7250bf4aa79eba449d03696e5e6bfde5300ea1524a6b8d9c8dfcab1e72a7", "ref_doc_id": "92aaf5a3-585f-4001-aef4-05541309319d"}, "803ed9e8-b633-4fb3-a1de-93de761978b3": {"doc_hash": "30f70a20e6b3682bb2d82c71bad3575d1961a25fefc4d6402015f4e6909fe89b", "ref_doc_id": "d225eaf8-cbcd-4a0a-a8bd-4939b398a87f"}, "b74129dd-563f-41e2-b047-996cd1f0040d": {"doc_hash": "7a4016c6fdadeb37b33789bde978e7a1cbfb88819e71f610926c8d92657f00ad", "ref_doc_id": "c4b7a296-d9b3-48e1-b5f5-267544c79b27"}, "025ae5c5-f4f8-497b-a870-366438ba5540": {"doc_hash": "58c0e5f24ee8df1ca4ef74dd66452faf8dfb252b45ac077e7e63596ceaf28185", "ref_doc_id": "6bb2cd90-4ade-4bfd-9895-5961a43e2f66"}, "feb7bfc3-c537-4b4b-8f8f-69c68ff923b9": {"doc_hash": "e946dbf1bfc6a0007321d540fbd2a55f7d858d4b7659a02f824d2c1ea2f1a281", "ref_doc_id": "c39686df-3202-475a-a323-ce5ea6a5572c"}, "b4b5fe2d-f752-4fb2-bdf0-c424b8853502": {"doc_hash": "0f616ff36ffa82e4367997f3680389e73059b3480707e1aa894a7a25ca675727", "ref_doc_id": "a55c2433-1bed-42e2-b400-bde775997f03"}, "b3c2970d-810b-4a8b-9b52-a4d43972dd60": {"doc_hash": "1e812c47658f621065a5c8e191735f77acc63ea6da35d8c81351fae38fb2e26b", "ref_doc_id": "3a26d13d-c3fe-4e66-a13b-69e1125f9429"}, "36195c07-fc0c-4a14-9f9d-67405e286b46": {"doc_hash": "fb252f74dcfdc1a6e57e6677a8386b1f8652b97188cd2879ccb3146cdf0a11fd", "ref_doc_id": "3ca0527b-de9c-42a1-9ace-e747fd467139"}, "16bc2399-7de0-454f-b320-e3934b922f71": {"doc_hash": "40d9a874b8400f5ef60752dc99fbf1827175fb9ead0b794fb2ea807e215d6610", "ref_doc_id": "778cc87b-1fc4-4d08-b45b-ac3484fb24b6"}, "aa516b43-8495-46bc-9d2e-451a7bc01e5b": {"doc_hash": "2b13e39552de99721b83b729d3771d33b6c3f838a3398b154f5843a3a88c5427", "ref_doc_id": "66b02433-a600-4ec4-97c2-b6a6afe1b473"}, "8eda3b05-0bcb-42dc-8b7c-cfabb55738ff": {"doc_hash": "07e5608c50bf9b1a40887ac7b8053c8955f12902294e8104511020e263761ee9", "ref_doc_id": "2826eadd-fbf7-460b-8716-3c1cc7eabc90"}, "9e906416-1712-4807-bd55-223a0328e8f3": {"doc_hash": "be465e2b6ebfdcc0e4e6b2d5d160b667cc0054e3ec63ff5374b9f3c87b639b83", "ref_doc_id": "515f93f6-703a-4e6a-829e-b2fa6ef1c7ac"}, "dee6e763-e4e2-47ff-99ec-f8a7098b79da": {"doc_hash": "af64f2825dda96b7687a44e386c6157b3156fae55d0ec4ff33f9bbab5698e09f", "ref_doc_id": "85e919df-9c3e-4ef8-819d-3b1cb93f1c75"}, "810ed5ba-6007-4b76-9b3e-8dc403b05917": {"doc_hash": "93af55b63ad59627b527407de591143f1a4fd389c78465f774ac3e60cfb6272b", "ref_doc_id": "6f23c2b4-233f-4d4e-91d6-d4a8f69466a6"}, "79eb6b72-4683-4f13-a842-666e29b701ff": {"doc_hash": "63a0a09a22b9f1ce48af612ecec57a15e6f318d37302181a22262f71fd423ac1", "ref_doc_id": "3b22d43b-5ee2-43b7-9298-f4e232a0c352"}, "ff9c3221-55d5-4c53-ba08-982b95444b1c": {"doc_hash": "9ca92c8ee43364440856fd80f1946dcc2f88fe47f6d544cf6636edf60ca50e00", "ref_doc_id": "e5611e91-5ca2-4f95-85b5-afa4c2fa4204"}, "e2a8b96a-25a9-4e2d-965e-03cef0d93530": {"doc_hash": "2c7ba15d6d123279aeac193a7f7dee2eafa893961060f74de78066051462a3d5", "ref_doc_id": "8e07f125-b421-4605-878a-2900ba5f8c9d"}, "c5b14826-34de-4e0d-ac18-3360442f5b12": {"doc_hash": "8a5d4b7b395800c0127c5d78d5c090da7c3d1d10de2f2d117a050f9c3bfccea5", "ref_doc_id": "272782eb-53a5-4cda-8285-e8a7f00d2a1b"}, "170d47ac-c928-4b07-be73-3396d40f50c8": {"doc_hash": "e45a0360f20d21d533c225f8f87027da758b5da87c0abf7a37aadce47f2a5a70", "ref_doc_id": "49482eee-b2d3-4a89-ba69-605b95356f12"}, "6920acb1-81a7-4e79-872c-3b922b49d069": {"doc_hash": "bc91325026ce076cd6735291fe872461e79ea48315d2c4d84189e95fb8286a32", "ref_doc_id": "7e966d04-965d-4f00-b743-472b2cfbffad"}, "316afbe1-1761-42e1-abe5-aefcb9705a61": {"doc_hash": "0a9fc645aec54d26fa6e4135075efd2139b925694bc8c42f387ec1f5e46698db", "ref_doc_id": "d3225cf5-bb14-4533-b02d-05c3997a452a"}, "2f3197f6-befd-4cd5-9c94-b81107e78ed1": {"doc_hash": "db86ee50db8e6ecf482214267bc868f3af5dc9e885d976cb5fc734308a321b67", "ref_doc_id": "44c48063-0ae3-44dc-ac5d-cf2ccb2743c6"}, "cd8c1a20-b02b-4aec-822a-53998dd72988": {"doc_hash": "0772ef628242d085bad7ce635a9103d9192a0f5aed178b0ae8bca5d3bd8c03eb", "ref_doc_id": "67330ad6-fc3b-4fdf-a98a-3d67952fea53"}, "0b63bb53-2b4f-4656-b25d-3334a8749e45": {"doc_hash": "a942bf4c6355ce454040c0607103fb54439f00fc2877bef4be5e39f3be01f24b", "ref_doc_id": "b614016b-6733-4631-8627-ee6dedd125aa"}, "dae4db48-5d6d-416e-9d28-e6908581df94": {"doc_hash": "3de819f853bb7286b0ec17474789470889834368c8b613356c11bd09996ba93b", "ref_doc_id": "3d6c5555-bb51-4a89-9d1e-b658cc51f07e"}, "9c72bdaf-548e-4358-a2b2-a910b2c36069": {"doc_hash": "317bfdcaab2af8f415256c93013a2a08937965753c1f9950806279182003d9c1", "ref_doc_id": "a4599e28-6422-4e1e-916e-586b94af6474"}, "4256cf78-4e21-4eba-a9ad-c691bcb377e5": {"doc_hash": "29d2d844103bbaf419ed351e38502a95f494bd84f5b4a9cfdffd23d2c6603ff1", "ref_doc_id": "0b246e80-9431-4929-a624-276108b13180"}, "97149381-8904-4d1b-80eb-387fb3714be8": {"doc_hash": "badf8be72e87587f949d1e66729e208efe346b046a34c329755463e1f0fad84e", "ref_doc_id": "12d708cc-7ca2-48f7-91dc-245d76dd6b51"}, "0abe758f-0d1e-49da-aade-dcc3ddb88185": {"doc_hash": "16f25af90ee54ca80403eb9e004ed8a4938b4119ae3d29a2c6e3a5e79e209787", "ref_doc_id": "b7a92457-8d71-4a06-a829-cf4e22bf2b42"}, "3a32dc29-2129-47c4-bfcb-e1b0a60e8462": {"doc_hash": "078b698187f0d1c2779e4fd5f9d6f8427a2cac1ef470a403ab4616849652d2cf", "ref_doc_id": "ca001477-1244-4160-9e5d-88e3ed0a397d"}, "81f3f0f1-d4d5-48c5-ae0c-6b307d83062f": {"doc_hash": "015feffd3a6417f792d7d1586f3c42d47b28f46f4a5cc371438a11ef465a9ea4", "ref_doc_id": "37c6bd61-b717-459f-9a59-e193ca43b858"}, "a4816a14-0967-4c51-baf2-8cf732e384b4": {"doc_hash": "89aad9bb8a8cccf3ce1e73687c65daa601a4f217b489727675c64c441846d89a", "ref_doc_id": "49535141-ce99-4070-8cb2-320ca16fe77e"}, "272df0fa-bac0-4f32-9727-9f94a902c771": {"doc_hash": "e228f662cdfb03a685094ea19c2091f4ad022b9c6c0025be76b14973bae05b30", "ref_doc_id": "58483fe6-0b10-4fab-bb16-4b9f3f7038d7"}, "690c6f97-12ad-4988-9152-8e777c1f8409": {"doc_hash": "aec05d27dc2eacdd4bbc279a4640d8b535711543f5f7a686cb7a90c547881ff1", "ref_doc_id": "ae3f4d3f-a8c2-40de-851f-f2e04a462c13"}, "a8fc0c6b-82f1-4f33-a4cb-1ebe9d573d3e": {"doc_hash": "b20f32f7da4254bd0239efe2ee1bcfba32821f401abad38391a8cb89ba9e48f3", "ref_doc_id": "602cc5ea-2f78-406a-be3b-c671a0444208"}, "73b972c2-e440-4940-8008-689c61da128f": {"doc_hash": "6b4071759efcfcde31dc899dac128a6cdcecb7795f66e3164d3a0fa6fc5ed92a", "ref_doc_id": "9b3e4c17-24b1-4c17-bbec-f16c22d45d56"}, "0f127494-6e03-450f-b20c-c877ca25b319": {"doc_hash": "51808358304e1e0c1f506bf3bae614414cdcfeba4f97c2147c4b1e759af2fd03", "ref_doc_id": "c275e3c3-0b7d-4d30-9dc8-4cbf80c39d36"}, "96e3ef3b-b943-475c-b77e-9cbc431502b1": {"doc_hash": "6293c502ae99e3978a3398e496d2638e8615af7b090840d7f8e5d449564ca1f7", "ref_doc_id": "ddd38615-de89-42cf-9cbf-b015d69cd98c"}, "19fa3d3e-7c19-41d6-b86b-e72e75adaae1": {"doc_hash": "e3765d6199e967c05c9d452632d670807443dac72a6380baa68e024d7ac2ff62", "ref_doc_id": "f91c9a09-d9d5-4fd3-8559-77cc1726605f"}, "0294bf87-bc1a-4fa4-bbc9-1d522a107a37": {"doc_hash": "f39e5f635d6715df673dfac4bc90795eb4bd75fbf5c714d9867b93c681f32502", "ref_doc_id": "255f7452-e5ad-4c15-b55c-3e150ed788e5"}, "4f011452-f052-43c7-a7f4-b7e3d2b38394": {"doc_hash": "305d4c18e12e3945eeea5840568a9a8886c7d603fc8bbcf6b52a5edb104ee51a", "ref_doc_id": "f3de3db1-7ee3-492a-8a0d-50c8e770c31c"}, "00294ce4-219b-4e81-bffd-d7070081c378": {"doc_hash": "5677790cab322754e792c996eb4038a0f515c8a130845fe4d312f66574e7ba9c", "ref_doc_id": "22bf0130-134f-4783-a1db-e9e3e7fcf943"}, "d23d2670-f998-4a2b-b686-bb899cd3e445": {"doc_hash": "a347b360909f1876cafa5c88483233031ca12b251c85a08159c08187a3d44d20", "ref_doc_id": "847a8708-685c-4c97-961c-4bb18ac39a54"}, "74df3ee1-9edc-4894-aba8-3c96a672c0aa": {"doc_hash": "536a18e9c39d1d491003f6e929e9cca06c109f0ca668664ea32e578292e9882b", "ref_doc_id": "d8254abe-abbb-42e0-aef2-d1e18668d931"}, "29be9ada-3ef6-494f-84a6-1ffcc2f80613": {"doc_hash": "8fb1dbccc26379f7a091f454bdabfa29698ed83536fa0fa0775943908057be62", "ref_doc_id": "6404afb5-2906-43d3-94d0-307aed47cb0c"}, "06166bab-8102-4c28-826c-8c27e5a367f2": {"doc_hash": "1f6eb767abda4ca6abe60522efd1b138388cf380af5551d04a7d2c523531a9e6", "ref_doc_id": "a56c38cc-81ef-4da9-92f8-651ff2550d34"}, "24053360-a280-45e8-a94d-86eaaf7de34e": {"doc_hash": "3eb9caf8d29fc3037064b6752a9df876e8c240f8c04ffcfd21f88978104fa324", "ref_doc_id": "55aed45c-13b5-48f9-9836-092d41f95dfd"}, "2aae5618-7a72-4f98-906d-ce3c381a28e3": {"doc_hash": "1fc66ff62c8e98a40d355c40aabec38e361c3099700f8edb31bf71a584736c72", "ref_doc_id": "d6d59b5c-620c-44a4-891c-9f126cf3ed49"}, "73352762-5704-4d4c-ac1a-815596b7809c": {"doc_hash": "23074fb41b017cc4b6453dd5ba52e98c16ba485ae31c159fad28a41ede91d7af", "ref_doc_id": "01b5e478-15d5-4a9b-9a95-5a5b8ef48289"}, "cc7ac38e-07ef-4eea-b842-f03b15cef582": {"doc_hash": "4eac422e71ab72336635a487e66068a3220957df000166600c34548b4b7657ba", "ref_doc_id": "5f555fec-e0b8-49a7-9756-a205e490cb6b"}, "3be7110f-0f80-47d8-ab6d-0be74eaacced": {"doc_hash": "45f13fec6b4bf52000e1940de10ecedec4d3b6f504c9338bcb7893ad4f9abee6", "ref_doc_id": "6030e332-da6c-48fd-96a5-cd1da6680c04"}, "d1974fb9-4916-420b-95d3-2f0effb98d8a": {"doc_hash": "5356c56bb287f447b21c7714f0ff39b340ee5edaf6ccb17ab9b333ead5a49a62", "ref_doc_id": "606c77e6-88ba-42fd-b29b-486611922bf7"}, "8a9649ae-032b-4ba3-96f0-fe093ec621fe": {"doc_hash": "8bac968027f922b02ca19eae1ccb9b9af3059d19a1b8114b548e93840cb1120f", "ref_doc_id": "aab63da3-52b9-4995-966a-337cd7793b69"}, "dd17cf62-fb34-4d89-b6e8-fa18c6fc276c": {"doc_hash": "2ec7f01293d40590c57f0d6f1061c8196c60881c4a06bd7621d60c66df8620c8", "ref_doc_id": "31b09439-5754-4758-a659-f27d5b0db384"}, "9faad717-01c3-4f8a-be92-38bb75f7ef50": {"doc_hash": "5dcc26d051393042f92dd073ef2d8123744a80dbdecb413f7acc09dd5f7b6a87", "ref_doc_id": "8e40a6f1-39a9-4d99-8df9-3781bc15fd13"}, "72565298-45aa-4b2f-bfac-18bc3ec8244f": {"doc_hash": "cc4f028ceb45e3c3bd67cec50a2219b979e498049134c2ff68ca6f0c59456f54", "ref_doc_id": "841863cc-ac91-4c04-aa0e-61789519e340"}, "de9f7ccf-6467-43ab-83eb-1fcb99ab0c7b": {"doc_hash": "657223b5e90a2cfe8e92b927659df374c922dddfbd101bfc754c4ca49c023693", "ref_doc_id": "53adbefa-b741-4033-a374-21cf8c391907"}, "2f9b0054-ea3c-439f-9650-ec980d42c27a": {"doc_hash": "5aa30100e04de3f5c4e3ea0537216aeb23380966a5e13f717abc27eec5c96a4f", "ref_doc_id": "95d9d9eb-3e47-4697-acf8-a80c2d1df643"}, "9b28592e-5595-4bd2-97f8-639d5ed8fe08": {"doc_hash": "4e4a80df0fcdb5bc3635295bc1ce7bc1701ac3eed9f2dbc4a1c59c754f1583ef", "ref_doc_id": "8e7b6de9-1c12-4808-acc7-c379c22665c1"}, "32062a0a-3cb3-45be-9467-5a4a5fc0f95b": {"doc_hash": "30651a2a97fb266b33a063412b96b1d3def5e6c03c365f4de313c66532c0e2f8", "ref_doc_id": "5797c2d1-8dcf-4cb2-b0fd-beae5d3dbc15"}, "8a0102ec-e546-408a-88e2-223008ee2759": {"doc_hash": "de847dc2ee51aa398a7002fd724cbd537e5010ea5aba92551c293ccb7efd1b3c", "ref_doc_id": "b400607f-5963-476f-a123-c0aacb332a1d"}, "6d779f43-cf6c-4403-bc3c-c82202aafb83": {"doc_hash": "3aaf353705d0c057bc09c9bd6f9ef9ff63857e21da49d5df591a5cebe3790a03", "ref_doc_id": "3fe49d07-4daf-4b7d-9f77-d9d0b0d93c2a"}, "b79facb4-e88c-4deb-a573-49167b824e36": {"doc_hash": "8f5c6d6a66736cf97067ca68ee208a2d88a5f2dcd1a1d5b8839db9bff9f97d4d", "ref_doc_id": "9480e5db-34ab-499b-98b7-8f28ba13925a"}, "1b3f5061-20e2-4530-8cbd-c64bcdb2cc1f": {"doc_hash": "7d93e68e8731385c79bb65406b1650b122ca1a6538dfecf91d9dc46f362533ac", "ref_doc_id": "fab7694f-f2a4-4fa6-88e3-33e93b725137"}, "2ad96b11-e971-49c6-b3fa-af4e1bbc69e0": {"doc_hash": "ae715474d3e7fdcf90d1c682bbb6d99e71cf32d648994b966facde5d67de74bb", "ref_doc_id": "cbb653e9-9993-4085-a896-350d25a77429"}, "8068c98a-a0bb-4740-b61f-96bf793c1229": {"doc_hash": "547830e03381da0f7346e0595470017730fe46845e425840a3664f64a7fd68d7", "ref_doc_id": "2bf72bfc-8d4e-41fc-a8a1-7d9312278018"}, "44230e33-84a0-404e-bd6a-19c0e0a9a3a7": {"doc_hash": "7c796813346fa254d0c0ebf03acf7c22b45069160a20fe589a0546d5a68c4ccf", "ref_doc_id": "fca68294-5e7b-4397-9c21-f957aaf0f440"}, "396e7ac1-cbe8-4f15-bfb4-d39c2d22e061": {"doc_hash": "e08b57d527c5275913b1e8ed6ec04513f73ab98b5449a0e63607697026073168", "ref_doc_id": "cf856626-99a7-4a6c-b0b8-bdb31d61403e"}, "48283ef2-6b77-4b51-b244-a0f9d45d3640": {"doc_hash": "e8e88b46bad024a4589fcd2a01e7e52cc6402691818ca1ed3f7c0136d91da501", "ref_doc_id": "05100e91-71db-44cf-9b5e-8c18ce9755a3"}, "7eab3c44-c36f-4d97-9fd6-8dd08238f0bd": {"doc_hash": "448debdd866628d89c9abc5c52f3540494189a1909bd00ce2d85c94ced11d82e", "ref_doc_id": "3e66c6f2-3a07-4681-9126-2a52bb617fed"}, "90bf7916-92e3-4b06-9943-2fd0c44cebd6": {"doc_hash": "5affa45ec61394f07a09a4afcf52b8b1492f5731491f9de28bc11266a63f0db6", "ref_doc_id": "87241ec6-977a-4b18-bbe3-7959d33c1453"}, "989b5652-ce50-4b94-82b6-f76b48e6f2cd": {"doc_hash": "95ce6fa1a897ecc5d9cf48ffeaf60d84a9b53c3747824c538ec070ca421c5010", "ref_doc_id": "9c963056-63a8-41f7-9c33-3bdec3f8e993"}, "966bcd91-7087-40f9-b0de-9af7cad7c765": {"doc_hash": "a462f48a7db0224499209d2cf2c13cfb2a92630375ea4440bfda54adc5bf7b74", "ref_doc_id": "893a3a3b-787b-4967-a3bd-fc26e16e9509"}, "3c05a151-89d5-46ef-aa23-a1d1ae99c31d": {"doc_hash": "3a4cbc288e1bd3eafafe4d895d22586e692a01b8667c2ff53d82c83d59d258e9", "ref_doc_id": "df2bb496-c108-4107-b0e5-7b8113dc5706"}, "10fb71ae-c312-4672-bd16-966db5b97947": {"doc_hash": "c7f672beaf46db19b38e602e4ef8973b7dd292db5f8abf47ad6cc32664890a40", "ref_doc_id": "86f92053-3759-4a74-9ea5-1dc37329c667"}, "c667a8d7-c163-436f-a621-23035e8ff85d": {"doc_hash": "dbcd66a4b2b88d77908e1c8ed5fe69964854dbf837a5f690e594c601d9ee746a", "ref_doc_id": "b38d3d99-4393-4aa0-be88-da83cc072937"}, "ccdd883c-97b8-4903-b57a-25f3115011e9": {"doc_hash": "9d970f104161e1073949e02e6930120b8af6848737ca6a1bfc0bb6916c96353d", "ref_doc_id": "c9b723b2-e9ab-49d7-94a5-72d1ea340fae"}, "2bc7efa5-d412-4620-b142-c652d59c310e": {"doc_hash": "a0ed96fe38b6789381b152544b94630aca2d6dba4f00fafd74d249f88e60801e", "ref_doc_id": "0cf1ecca-3e39-4295-ae0e-59af5b30cd7c"}, "7ffb6132-f7ab-45b8-8ca8-0547971c9e00": {"doc_hash": "51e9c8a87e732789354ab22d54d1c1c28e5951b16690808fe420f60f3f2d1baf", "ref_doc_id": "3171074d-aa39-4841-a466-3dc941727e4d"}, "70ebfc59-5122-4b0b-b308-da6c3942d1f5": {"doc_hash": "e480ba383c885568e15bf9a329eef9a1d3ad83faa9f678397db4659f64d4aaec", "ref_doc_id": "44caa7aa-f85e-4670-80e4-051ed777d0c5"}, "a596bbaa-6d05-44c8-98ee-83b1bddcc256": {"doc_hash": "3c3a22434ff83c4f74bfcf63a1ca67fb2e646ba2bf0f2bb49521652022327a20", "ref_doc_id": "66edd299-9382-409e-b3ef-88672c0d7fe9"}, "019dd907-86ed-44d2-9ae2-ef2285c8bbb2": {"doc_hash": "c82a6a70f3d3f342cb66c75a630cc8952033b19fa6e76aaf4c2f1a9355c370ec", "ref_doc_id": "4c1f7836-fba3-4b51-8453-bc485596495c"}, "266815f1-e886-4fa7-986e-dc55bc4dc4fc": {"doc_hash": "002501272978632880d45f2254115a2c37d92bccf673523963dbaede1c7580a0", "ref_doc_id": "1383af4d-462d-4f37-99a5-e123e5c91877"}, "b8777f8b-edb4-4687-ae51-640f3061dff5": {"doc_hash": "babe6bfd97927aa16744ea7de2d6e79d7a4fb9467f0554765a20414ff9aa6f19", "ref_doc_id": "c23e6e4a-da16-4d12-95fd-8a5073f4a610"}, "a78318e1-51f4-46c0-9f2a-ef1e25548a70": {"doc_hash": "a0755f21885a0eddbbb65a17758a969898c086c87d5846d289848c092eb76013", "ref_doc_id": "02630518-88b9-433b-b555-39f191d2131a"}, "c372f544-7b04-4558-be0c-f3ff7b80987c": {"doc_hash": "09409b62769d7a60ca28caa2dc0bc4757076db3bec22034c6494b134e8d19d64", "ref_doc_id": "6b15f92e-ee3e-421c-9008-f8684d2007dc"}, "49b138b3-0fb1-4192-b014-271b730318ce": {"doc_hash": "c1e75eb71d448f576288a866c043af4f35fe229b8e23901828dca47dc5136c3b", "ref_doc_id": "1199e8c0-5275-4c26-b4a5-18b4cd3cf963"}, "1dee8f15-872c-434e-adc0-82a4910831b3": {"doc_hash": "f6efa7c05f7335065bd7274e3adb13c589ccf2cee7349e35ffed4ba25a36c9cb", "ref_doc_id": "d7400ea9-dffb-4461-b598-6ef466a6290c"}, "471f2674-39ca-45b9-b4a9-b00b0a4331dd": {"doc_hash": "e1feb8fadccb2ee3e9755619655f0177634032a46111799bf88e6b6f2072ed59", "ref_doc_id": "1cee0a90-8243-4b89-b13b-d83205a235ce"}, "734bbd82-a65d-4ea5-8156-66cc0dd593ea": {"doc_hash": "603cdf431a5bc3647468c04b875728d55f402cd81b74aba24bbf050fe12e1345", "ref_doc_id": "4a01965c-fc68-4b04-9c8e-9248b4f51bea"}, "bd93fbf1-6f32-49c2-8542-41e590d5f90a": {"doc_hash": "d88f9b25db40e532505ef11951ec18856cba42f8ef297e9e89241cd95c335bff", "ref_doc_id": "072bcc58-db06-4157-a639-3357a2c45127"}, "d8ee0270-f9bc-4489-a3f0-5aa3b60956fd": {"doc_hash": "9d8e4d0c787bd03fc8bbbb2e8c739661713ef87d015111b3e91d86eb9b003b16", "ref_doc_id": "df030065-bd2a-4db5-b4e5-384d0274029d"}, "9e64d711-674e-4e9d-9151-aac0cdb352b5": {"doc_hash": "7deec470c26b26f3041576af5564c9fefeca94400446df92d7e42c5b73df85fa", "ref_doc_id": "a5d67529-eddd-4a48-92ae-e2d8deba9cc9"}, "6533bce3-4fb4-4e52-b368-535a87ba102f": {"doc_hash": "8fe46cf1a96ba82d7f022a6f44241cbaeeaf5f0b793b99350a5d124e5255f189", "ref_doc_id": "65726522-4667-43fe-88a2-ea5f80ad8500"}, "84b2d8ab-3904-4681-b668-7c471ad6042c": {"doc_hash": "1614684e2c40ff497e0b192aba9088e186984b224386d421f1e430f5b3b90ff7", "ref_doc_id": "4b888147-e092-4335-a5e7-698a9157726b"}, "d81ba57c-ae53-44f9-8726-5584acfdb050": {"doc_hash": "92fdf2733e679abf8ea9fc80e6cb04a0bb15d2eeef0d88186375aecf18124a2e", "ref_doc_id": "11f652e0-7ae4-42e0-bd79-c3ff258cdd6d"}, "977539cc-394b-4726-9e0d-f8a3e689d5ea": {"doc_hash": "04608a4f05db52f77f006f3dd0d7098c4f896993f911a21d8fcdee9a74954e9a", "ref_doc_id": "ddc2fdf9-401e-41a6-a3e6-d6f14dee498a"}, "a0eb1e52-f3a9-4b34-b200-38ddcbe89a31": {"doc_hash": "7dfb8f812d297ef883897c896c0d33c27b5c84a520b5b8dcbdf7f478f39bb600", "ref_doc_id": "f738f2a1-f7a6-4f6f-a363-2dcbcd75de61"}, "08bcd2e4-544d-4fe4-b052-1826d42cb0eb": {"doc_hash": "8b2a7ed869e119c6e5b75eb1fe2e1b19ba510e0cb5eaa95ea6adaf2ab28dccd8", "ref_doc_id": "a2661a6a-24df-4584-a455-f5fe8588e904"}, "3f7870f3-b832-4ee1-b602-454ee1b21df1": {"doc_hash": "e0b0b35938cce54827fb51a144b11c61f7559aea36429b971a244837db854392", "ref_doc_id": "6996ff1c-6afa-4d30-8d41-d778b7a2879d"}, "a7d715ac-40a4-4150-b157-d41905bdc010": {"doc_hash": "9d68453d7a3b11aebf525402e8b0843311eb4e0b057d83295c397af493a9194c", "ref_doc_id": "1f3f9551-eb9a-47c2-a529-e07375d3e176"}, "30eff0a4-ecbd-4e16-908c-790c228027ca": {"doc_hash": "973e958cb5469e8c7d23bd50af53917384ccda84811f7ff695dddbcf3200e22b", "ref_doc_id": "01d805f7-357c-4d69-855c-2772e4f4b38d"}, "4c73ad51-3a53-4a58-9448-c44d22a2c0a9": {"doc_hash": "db6cf18a8b9100995fbe0f1923da6b44415e615ce73d98565193dbac3fbe3744", "ref_doc_id": "271c89f7-cfbd-47f3-971d-174d5b914a47"}, "92680dc4-807f-4bf5-834a-3477f32af536": {"doc_hash": "1cd2cbd8e26c15abb064bc38706a0814757357fa3cbfa090edde091264f6117f", "ref_doc_id": "c50656dd-cef0-473e-a1a1-a3c97047be6e"}, "e118d42a-d6aa-4826-a839-e5bb5320a4c0": {"doc_hash": "79eb31953cddd8ddcf05e34a40b90e72d7a911a6a7fcd9a453d7952b51800464", "ref_doc_id": "4de0799b-ae5b-4cae-989d-2478ac087634"}, "03ac0a5b-b229-4361-8c5b-787ed2e30fda": {"doc_hash": "15aad2cd4e3fe36ed0499d5f1bb9aca1090d151b45f5e57e1513f02e42de94af", "ref_doc_id": "2f496a99-7295-4c19-9526-6b015a74cd5f"}, "6aeb8075-ff72-4214-8429-6393f7a0ae70": {"doc_hash": "4341df81c899c33f5675c0af94df05adf81fca03ec8a593ced29594bbc9ab29f", "ref_doc_id": "2567bef6-04b3-4db6-a2da-6e3fc7f18df8"}, "3c0e67d7-0493-4d8f-9796-32e27cc0aadf": {"doc_hash": "8dd80a1e5c1325cbe6d38cddf087a0b63169a2f37e43bc369edc8149c848c432", "ref_doc_id": "0d56e06d-4e02-4fc4-bdf1-48340e40cbca"}, "651eec0b-0e83-48d3-86aa-f017795242fa": {"doc_hash": "fc20228959f552d7ce42ac36014b4568298d9d9e8ae018b16218413a17ef0759", "ref_doc_id": "58b91fe9-cbe9-46e9-b4f7-59562db32b9e"}, "ec63facb-80e6-4697-818b-8fe3c40947d6": {"doc_hash": "923db74bbbb24d0370db1e288dedc27b8de29c697a36716e612f707571bac502", "ref_doc_id": "14cf4ea0-32df-43c1-9118-a97cdcc14136"}, "85ea9e60-4555-40ef-a009-d187b78f5889": {"doc_hash": "25616084bdafe353f4b5a1eb8c8a38a95244857b1f69bef5f98e362fd9215959", "ref_doc_id": "096313e7-9ff4-43d3-af9a-384fbfe09319"}, "12e8ee0a-ffa9-4424-ae2d-ec6a9e666eb2": {"doc_hash": "52b72d417b9035d9707c7c45baaecaa494f34270bff3dd54ecb7a8ec1dd579c2", "ref_doc_id": "b02d13c5-4446-4352-94fa-25f2cb6d6525"}, "8fac555f-5d56-4013-9d80-ef4264c6790d": {"doc_hash": "6ba5d099430d3ffaece5ca7271b54c3eaa9d019606c544df7becbc6632276023", "ref_doc_id": "1a9b820d-105d-45c7-bc65-edd7de3b0020"}, "38e1bc5a-88bb-48cd-b832-200566476dde": {"doc_hash": "891e7ca94f260c0215d4da136dfa267c784a858f6bc0ce6f3f40e03c17edfe98", "ref_doc_id": "3265d7bb-a72a-4c28-80a7-5648f691abb9"}, "75326aee-991e-4156-b379-1bea4a54f4a1": {"doc_hash": "88da4324e5fd041e757f3f13fb9740e43bb076b877623165f7697cb62d23ac4a", "ref_doc_id": "442c8162-2354-402c-8ecd-004677d707ee"}, "e5495a44-a122-4130-a222-a58922d5a9e0": {"doc_hash": "7a509d3c5a912329f7866b8eb5e671f770933557b447ea5aa9751265dfae0478", "ref_doc_id": "9a6ba5c7-a0ce-4089-90ed-f18a8adfc595"}, "ce742108-bf67-427f-938f-bf5d08807e8d": {"doc_hash": "06a7a67df88f3c9053d1add97a49e9707b098ce8240670c863d0ef7a877bfa59", "ref_doc_id": "23a6a665-6497-4513-b2e6-b0d4b42e146b"}, "69ad0a99-6553-42f7-82c2-c44d11760455": {"doc_hash": "0b637fef8c0b5045722a94a8d59f8ef39f9e8f5d44757cac314d4b44fe409763", "ref_doc_id": "0e0847a3-cfc5-4b24-9196-8de96131ff80"}, "630562f6-e80c-4584-aa59-e20b54aa9970": {"doc_hash": "6e2b7e60130ec8b07bc2495826fe8ff195c870ef12eb046549ed7d00394f57ac", "ref_doc_id": "3cb468df-4593-4f8c-a247-bd568346fe36"}, "d72b01c2-5f1d-4dfa-806d-1cd38d715131": {"doc_hash": "d94ec892091581da1b5b4e4deb7904ac5c777186abf6acb3f1eaa416a827e8b7", "ref_doc_id": "b5cf5cbd-25ac-43ed-8c17-fde0be0a1248"}, "8773f87b-70c4-473d-a3ac-760d075ce006": {"doc_hash": "9a9cd1e4396fd35ddc7f7cf07d3187563c84d176b3c1188ef2620a08aeda41c9", "ref_doc_id": "a68f987e-bab1-4b18-8922-b0ee3a2fccc8"}, "782d38ad-deb0-4a21-bedd-0eed6a3e69ee": {"doc_hash": "ad2bbcc002b89a2ab87b50a885bf7f23beb7b17623ed4b217539032411e4feb0", "ref_doc_id": "3545da3a-97b1-4156-82e0-499abe3f989f"}, "a7d0e0a8-9133-44fd-b478-5cc3cc0f169f": {"doc_hash": "d75c3c725e33e22e843bc807fc64ba540eeeae8a481435f2d887ab725d73074b", "ref_doc_id": "2fe53206-f5ce-40f2-9ea9-ddb7c6effcfe"}, "41a77ab5-41bc-41fe-a7e7-862cd2524528": {"doc_hash": "0257bb1faa4359523d1e798724be93c96367330388d22be06da9afe6fc0a17e2", "ref_doc_id": "6f700830-3cc8-47c3-9478-ce95941a5aa4"}, "5c982704-ac17-471f-986b-60d15704fd90": {"doc_hash": "2528f6c5a7528978e41c388917a90ccceb70907b51f3dfdb9df3d60f633026aa", "ref_doc_id": "ac1b1127-55d6-4d4d-93e8-2fc18af77ca2"}, "7cfd9106-9448-43d7-993f-4c833a2b01c6": {"doc_hash": "41bb31639df31f3d55e6b5140c0c0ab15617e6a1cef9bd537777294be3f08c25", "ref_doc_id": "f578ce7c-c145-478e-a5a9-9aeeac0c5170"}, "980b17c8-2489-49ae-b864-c76519823006": {"doc_hash": "5cb60aaa457a452f19cb32cad7798e06003a012845bea97ced3cf07272640efa", "ref_doc_id": "7641c1be-4547-4f93-ad89-1559f198a4e5"}, "4bd04741-9780-43e6-8934-c0e91e07cab1": {"doc_hash": "8a9ca797ba89e321719faf2c673848a9206e0a4724aee1cf193b890337730850", "ref_doc_id": "3309a702-c80e-4231-80b5-2c721aae4b0c"}, "33c6950a-0ab8-41bf-b2e9-aabd46728f91": {"doc_hash": "d61ad1a876d536e5dba4492a558c57b90634fdbffd4a5a5a45315e79829e8e8d", "ref_doc_id": "65d5062c-6de6-4096-9e9b-07703ae8f0d9"}, "412e617a-edc3-4793-9a90-158c357928c7": {"doc_hash": "412aec6b0bc64b3e5e88966f9d150e47bd4ccd852f13ea3dfff65bc6ce7c3f41", "ref_doc_id": "fa29b057-a196-44e1-bfe7-9c3d81b4e1d4"}, "27379631-44c9-4d66-afdb-a3a5e0c9c235": {"doc_hash": "3bda5d4de7a203fbbb535425be63ebeeabd87546a1cfa6db76b919ef007b1975", "ref_doc_id": "e28d8a45-f621-491e-806b-a94ef966c589"}, "b0eea57a-0a30-4e64-ab52-45bf3aaf3242": {"doc_hash": "65e59928564db878cace42d3c2698a7b865572615866260a8fbd976ca8a06548", "ref_doc_id": "db8d30b2-5b96-4e25-8195-fe5912d150dc"}, "5cc30d45-cc3e-433c-891d-4aa0f1eb6a69": {"doc_hash": "3d724b9565c37eb53a1a585ce8497af99db11787829816ae2957f857b066d244", "ref_doc_id": "f081ca32-5cbb-490a-adee-34f3028ec7c7"}, "2bc4df5f-32f1-48f3-8d0d-dcf5f87cc658": {"doc_hash": "f6de7449b269e0af7f118fb775a7ae1e684f1d6b3ef26f081960c32bfc14cb33", "ref_doc_id": "f29801ec-360d-41fc-9b4b-f56d2e9fe896"}, "763d5ab7-3aae-4bf2-b8cf-0a08ce4f2928": {"doc_hash": "79283517dc349596dd2430544471779b5e57652258de4adebb687209155622fc", "ref_doc_id": "db2c7133-6dad-4797-bd45-082adeaf188b"}, "6a23e8f7-020f-456a-bbeb-3afad8a03c69": {"doc_hash": "2d24b94e15c5d216a8aeb2faeb467b4ce3e48323cc49b6f887c9243fbd047bd9", "ref_doc_id": "a7497795-2a37-43ae-b794-f4899c0e47fd"}, "4b3e6958-6da6-4557-a9b4-f62ebde33500": {"doc_hash": "f9f4327bee2835fcbcbea4b00d6bfa7c0e295009040c6dd9e1facea6f78c9df7", "ref_doc_id": "14ec726c-fe7e-4fc0-a897-4684d110ebf9"}, "9485bed8-1e74-49a1-92b6-5c1a48bab12e": {"doc_hash": "10eaa38603977529af4b5462ba49e894d19fd346d332347ceb3101117edf67db", "ref_doc_id": "f5469d10-1454-40ff-ba3f-adce46ca9e22"}, "77f8c0bc-308b-4a84-9dc1-6190d3b549e5": {"doc_hash": "f56bae432d1241b43c235b18e0d91b2a05c8ae9b81e847b7203d5ef60f3d4053", "ref_doc_id": "3334dad8-3af3-4c81-8b00-97d64cbd2612"}, "7e6cd876-e0ce-4a2e-b654-85ad79464994": {"doc_hash": "13f362e602df2c41d29ef07c94058fb3894691eb851b5a6b5f728b51ff42994c", "ref_doc_id": "af4a47fd-2734-44ae-b615-2fb1dc09d12e"}, "69869ac0-4530-473a-a9fc-817a8eb7d3ab": {"doc_hash": "bb22d2dee28a7ee2e6768553979d87b581194520e8a5bb3157bc7bedb4ad8229", "ref_doc_id": "80c65bc8-1996-4d07-8554-7273979a970f"}, "379493ad-c5f6-4904-a3f8-17e55938de36": {"doc_hash": "436a26a517d45bb6ae2902590583e74a67d7ca10abc96863c7d8a295682b362e", "ref_doc_id": "1caa0533-cd48-4531-b983-dd8c174f0b06"}, "02eea05d-ecad-4e3a-97d5-9108e1ddfe27": {"doc_hash": "1a66f95f575da7f0bd7f4a76a6cc378b5857224680d35fd97291e10f0f064e65", "ref_doc_id": "e51fca2f-0e04-47f3-85bf-215116efeaea"}, "08393434-25e6-4d7d-a420-017b8e4e6f3c": {"doc_hash": "c195cb7935cdacee4e076532602b53b26d1ced4a7e0a795f925e9292861b3c89", "ref_doc_id": "90aa792f-0c60-4c61-bcfd-7e2c2b0e791d"}, "2a3cbe39-a3f9-43de-84a6-7a1972d4a036": {"doc_hash": "fb6274b2ef50d8e2b4a38be57072b57fef9e06fd4ba79f8dd1e9087efd0a7dfb", "ref_doc_id": "56fd5320-e23b-4e91-9f45-b2b033f9b12c"}, "9afdec57-68b5-48ac-b702-e1258bfbb881": {"doc_hash": "aea59a503c6eaffde82a60d7f9b466ff3beff2d8805c33f34a328349d3edf044", "ref_doc_id": "b0335f09-1db9-4a17-865f-65912e97017b"}, "51b88adb-7317-4d2e-b855-5dfce388c169": {"doc_hash": "55d3ed1a84da7a948ea7447fa44f9eb9b28599260e816e427e1ffb6f2a92247f", "ref_doc_id": "6861a104-64a5-4300-bcd8-e9193c817d3c"}, "88d458b6-3469-47f6-939c-70b51fdd5d27": {"doc_hash": "0b68c3630302b57c286e65b37e6381be4bb3f247bf42d223c8b9c50bd0e31036", "ref_doc_id": "77bc0a45-c852-44b0-a809-f2225d5046dc"}, "fab3d3ef-733b-4849-8d2f-90db390273d9": {"doc_hash": "f74c1578f22627f43f6e2220b5799863c108c8dff13d4d16464e62e279100cbb", "ref_doc_id": "495b272f-0364-426c-89a2-3fc9e75972d2"}, "a1cb149a-38f5-492c-9d50-4fd392a9b4f4": {"doc_hash": "550d4dc7ddc145e1fef5c1ca428f2be06f3be3334a023eaa134cbfdd84593e60", "ref_doc_id": "8499f1ae-8e87-4da1-a904-eb96b280da0e"}, "54d8a03e-71bc-4d3c-97f9-6032517abb13": {"doc_hash": "b42867cf41f45c2705d3ede6dcb0db4cf34b6d677203b82a41948dd7eca748f8", "ref_doc_id": "6c9ba705-414b-48d9-8dd2-1f998b1bcd1f"}, "9549986c-2149-446a-8acf-1595d72019ce": {"doc_hash": "ba6773b9cb51ffb3c23fc040d44f5a4905d5faca43b7e08d7ae435b68202de57", "ref_doc_id": "b1eabd8a-9f35-4cc1-a79e-bf251822ba96"}, "7eee9c6d-7832-483e-8c6d-fbc4f6eb0b43": {"doc_hash": "2363adc0bb592533bfa4702b93a852a96aa075adfb4b5d97a13d0ac3e417ba25", "ref_doc_id": "09520978-bcb2-4821-88ac-c75c5ae156c5"}, "6151898b-a971-460a-a578-f8f17aef06d0": {"doc_hash": "8d0be5f90612d27077a55c1a45327306f014d2e374c6c6f194546696702b50cf", "ref_doc_id": "3f494070-f51e-4846-becb-5493770c9c93"}, "3c917888-e8ba-4c02-beb8-9b5f5d8cfc4e": {"doc_hash": "4bf89964649d3e82bd21cab12ab3d4b542c9781ffc4f8d42ba98d34f71b26b2c", "ref_doc_id": "1e710377-ed3e-4433-94f6-b87914936025"}, "09ce0f38-5a19-4edb-9815-553f5eff5341": {"doc_hash": "bd7324ab2248f1c9360891a462671958126ebca1136d907ed564d22d25cbe1cc", "ref_doc_id": "ef119e38-5712-4f9f-b8db-34172d462117"}, "74fda538-b38f-4ae8-a8e4-564b2d45d14d": {"doc_hash": "6f9702de01d54ffe3d0fd97ae4975b8020d1c101a614155314e202a90856911e", "ref_doc_id": "586e70af-8bf2-45ff-a3f5-28c88e4cd990"}, "26d7ad24-f630-4098-ba63-7c5df3bfb82a": {"doc_hash": "41f7a6e6026cc06ac51654ca8eae55a4cbef9ef037625721f8f33db5c8fb9034", "ref_doc_id": "fc4bce1e-40a5-40da-bdae-8049037790fe"}, "b50ac332-bb2d-4e7f-8a12-c858f8fc93f7": {"doc_hash": "391171a4d36f4b4dc34d6c69861e37af5cce0faf5e71ad5af25f14c11cc2a295", "ref_doc_id": "b16247c3-2168-49a6-8e58-7e8838911cce"}, "dd36afd0-c4d1-465d-972b-df8d1ea1b842": {"doc_hash": "47480e2bb253b749b0204c4a9e02820b56e771146819b30e539ac917424bae70", "ref_doc_id": "9212bc18-1b51-4ce0-9700-389b5c493306"}, "6f066b6f-7331-436c-8bfa-2a6e304d5e41": {"doc_hash": "a29903e93ff638623e5990751c3322fd5555d9b9e5ab9fc9c5aebdd39317c30c", "ref_doc_id": "5b049656-be0c-428c-ad11-b1ea3bf73e08"}, "dd186929-5021-46b4-aa40-128f31aa0172": {"doc_hash": "236ec8d8a30dd3f8d6da545b0293bbfedf24d01d4bd175cc55d6f48f48290d59", "ref_doc_id": "28ccbe9b-d7aa-4e64-836a-17a03311ff15"}, "a8256f0b-2c14-4c35-b386-ddd20c3c30ad": {"doc_hash": "2e7517a098591833d10478ee049209e60d1a6eed10dd95df111c3b196c2913cd", "ref_doc_id": "ddda7976-eac8-43e9-9911-3b3a00330b26"}, "16b82e09-9c98-461e-a4f0-b8a697b07cee": {"doc_hash": "19a24b0e3e4621bfce349daad150c122db16a7ed7d302df9c05b7051eafbf04a", "ref_doc_id": "21271cfa-28e6-4725-8d1f-f45fef2e5a2c"}, "6a7e42fe-d136-4615-aa5c-a215d6d22e8b": {"doc_hash": "ecb1f444678b7a8cc3c3b8730d9b96086d9aadf8f46998aafddbcae7927170d3", "ref_doc_id": "4c21cbd6-bcf1-44d0-85cf-a411e85c5ebc"}}, "docstore/data": {"accb603c-57d4-430a-957d-66f75ab07d6f": {"__data__": {"id_": "accb603c-57d4-430a-957d-66f75ab07d6f", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6b75c2c1-0d66-4f61-95c2-998ef865a2fd", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "63c84e8b1937b53670c900f05ff59f2224a99c644bc65002709519be7570ed21", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n#include \"../columnDs/column.h\"\r\n#include \"../tableclass/Table.h\"\r\n\r\n\r\n// Getter/Setter Attributes\r\n\r\nvoid column::set_name(string name)\r\n{\r\n\tthis->name = name;\r\n\tint namelen = (int)name.length();\r\n\tmaxLenStr = maxLenStr < namelen ? namelen : maxLenStr;\r\n}\r\n\r\nstring column::type_str() const\r\n{\r\n\treturn Object::type_str(type);\r\n}\r\n\r\nint column::len()\r\n{\r\n\treturn (int)values.size();\r\n}\r\n\r\n////////////////\r\n\r\n// Append Functions\r\n\r\nvoid column::append(Object val)\r\n{\r\n\tDtype tempType = val.type;\r\n\r\n\tif (size == 0) {\r\n\r\n\t\tvalues[size] = val;\r\n\t\ttype = tempType;\r\n\t\tsecType = val.secType;\r\n\t}\r\n\telse {\r\n\r\n\t\tif (this->mixed_type) {\r\n\r\n\t\t\ttype    = std::max(tempType, this->type);\r\n\t\t\tsecType = std::max(val.secType, secType);\r\n\r\n\t\t\tvalues[size] = val;\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\tif (tempType != type && type == Dtype::NA || \r\n\t\t\t\ttempType != type && Object::get_sec_type(tempType) == Dtype::NUMBER) {\r\n\r\n\t\t\t\ttype    = tempType;\r\n\t\t\t\tsecType = val.secType;\r\n\r\n\t\t\t\tvalues[size] = val;\r\n\t\t\t}\r\n\t\t\telse if (type == tempType) {\r\n\t\t\t\tvalues[size] = val;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tcout << \"val: \"\r\n\t\t\t\t\t<< val\r\n\t\t\t\t\t<< \" invalid data type, this column data type is: \"\r\n\t\t\t\t\t<< type\r\n\t\t\t\t\t<< \"\\n in column: \"\r\n\t\t\t\t\t<< name\r\n\t\t\t\t\t<< \"\\n\";\r\n\r\n\t\t\t\tassert(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t++size;\r\n}\r\nvoid column::append(const vector<Object>& vals)\r\n{\r\n\tfor (const Object& val : vals)  append(val);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1398, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4850fa5b-5ebf-497f-b524-e252d64bbc6d": {"__data__": {"id_": "4850fa5b-5ebf-497f-b524-e252d64bbc6d", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5f870049-3cd2-4284-a792-d138f05b3f6a", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d5fb39d10b262ce22296c0967db49ac1f2f5338d98c853002a0d00e1f7ddc01a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::appendPushBack(Object val)\r\n{\r\n\tDtype tempType = val.type;\r\n\r\n\tif (size == 0) {\r\n\t\tvalues.push_back(val);\r\n\t\ttype = tempType;\r\n\t\tsecType = val.secType;\r\n\t}\r\n\telse {\r\n\t\tif (tempType == Dtype::NA) {\r\n\t\t\tvalues.push_back(val);\r\n\t\t}\r\n\t\telse if (mixed_type) {\r\n\t\t\ttype = std::max(tempType, type);\r\n\t\t\tsecType = Object::get_sec_type(type);\r\n\r\n\t\t\tvalues.push_back(val);\r\n\t\t}\r\n\t\telse if (\r\n\t\t\t(tempType != type && type == Dtype::NA) ||\r\n\t\t\t(tempType != type && Object::get_sec_type(tempType) == Dtype::NUMBER)\r\n\t\t\t) {\r\n\r\n\t\t\tvalues.push_back(val);\r\n\r\n\t\t\tif (tempType > type) {\r\n\t\t\t\ttype = tempType;\r\n\t\t\t\tsecType = val.secType;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (tempType == type) {\r\n\t\t\tvalues.push_back(val);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcout << \"val: \" << val << \" invalid data type, this column data type is: \"\r\n\t\t\t\t << type    << \"\\n in column: \" << name << \"\\n\";\r\n\t\t\tassert(false);\r\n\t\t}\r\n\t}\r\n\r\n\t++size;\r\n}\r\nvoid column::appendPushBack(const vector<Object>& vals)\r\n{\r\n\tfor (const Object& val : vals) appendPushBack(val);\r\n}\r\n\r\n////////////////\r\n\r\n// Print Function\r\n\r\nvoid column::printAt(int idx) {\r\n\r\n\tcout << setfill(' ');\r\n\tif (idx == -1) {\r\n\t\tcout << \" \"\r\n\t\t\t<< name\r\n\t\t\t<< setw(maxLenStr - name.length() + 2)\r\n\t\t\t<< \" +\";\r\n\t}\r\n\telse cout << \" \"\r\n\t\t<< ((values[idx].type == Dtype::INT8) ? (int)values[idx].get_val<int8_t>() : values[idx])\r\n\t\t<< setw(maxLenStr - values[idx].len() + 2)\r\n\t\t<< \" |\";\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1414, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "622cbd7b-2231-4102-8303-b9cec34cc2c0": {"__data__": {"id_": "622cbd7b-2231-4102-8303-b9cec34cc2c0", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "17944380-e88f-4346-b2a4-888289b7d250", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "a825fe2bf957a882165fa70264bc0181b923dba4a6e13f98a18c7639da621ecf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::p(int from, int to) {\r\n\r\n\tif (from == -1 && to == -1) { from = 0; to = size; }\r\n\telse if (from != -1 && to == -1) { to = from + 1; }\r\n\r\n\r\n\tvector<Object> index_vec = Tools::gen_seq_obj(from, to);\r\n\r\n\tint newsize = to - from;\r\n\tvector<Object> ranged_value_vec(newsize);\r\n\r\n\tfor (int i = 0; i < newsize; i++)\r\n\t{\r\n\t\tranged_value_vec[i] = values[from++];\r\n\t}\r\n\r\n\tcolumn index_col(\"Index\", index_vec);\r\n\tcolumn ranged_value_col(name, ranged_value_vec);\r\n\r\n\tTable table({ index_col, ranged_value_col });\r\n\ttable.print();\r\n}\r\n\r\nvoid column::print_naidxs() {\r\n\r\n\tcolumn naIndxCol(\"NA Index\", naidxs());\r\n\tTable tabel({ naIndxCol });\r\n\ttabel.print();\r\n}\r\n\r\nvoid column::phead(int limit)\r\n{\r\n\tthis->range(0, limit).p();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 751, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "707b694e-4330-4a20-b417-cb2f9efdd547": {"__data__": {"id_": "707b694e-4330-4a20-b417-cb2f9efdd547", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d4911bc9-1758-47bb-a460-2f8e47a91c7c", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e2bded5869516a3bfeb49888cd989fcebace3deab6a3e9f411c0862dc7e8cf3d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::ptail(int limit)\r\n{\r\n\tthis->range(this->size - limit, this->size).p();\r\n}\r\n\r\n////////////////\r\n\r\n// Get Column Values\r\n\r\ncolumn column::range(int  from, int  to)\r\n{\r\n\tif (from >= to) assert(false && \"Put Valid Range (\\\"to\\\" must be greater than \\\"from\\\".)\");\r\n\r\n\tint newsize = to - from;\r\n\tvector<Object> tempVec(newsize);\r\n\r\n\tfor (int i = 0; i < newsize; i++) {\r\n\t\ttempVec[i] = values[from++];\r\n\t}\r\n\r\n\treturn column(column::name, tempVec);\r\n}\r\n\r\ncolumn column::head(int limit) {\r\n\treturn this->range(0, limit);\r\n}\r\ncolumn column::tail(int limit) {\r\n\treturn this->range(this->size - limit, this->size);\r\n}\r\n\r\n\r\ntemplate<typename Container>\r\ninline column column::get_indexes(\r\n\tconst Container& indexes, typename std::enable_if_t<is_iterable_container<Container>::value>*)\r\n{\r\n\tint new_size = (int)indexes.size();\r\n\r\n\tcolumn new_col = *this;\r\n\tnew_col.size = new_size;\r\n\tnew_col.values = std::move(vector<Object>(new_col.values.begin(), new_col.values.begin() + new_size));\r\n\r\n\tint new_i = 0;\r\n\tfor (const int& in_i : indexes) {\r\n\t\tnew_col.values[new_i++] = values[in_i];\r\n\t}\r\n\r\n\treturn new_col;\r\n}\r\n\r\n\r\ncolumn column::get_indexes(std::initializer_list<int> indexes)\r\n{\r\n\treturn get_indexes(vector<int>(indexes.begin(), indexes.end()));\r\n}\r\n\r\ncolumn column::copy() { return *this; }\r\n\r\n////////////////\r\n\r\n// Handling Missing Data\r\n\r\nset<int> column::naidxs()\r\n{\r\n\tset<int> idxs;\r\n\r\n\tfor (int i = 0; i < size; i++) if (values[i].type == Dtype::NA) idxs.insert(i);\r\n\t\r\n\treturn idxs;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1522, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "28f2db0c-124f-44a9-8750-97a534c19819": {"__data__": {"id_": "28f2db0c-124f-44a9-8750-97a534c19819", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cf0f1d2d-94de-4c9a-9bbd-5fb82da4da73", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "09f249f25a7d8e94cebb31ffd7cba62642456f86c3099d6a348d314444d3e550", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nreturn idxs;\r\n}\r\nset<int> column::not_naidxs()\r\n{\r\n\tset<int> idxs;\r\n\r\n\tfor (int i = 0; i < size; i++) if (values[i].type != Dtype::NA) idxs.insert(i);\r\n\r\n\treturn idxs;\r\n}\r\n\r\ncolumn column::fillna(Object val, bool inplace)\r\n{\r\n\tassert(val.type != Dtype::NA && \"Value must not be NA too!\");\r\n\r\n\ttype = type == Dtype::NA ? val.type : type;\r\n\r\n\tif (!mixed_type) {\r\n\t\tassert(val.type == type && \"must value be same type.\");\r\n\t}\r\n\r\n\tset<int> currnaindxs = naidxs();\r\n\r\n\tif (inplace) {\r\n\r\n\t\tfor (const int& idx : currnaindxs) {\r\n\t\t\tvalues[idx] = val;\r\n\t\t}\r\n\t\treturn column();\r\n\t}\r\n\tvector<Object> new_values = values;\r\n\r\n\tfor (const int& idx : currnaindxs) {\r\n\t\tnew_values[idx] = val;\r\n\t}\r\n\treturn column(name, std::move(new_values));\r\n}\r\ncolumn column::fillna(bool inplace)\r\n{\r\n\tObject val = secType == Dtype::NUMBER ? Object(mean()) : mode();\r\n\r\n\treturn fillna(val, inplace);\r\n}\r\n\r\n////////////////\r\n\r\n// Statistical Operations", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 947, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af249ad6-8d40-41b4-a12c-b40f09830cf8": {"__data__": {"id_": "af249ad6-8d40-41b4-a12c-b40f09830cf8", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fb8dc5a4-b61d-4ba4-8182-602d3b7e090c", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b3f0f9e013e0d54b8403ea5beed6551f67200d8f468f720146dcce1dba8363a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ndouble column::min()\r\n{\r\n\tassert(Object::get_sec_type(type) == Dtype::NUMBER && \"Type Must be number to get min\");\r\n\r\n\r\n\tdouble min_val = values[0].value_num();\r\n\r\n#pragma omp parallel for reduction(min:min_val)\r\n\tfor (int i = 1; i < size; ++i) {\r\n\r\n\t\tif (values[i].type == Dtype::NA) continue;\r\n\r\n\t\tauto temp = values[i].value_num();\r\n\t\tif (temp < min_val) {\r\n\t\t\tmin_val = temp;\r\n\t\t}\r\n\t}\r\n\r\n\treturn min_val;\r\n}\r\ndouble column::max()\r\n{\r\n\r\n\tassert(Object::get_sec_type(type) == Dtype::NUMBER && \"Type Must be number to get max\");\r\n\r\n\tdouble max_val = values[0].value_num();\r\n\r\n#pragma omp parallel for reduction(max:max_val)\r\n\tfor (int i = 1; i < size; ++i) {\r\n\r\n\t\tif (values[i].type == Dtype::NA) continue;\r\n\r\n\t\tauto temp = values[i].value_num();\r\n\t\tif (temp > max_val) {\r\n\t\t\tmax_val = temp;\r\n\t\t}\r\n\t}\r\n\r\n\treturn max_val;\r\n}\r\n\r\ndouble column::sum ()\r\n{\r\n\tdouble sumValue = 0;\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (values[i].secType == Dtype::NUMBER) {\r\n\t\t\tsumValue += values[i].value_num();\r\n\t\t}\r\n\t}\r\n\r\n\treturn sumValue;\r\n}\r\ndouble column::mean()\r\n{\r\n\tassert(secType == Dtype::NUMBER && \"Type Must be number to get mean\");\r\n\treturn this->sum() / values.size();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1194, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4d0723b0-c678-47e4-9ae0-46dadf162840": {"__data__": {"id_": "4d0723b0-c678-47e4-9ae0-46dadf162840", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "84804a87-a5ef-4bbe-8c9a-02c6de28922d", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "51db357e58b0235bdf0c804073564859bcc9338f16dfe5020723d634c1683082", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ndouble column::std  (bool haveMean, double meanValue)\r\n\r\n{\r\n\tassert(secType == Dtype::NUMBER && \"Type Must be number to get std\");\r\n\r\n\tdouble meanv = haveMean ? meanValue : mean();\r\n\tdouble sum = 0.0;\r\n\r\n\tfor (Object value : values) {\r\n\t\tif (value.type == Dtype::NA) continue;\r\n\r\n\t\tsum += std::pow((value - meanv).value_num(), 2);\r\n\t}\r\n\r\n\treturn std::pow(sum / values.size(), .5);\r\n}\r\ndouble column::std_2(bool haveMean, double meanValue)\r\n{\r\n\tassert(secType == Dtype::NUMBER && \"Type Must be number to get std\");\r\n\r\n\tdouble meanv = haveMean ? meanValue : mean();\r\n\tdouble sum = 0.0;\r\n\r\n#pragma omp parallel for reduction(+:sum)\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (values[i].secType == Dtype::NUMBER) {\r\n\t\t\tsum += std::pow(values[i].value_num() - meanv, 2);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn std::pow(sum / size, .5);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 841, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7517649a-3515-4470-8459-37ad1e34250b": {"__data__": {"id_": "7517649a-3515-4470-8459-37ad1e34250b", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bc41a12c-3714-4b97-9d00-7bb0ff8af8f5", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "1b61ea8c36b356e12f93b7248e44bbfd22188809a27ed9eac426c43aa601a15c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ndouble column::median(bool sorted, vector<double> optionalValues)\r\n{\r\n\tassert(secType == Dtype::NUMBER && \"Type Must be number to get median\");\r\n\r\n\tint const newSize = (int)(values.size() - naidxs().size());\r\n\r\n\tvector < double > tempvs(newSize);\r\n\r\n\r\n\tif (sorted == 0) {\r\n\t\tint idx = 0;\r\n\r\n\t\tfor (int i = 0; i < size; i++)\r\n\t\t{\r\n\t\t\tif (values[i].secType == Dtype::NUMBER) {\r\n\t\t\t\ttempvs[idx++] = values[i].value_num();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstd::sort(tempvs.begin(), tempvs.end());\r\n\t}\r\n\telse {\r\n\t\ttempvs = optionalValues;\r\n\t}\r\n\r\n\r\n\tif (newSize % 2 == 0) {\r\n\t\treturn (tempvs[newSize / 2 - 1] + tempvs[newSize / 2]) / 2;\r\n\t}\r\n\telse {\r\n\t\treturn tempvs[newSize / 2];\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\nObject column::mode  (bool with_valu_count, unordered_map<Object, int> value_counts_)\r\n{\r\n\r\n\tif (!with_valu_count) {\r\n\t\tvalue_counts_ = value_count();\r\n\t}\r\n\tunordered_map<Object, int> curr_value_count = value_counts_;\r\n\r\n\tObject maxval = curr_value_count.begin()->first;\r\n\tint maxvalnumber = curr_value_count[maxval];\r\n\r\n\tfor (pair<Object, int> val : curr_value_count) {\r\n\r\n\t\tif (val.first.type == Dtype::NA) continue;\r\n\t\tif (val.second > maxvalnumber) {\r\n\r\n\t\t\tmaxvalnumber = val.second;\r\n\t\t\tmaxval = val.first;\r\n\t\t}\r\n\t}\r\n\r\n\treturn maxval;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1247, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0216f8b8-7632-409b-8544-18f7596f40ed": {"__data__": {"id_": "0216f8b8-7632-409b-8544-18f7596f40ed", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "30bfa035-6d72-402c-815e-291881214e1b", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b1651e9a815a7bcaa82d8a98f8f09534b15eec8aaa87dfb8f1d9936f4b91e9d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ndouble column::corr(column& other,\r\n\tbool with_means, double mean_x, double mean_y,\r\n\tbool with_stds, double std_x, double std_y)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\tCHECK_NUMBER_METHOUDS(other);\r\n\r\n\tsize_t n = size;\r\n\r\n\tif (with_means == false) {\r\n\r\n#pragma omp parallel for reduction(+:mean_x, mean_y)\r\n\t\tfor (int i = 0; i < n; i++)\r\n\t\t{\r\n\t\t\tif (values[i].type != Dtype::NA && other[i].type != Dtype::NA) {\r\n\t\t\t\tmean_x += values[i].value_num();\r\n\t\t\t\tmean_y += other[i].value_num();\r\n\t\t\t}\r\n\t\t}\r\n\t\tmean_x /= n;\r\n\t\tmean_y /= n;\r\n\t}\r\n\r\n\r\n\tdouble numerator = 0.0;\r\n#pragma omp parallel for reduction(+:numerator)\r\n\tfor (int i = 0; i < n; ++i) {\r\n\r\n\t\tif (values[i].secType == Dtype::NUMBER && other[i].secType == Dtype::NUMBER) {\r\n\t\t\tnumerator += (values[i].value_num() - mean_x) * (other[i].value_num() - mean_y);\r\n\t\t}\r\n\t}\r\n\r\n\tif (with_stds == false) {\r\n\r\n\t\tdouble std_x_sum = 0.0;\r\n\t\tdouble std_y_sum = 0.0;\r\n\r\n#pragma omp parallel for reduction(+:std_x_sum, std_y_sum)\r\n\t\tfor (int i = 0; i < size; i++)\r\n\t\t{\r\n\t\t\tif (values[i].secType == Dtype::NUMBER && other[i].secType == Dtype::NUMBER) {\r\n\r\n\t\t\t\tdouble temp = values[i].value_num() - mean_x;\r\n\t\t\t\tstd_x_sum += temp * temp;\r\n\r\n\t\t\t\ttemp = other[i].value_num() - mean_y;\r\n\t\t\t\tstd_y_sum += temp * temp;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstd_x = std::sqrt(std_x_sum / n);\r\n\t\tstd_y = std::sqrt(std_y_sum / n);\r\n\t}\r\n\r\n\tdouble correlation = numerator / (n * std_x * std_y);\r\n\r\n\treturn correlation;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1455, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1211d0b-1f22-45f1-8b52-1b208597b5b9": {"__data__": {"id_": "f1211d0b-1f22-45f1-8b52-1b208597b5b9", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6d1b9bd2-e429-434e-9283-7c3523e4dab8", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e03c7dacbe0a732f9beaa41fcd1e6df51bf8dfce0b2d3cd93b8586112169c67b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ndouble column::quantile  (float q, bool withInSortedVec,  vector < double> sortedValuesIn)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\tvector<double> sortedValus;\r\n\r\n\tif (withInSortedVec) {\r\n\t\tsortedValus = sortedValuesIn;\r\n\t}\r\n\telse {\r\n\t\tint const newSize = (int)(values.size() - naidxs().size());\r\n\r\n\t\tvector < double > tempvs(newSize);\r\n\r\n\t\tint idx = 0;\r\n\r\n\t\tfor (Object val : values) {\r\n\t\t\tif (val.type == Dtype::NA) continue;\r\n\t\t\ttempvs[idx++] = val.value_num();\r\n\t\t}\r\n\r\n\t\tsortedValus = tempvs;\r\n\t\tstd::sort(sortedValus.begin(), sortedValus.end());\r\n\t}\r\n\tdouble index = q * (sortedValus.size() - 1);\r\n\r\n\tdouble percentile;\r\n\r\n\tif (index == (int)index) {\r\n\t\tpercentile = sortedValus[(int)index];\r\n\t}\r\n\r\n\telse {\r\n\t\tint lower_index = (int)index;\r\n\t\tint upper_index = lower_index + 1;\r\n\r\n\t\tdouble lower_value = sortedValus[lower_index];\r\n\t\tdouble upper_value = sortedValus[upper_index];\r\n\r\n\t\tpercentile = (lower_value + upper_value) / 2;\r\n\t}\r\n\treturn percentile;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 988, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3cd40cb2-2fc6-4e58-b2ba-80399a8542b9": {"__data__": {"id_": "3cd40cb2-2fc6-4e58-b2ba-80399a8542b9", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fdd0a366-46e3-4109-a516-c12a161f6918", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "92fbff7e6966d61ed81743ec21c8344a104a01703e4755dc70761fccf59137ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ndouble column::quantile_2(float q, vector < double>& sortedValuesIn, bool withInSortedVec)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\tvector<double> sortedValus;\r\n\r\n\tif (withInSortedVec) {\r\n\t\tsortedValus = sortedValuesIn;\r\n\t}\r\n\telse {\r\n\t\tint const newSize = (int)(values.size() - naidxs().size());\r\n\r\n\t\tvector < double > tempvs(newSize);\r\n\r\n\t\tint idx = 0;\r\n\r\n\t\tfor (Object val : values) {\r\n\t\t\tif (val.type == Dtype::NA) continue;\r\n\t\t\ttempvs[idx++] = val.value_num();\r\n\t\t}\r\n\r\n\t\tsortedValus = tempvs;\r\n\t\tstd::sort(sortedValus.begin(), sortedValus.end());\r\n\t}\r\n\tdouble index = q * (sortedValus.size() - 1);\r\n\r\n\tdouble percentile;\r\n\r\n\tif (index == (int)index) {\r\n\t\tpercentile = sortedValus[(int)index];\r\n\t}\r\n\r\n\telse {\r\n\t\tint lower_index = (int)index;\r\n\t\tint upper_index = lower_index + 1;\r\n\r\n\t\tdouble lower_value = sortedValus[lower_index];\r\n\t\tdouble upper_value = sortedValus[upper_index];\r\n\r\n\t\tpercentile = (lower_value + upper_value) / 2;\r\n\t}\r\n\treturn percentile;\r\n}\r\n\r\n\r\ncolumn column::rolling(int window, StatFun func)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\tcolumn new_col;\r\n\tnew_col.set_name(name + \" Rolling_\" + statfun_str.at(func));\r\n\tnew_col.size = size;\r\n\tnew_col.values = vector<Object>();\r\n\tnew_col.values.reserve(size);\r\n\tnew_col.type = std::max(Dtype::FLOAT, type);\r\n\tnew_col.secType = Dtype::NUMBER;\r\n\r\n\tfor (size_t e = 0; e < (window - 1); e++) {\r\n\t\tnew_col.values.emplace_back(Object());\r\n\t}\r\n\r\n\tsize_t end_idx = (size_t)(size - window);\r\n\r\n\tint gen_i = window - 1;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1504, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42d8ff52-9ab6-462f-9502-d6b2e12e780a": {"__data__": {"id_": "42d8ff52-9ab6-462f-9502-d6b2e12e780a", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9f3a89ae-63f3-489f-8bb0-4980ddb577b4", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "58c66e7728c67313576b9663efb9463b6b1de0aa220a5258aa9e9509fd61d661", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n}\r\n\r\n\tsize_t end_idx = (size_t)(size - window);\r\n\r\n\tint gen_i = window - 1;\r\n\tvector<Object> temp_vec = values;\r\n\tfor (size_t i = 0; i < end_idx; i++)\r\n\t{\r\n\t\tswitch (func)\r\n\t\t{\r\n\t\tcase MEAN:\r\n\t\t\tnew_col.values.emplace_back(column::mean(temp_vec, i, i + window));\r\n\t\t\tbreak;\r\n\t\tcase MEDIAN:\r\n\t\t\tnew_col.values.emplace_back(column::median(temp_vec, i, i + window));\r\n\r\n\t\t\tbreak;\r\n\t\tcase STD:\r\n\t\t\tnew_col.values.emplace_back(column::std(temp_vec, i, i + window));\r\n\r\n\t\t\tbreak;\r\n\t\tcase MODE:\r\n\t\t\tnew_col.values.emplace_back(column::mode(temp_vec, i, i + window));\r\n\r\n\t\t\tbreak;\r\n\t\tcase SUM:\r\n\t\t\tnew_col.values.emplace_back(column::sum(temp_vec, i, i + window));\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn new_col;\r\n}\r\n\r\ncolumn column::for_each_interval(int interval_size, StatFun func)\r\n{\r\n\r\n\tint new_size = std::ceil(size / (double)interval_size);\r\n\r\n\tcolumn new_col;\r\n\tnew_col.set_name(name + \" - fei \" + statfun_str.at(func));\r\n\tnew_col.size = new_size;\r\n\tnew_col.values = vector<Object>();\r\n\tnew_col.values.reserve(new_size);\r\n\tnew_col.type = std::max(Dtype::FLOAT, type);\r\n\tnew_col.secType = Dtype::NUMBER;\r\n\r\n\tint gen_i = 0;\r\n\tvector<Object> temp_vec = values;\r\n\tint temp_end;\r\n\tfor (int i = 0; i < size; i += interval_size)\r\n\t{\r\n\t\ttemp_end = i + interval_size > size ? size : i + interval_size;\r\n\r\n\t\tswitch (func)\r\n\t\t{\r\n\t\tcase MEAN:\r\n\t\t\tnew_col.values.emplace_back(column::mean(temp_vec, i, temp_end));\r\n\t\t\tbreak;\r\n\t\tcase MEDIAN:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1469, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e435e1d7-4426-43ac-9ff5-ef7dd205a2a3": {"__data__": {"id_": "e435e1d7-4426-43ac-9ff5-ef7dd205a2a3", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b50279fe-23f8-4f9f-8f75-98a47016a0de", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "57977a9da3aae8e33f261be52548b066c53429f897050847aacfae25fa2dc263", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nnew_col.values.emplace_back(column::mean(temp_vec, i, temp_end));\r\n\t\t\tbreak;\r\n\t\tcase MEDIAN:\r\n\t\t\tnew_col.values.emplace_back(column::median(temp_vec, i, temp_end));\r\n\r\n\t\t\tbreak;\r\n\t\tcase STD:\r\n\t\t\tnew_col.values.emplace_back(column::std(temp_vec, i, temp_end));\r\n\r\n\t\t\tbreak;\r\n\t\tcase MODE:\r\n\t\t\tnew_col.values.emplace_back(column::mode(temp_vec, i, temp_end));\r\n\r\n\t\t\tbreak;\r\n\t\tcase SUM:\r\n\t\t\tnew_col.values.emplace_back(column::sum(temp_vec, i, temp_end));\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn new_col;\r\n}\r\n\r\ncolumn column::diff(int periods, string change_func)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\t/*\r\n\t\tchange_func: can be\r\n\t\t\t1- \"normal\" -> get normal diff between the periods.\r\n\t\t\t2- \"pct\"\t-> get the percentage of difference.\r\n\t*/\r\n\r\n\tcolumn new_col;\r\n\tnew_col.set_name(name + \" - \" + change_func + \" diff\");\r\n\tnew_col.size = size;\r\n\tnew_col.values = vector<Object>();\r\n\tnew_col.values.reserve(size);\r\n\tnew_col.type = std::max(Dtype::FLOAT, type);\r\n\tnew_col.secType = Dtype::NUMBER;\r\n\r\n\r\n\tfor (size_t e = 0; e < (periods); e++) {\r\n\t\tnew_col.values.emplace_back(Object());\r\n\t}\r\n\r\n\tdouble temp_res{};\r\n\tdouble temp_val_new, temp_val_old;\r\n\r\n\tfor (size_t i = periods; i < size; ++i)\r\n\t{\r\n\t\tif (values[i].secType != Dtype::NUMBER ||\r\n\t\t\tvalues[i - periods].secType != Dtype::NUMBER) {\r\n\r\n\t\t\tnew_col.values.emplace_back(Object());\r\n\t\t\tcontinue;\r\n\t\t};\r\n\r\n\t\ttemp_val_new = values[i].value_num();\r\n\t\ttemp_val_old = values[i - periods].value_num();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1485, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ebc90c3-7e0e-4c97-86b8-0045b805e31e": {"__data__": {"id_": "5ebc90c3-7e0e-4c97-86b8-0045b805e31e", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "199c534c-487a-4222-bd21-b7ac05a2e3f5", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "dc95a4ce0ac315c92e523a4c5bfd7be08ffb672bbfbda4aa2ead435bf890c07c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ntemp_val_new = values[i].value_num();\r\n\t\ttemp_val_old = values[i - periods].value_num();\r\n\r\n\t\tif (change_func == \"normal\") {\r\n\t\t\ttemp_res = temp_val_new - temp_val_old;\r\n\t\t}\r\n\t\telse if (change_func == \"pct\") {\r\n\t\t\tif (temp_val_old == 0) {\r\n\t\t\t\tif (temp_val_new > 0)\r\n\t\t\t\t\ttemp_res = 1.0;\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemp_res = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttemp_res = (temp_val_new - temp_val_old) / (temp_val_old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnew_col.values.emplace_back(Object(temp_res));\r\n\t}\r\n\r\n\treturn new_col;\r\n}\r\n\r\n////////////////\r\n\r\n// Outliers Detection\r\n\r\ncolumn column::remove_outliers(double m, bool inplace)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\tdouble mean_ = mean();\r\n\tdouble std_dev = std_2(true, mean_);\r\n\tdouble threshold = m * std_dev;\r\n\r\n\tif (inplace) {\r\n\r\n\t\tvalues.erase(std::remove_if(\r\n\t\t\tstd::execution::par,\r\n\t\t\tvalues.begin(), values.end(),\r\n\t\t\t[&mean_, &threshold](Object& val) {\r\n\t\t\t\treturn val.type != Dtype::NA && std::abs((val.value_num() - mean_)) > threshold;\r\n\t\t\t}),\r\n\t\t\tvalues.end());\r\n\r\n\t\tthis->size = (int)values.size();\r\n\t\treturn column();\r\n\t}\r\n\r\n\tvector<Object> new_values;\r\n\tnew_values.reserve(values.size());\r\n\tnew_values = values;\r\n\r\n\tnew_values.erase(\r\n\t\tstd::remove_if(\r\n\t\t\tstd::execution::par,\r\n\t\t\tnew_values.begin(), new_values.end(),\r\n\t\t\t[&mean_, &threshold](Object& val) {\r\n\t\t\t\treturn val.type != Dtype::NA && std::abs((val.value_num() - mean_)) > threshold;\r\n\t\t\t}),\r\n\t\tnew_values.end());\r\n\r\n\treturn column(name, new_values);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1486, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1194b624-3751-4099-bda5-e0abed999143": {"__data__": {"id_": "1194b624-3751-4099-bda5-e0abed999143", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3deb2676-5a68-4df2-b1eb-5c8509435275", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "482c5212e5b843c83a7da8c2bcd0765023d0a8fd11ba223456b8e06966fa947e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n}),\r\n\t\tnew_values.end());\r\n\r\n\treturn column(name, new_values);\r\n}\r\n\r\nset<int>& column::remove_get_outliers_idxs(double m)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\tdouble mean_ = mean();\r\n\tdouble std_dev = std_2(true, mean_);\r\n\r\n\tvector<int> removed_idxs;\r\n\tremoved_idxs.reserve(size);\r\n\r\n\tvector<Object> new_values;\r\n\tnew_values.reserve(size);\r\n\r\n\tdouble threshold = m * std_dev;\r\n\r\n\tfor (size_t i = 0; i < size; i++)\r\n\t{\r\n\t\tif (values[i].type == Dtype::NA) continue;\r\n\r\n\t\tif (std::abs((values[i].value_num() - mean_)) > threshold) {\r\n\t\t\tremoved_idxs.emplace_back(i);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnew_values.emplace_back(std::move(values[i]));\r\n\t\t}\r\n\t}\r\n\r\n\tvalues = std::move(new_values);\r\n\tthis->size = (int)values.size();\r\n\r\n\tset<int> final_removed_idxs(removed_idxs.begin(), removed_idxs.end());\r\n\treturn final_removed_idxs;\r\n}\r\n\r\nset<int> column::get_outliers_idxs(double m)\r\n{\r\n\tCHECK_NUMBER_METHOUDS((*this));\r\n\r\n\tdouble mean_ = mean();\r\n\tdouble std_dev = std_2(true, mean_);\r\n\r\n\tvector<int> removed_idxs;\r\n\tremoved_idxs.reserve(size);\r\n\r\n\tdouble threshold = m * std_dev;\r\n\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (values[i].type == Dtype::NA) continue;\r\n\t\tif (std::abs((values[i].value_num() - mean_)) > threshold) {\r\n\t\t\tremoved_idxs.push_back(i);\r\n\t\t}\r\n\t}\r\n\r\n\tset<int> final_removed_idxs;\r\n\tfor (int& idx : removed_idxs) final_removed_idxs.insert(idx);\r\n\r\n\treturn final_removed_idxs;\r\n}\r\n\r\n////////////////\r\n\r\n// String Operations\r\n\r\ncolumn column::to_lw()\r\n{\r\n\tSTRING_FUNCTION((*this), lw);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1520, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "603070a7-76e3-48dc-834a-0920ebdd9b05": {"__data__": {"id_": "603070a7-76e3-48dc-834a-0920ebdd9b05", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9fac8d03-dbc3-4de1-8014-680bddfbac48", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "fccd844d11ea794c94a39c6c1ad86f1bcdc222b4cb47538fa8c9e37bca41d60a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n// String Operations\r\n\r\ncolumn column::to_lw()\r\n{\r\n\tSTRING_FUNCTION((*this), lw);\r\n}\r\ncolumn column::to_up()\r\n{\r\n\tSTRING_FUNCTION((*this), up);\r\n}\r\ncolumn column::to_title()\r\n{\r\n\tSTRING_FUNCTION((*this), title);\r\n}\r\ncolumn column::strip()\r\n{\r\n\tSTRING_FUNCTION((*this), strip);\r\n}\r\n\r\nset<int> column::contains(string target)\r\n{\r\n\tCHECK_STRING_METHOUDS((*this));\r\n\r\n\tset<int> idxs;\r\n\tfor (int i = 0; i < size; i++) \r\n\t\tif (values[i].contains(target)) idxs.insert(i);\r\n\t\r\n\treturn idxs;\r\n}\r\n\r\ncolumn column::str_extract_pattern(const string& pattern)\r\n{\r\n\tCHECK_STRING_METHOUDS((*this));\r\n\r\n\tcolumn new_column = *this;\r\n\tnew_column.values = String::extract_pattern(new_column.values, pattern);\r\n\treturn new_column;\r\n}\r\n\r\n////////////////\r\n\r\n// Conversion\r\n\r\ncolumn column::to_num(bool inplace)\r\n{\r\n\tif (inplace) {\r\n\t\tif (this->secType == Dtype::NUMBER) return column();\r\n\r\n\t\tthis->type = Dtype::DOUBLE;\r\n\t\tthis->secType = Dtype::NUMBER;\r\n\r\n\t\tfor (auto& val : values) {\r\n\t\t\tval = val.to_type(Dtype::DOUBLE);\r\n\t\t}\r\n\t}\r\n\telse if (this->secType == Dtype::NUMBER) return *this;\r\n\telse {\t\t\r\n\t\tcolumn new_col = *this;\r\n\t\tnew_col.secType = Dtype::NUMBER;\r\n\t\tnew_col.type = Dtype::DOUBLE;\r\n\r\n\t\tfor (auto& val : new_col.values) {\r\n\t\t\tval = val.to_type(Dtype::DOUBLE);\r\n\t\t}\r\n\t\treturn new_col;\r\n\t}\r\n\r\n\treturn column();\r\n}\r\n\r\ncolumn column::to_str(bool inplace)\r\n{\r\n\t\r\n\r\n\tif (inplace) {\r\n\t\tif (type == Dtype::STRING) return column();\r\n\r\n\t\tthis->type = Dtype::STRING;\r\n\t\tthis->secType = Dtype::STRING;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90a39c66-82ef-4a1d-a9e7-4708c296d2ed": {"__data__": {"id_": "90a39c66-82ef-4a1d-a9e7-4708c296d2ed", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "616a031e-90cd-46ce-a6ab-2ba89c64e5f8", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4ec8cab0bc2556bca2de410ec86deaaff2a7855a788abeeb2104c5e08e806d38", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nthis->type = Dtype::STRING;\r\n\t\tthis->secType = Dtype::STRING;\r\n\r\n\t\tfor (auto& val : values) {\r\n\r\n\t\t\tval = val.to_type(Dtype::STRING);\r\n\t\t}\r\n\t}\r\n\telse if (this->type == Dtype::STRING) return *this;\r\n\r\n\telse {\r\n\r\n\t\tcolumn new_col = *this;\r\n\t\tnew_col.type = Dtype::STRING;\r\n\r\n\t\tfor (auto& val : new_col.values) {\r\n\r\n\t\t\tval = val.to_type(Dtype::STRING);\r\n\t\t}\r\n\t\treturn new_col;\r\n\t}\r\n\r\n\treturn column();\r\n}\r\n\r\ncolumn column::to_date(bool inplace, DateFormat dateformat)\r\n{\r\n\tif (this->type != Dtype::STRING) {\r\n\t\tassert(false && \"Error from to_date(), we Can Convert only Strings to Date.\");\r\n\t}\r\n\r\n\tif (inplace) {\r\n\t\tif (this->type == Dtype::DATE) return column();\r\n\r\n\t\ttype = Dtype::DATE;\r\n\t\tsecType = Dtype::DATE;\r\n\r\n\t\tfor (auto& val : values) {\r\n\r\n\t\t\tval = val.to_type(Dtype::DATE, dateformat);\r\n\t\t}\r\n\t}\r\n\telse if (this->type == Dtype::DATE) return *this;\r\n\telse {\r\n\t\tcolumn new_col = *this;\r\n\t\tnew_col.type = Dtype::DATE;\r\n\t\tnew_col.secType = Dtype::DATE;\r\n\r\n\t\tfor (auto& val : new_col.values) {\r\n\t\t\tval = val.to_type(Dtype::DATE, dateformat);\r\n\t\t}\r\n\t\treturn new_col;\r\n\t}\r\n\r\n\treturn column();\r\n}\r\n\r\ncolumn column::to_date_attr (bool inplace, Dtype date_attr_type)\r\n{\r\n\tif (type == date_attr_type) return *this;\r\n\t\r\n\tif (!(type == Dtype::DATE || secType == Dtype::DATE_ATTR || secType == Dtype::NUMBER)) {\r\n\t\tcout << \"can get year from this column because this column type is '\" << type << \"' \\n\";\r\n\t\tassert(false);\r\n\t}\r\n\r\n\tstring new_name = name + \" - \" +", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1480, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7bd39aa3-59c5-4cd5-baad-6c67919d455d": {"__data__": {"id_": "7bd39aa3-59c5-4cd5-baad-6c67919d455d", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "769584eb-c0e4-4a74-b751-80c83d80a0fa", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2794c2d464e92699c5d1b6e801e559352d1e108624e30c8304cd731b5a34131a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nassert(false);\r\n\t}\r\n\r\n\tstring new_name = name + \" - \" +\r\n\t\t\t(date_attr_type == Dtype::DATE_YEAR  ? \"year\" :\r\n\t\t\t date_attr_type == Dtype::DATE_MONTH ? \"month\" :\r\n\t\t\t date_attr_type == Dtype::DATE_DAY   ? \"day\" : \"\");\r\n\r\n\tif (inplace) {\r\n\t\ttype = date_attr_type;\r\n\t\tsecType = Dtype::DATE_ATTR;\r\n\t\tname = new_name;\r\n\r\n\t\tfor (Object& val : values) {\r\n\t\t\tval = val.to_type(date_attr_type);\r\n\t\t}\r\n\r\n\t\treturn column();\r\n\t}\r\n\r\n\tcolumn new_col;\r\n\tnew_col.name = new_name;\r\n\tnew_col.type = date_attr_type;\r\n\tnew_col.secType = Dtype::DATE_ATTR;\r\n\tnew_col.size = size;\r\n\tnew_col.values = values;\r\n\r\n\tfor (Object& val : new_col.values) {\r\n\t\tval = val.to_type(date_attr_type);\r\n\t}\r\n\r\n\treturn new_col;\r\n}\r\ncolumn column::to_date_year (bool inplace)\r\n{\r\n\treturn to_date_attr(inplace, Dtype::DATE_YEAR);\r\n}\r\ncolumn column::to_date_month(bool inplace)\r\n{\r\n\treturn to_date_attr(inplace, Dtype::DATE_MONTH);\r\n}\r\ncolumn column::to_date_day  (bool inplace)\r\n{\r\n\treturn to_date_attr(inplace, Dtype::DATE_DAY);\r\n}\r\n\r\ncolumn column::to_type(Dtype new_type, bool inplace)\r\n{\r\n\tif (inplace) {\r\n\t\tthis->type = new_type;\r\n\t\tthis->secType = Object::get_sec_type(this->type);\r\n\t\tObject::to_type(this->values, new_type);\r\n\t}\r\n\telse {\r\n\t\tcolumn new_col = *this;\r\n\t\tnew_col.type = new_type;\r\n\t\tnew_col.secType = Object::get_sec_type(this->type);\r\n\t\tObject::to_type(new_col.values, new_type);\r\n\t\treturn new_col;\r\n\t}\r\n\treturn NULL;\r\n}\r\n\r\nset<Object> column::to_set()\r\n{\r\n\treturn set<Object>(values.begin(), values.end());\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a6a3d42b-1eb4-4d19-b4e8-9f60afec655d": {"__data__": {"id_": "a6a3d42b-1eb4-4d19-b4e8-9f60afec655d", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "722ca348-7e3e-4b08-b8b5-5aacae00e539", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f79a7e039ad3f2fc956ed14b2490966ea18bbeb6ec343e5828f35816cbc875ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n}\r\n\r\nset<Object> column::to_set()\r\n{\r\n\treturn set<Object>(values.begin(), values.end());\r\n}\r\n\r\nunordered_set<Object> column::to_uset()\r\n{\r\n\treturn unordered_set<Object>(values.begin(), values.end());\r\n}\r\n\r\n////////////////\r\n\r\n// Info About Column's Data\r\n\r\nunordered_map<string, Object> column::describe()\r\n{\r\n\tunordered_map<string, Object> res;\r\n\r\n\tvector<string> statistics = {\r\n\t\t\"mean\", \"std\", \"median\",\r\n\t\t\"min\", \"max\",\r\n\t\t\"25%\", \"50%\",\"75%\",\r\n\t\t\"unique\", \"top\", \"freq\"\r\n\t};\r\n\r\n\tfor (string stat : statistics) {\r\n\t\tres[stat] = Object();\r\n\t}\r\n\r\n\tif (Object::get_sec_type(type) == Dtype::NUMBER) {\r\n\r\n\t\tdouble minval = 999999999;\r\n\t\tdouble maxval = -999999999;\r\n\r\n\t\tdouble values_sum = 0;\r\n\r\n#pragma omp parallel for reduction(+:values_sum) reduction(min:minval) reduction(max:maxval) num_threads (8)\r\n\r\n\t\tfor (int i = 0; i < size; ++i) {\r\n\r\n\t\t\tif (values[i].secType == Dtype::NUMBER) {\r\n\r\n\t\t\t\tdouble temp = values[i].value_num();\r\n\t\t\t\tvalues_sum += temp;\r\n\r\n\t\t\t\tif (temp < minval) {\r\n\t\t\t\t\tminval = temp;\r\n\t\t\t\t}\r\n\t\t\t\tif (temp > maxval) {\r\n\t\t\t\t\tmaxval = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdouble const meanRes = values_sum / size;\r\n\r\n\t\tres[\"mean\"] = Object(meanRes);\r\n\t\tres[\"std\"] = Object(std_2(true, meanRes));\r\n\t\tres[\"min\"] = Object(minval);\r\n\t\tres[\"max\"] = Object(maxval);\r\n\r\n\t\tint const newSize = (int)values.size() - na_count();\r\n\r\n\t\tvector < double > tempvs(newSize);\r\n\t\tint idx = 0;\r\n\t\tfor (int i = 0; i < size; i++)\r\n\t\t{\r\n\t\t\tif (values[i].secType == Dtype::NUMBER) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "db8e4852-1413-429d-a8e3-e601643f3535": {"__data__": {"id_": "db8e4852-1413-429d-a8e3-e601643f3535", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "78d9b081-2291-4957-869b-87275b038805", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "79582d46e3eea5a2587087302acd689c2cee80c2809bad2ed9a0874ce7c3bb8b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nfor (int i = 0; i < size; i++)\r\n\t\t{\r\n\t\t\tif (values[i].secType == Dtype::NUMBER) {\r\n\r\n\t\t\t\ttempvs[idx] = values[i].value_num();\r\n\t\t\t\t++idx;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstd::sort(tempvs.begin(), tempvs.end());\r\n\r\n\t\tres[\"median\"] = Object(median(true, tempvs));\r\n\r\n\t\tres[\"25%\"] = Object(column::quantile_2(.25, tempvs, true));\r\n\t\tres[\"50%\"] = Object(column::quantile_2(.5, tempvs, true));\r\n\t\tres[\"75%\"] = Object(column::quantile_2(.75, tempvs, true));\r\n\t}\r\n\telse {\r\n\t\tauto vount = value_count();\r\n\r\n\t\tres[\"unique\"] = Object((double)vount.size());\r\n\r\n\t\tObject modevalue = mode(true, vount);\r\n\r\n\t\tres[\"top\"] = modevalue;\r\n\t\tres[\"freq\"] = Object(vount[modevalue]);\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\nvector<Object> column::getDescribeObjectValues(Dtype include) {\r\n\r\n\tunordered_map<string, Object> des = describe();\r\n\r\n\tvector<string> property_;\r\n\r\n\tif (include == Dtype::NA) {\r\n\t\tproperty_ = {\r\n\t\t\"mean\",\r\n\t\t\"std\",\r\n\t\t\"median\",\r\n\t\t\"min\",\r\n\r\n\t\t\"25%\",\r\n\t\t\"50%\",\r\n\t\t\"75%\",\r\n\t\t\"max\",\r\n\r\n\t\t\"unique\",\r\n\t\t\"top\",\r\n\t\t\"freq\"\r\n\t\t};\r\n\t}\r\n\telse if (this->secType == Dtype::NUMBER) {\r\n\t\tproperty_ = {\r\n\t\t\"mean\",\r\n\t\t\"std\",\r\n\t\t\"median\",\r\n\t\t\"min\",\r\n\r\n\t\t\"25%\",\r\n\t\t\"50%\",\r\n\t\t\"75%\",\r\n\t\t\"max\",\r\n\t\t};\r\n\t}\r\n\telse {\r\n\t\tproperty_ = {\r\n\t\t\"unique\",\r\n\t\t\"top\",\r\n\t\t\"freq\"\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvector<Object> vals(property_.size());\r\n\r\n\tfor (int i = 0; i < property_.size(); i++) {\r\n\t\tvals[i] = des[property_[i]];\r\n\t}\r\n\r\n\treturn vals;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e289c411-4e90-4242-956b-b138c8e87c52": {"__data__": {"id_": "e289c411-4e90-4242-956b-b138c8e87c52", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "675cb5e2-457e-4fc3-9e5d-c82ac84a4ea5", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "c00d272e5442effe2294278412199e3b0d6248aa1ec99885996d570c92802afd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::describe_print()\r\n{\r\n\r\n\tvector<Object> property_;\r\n\tif (secType == Dtype::NUMBER) {\r\n\r\n\t\tproperty_.emplace_back(\"mean\");\r\n\t\tproperty_.emplace_back(\"std\");\r\n\t\tproperty_.emplace_back(\"median\");\r\n\t\tproperty_.emplace_back(\"min\");\r\n\t\tproperty_.emplace_back(\"25%\");\r\n\t\tproperty_.emplace_back(\"50%\");\r\n\t\tproperty_.emplace_back(\"75%\");\r\n\t\tproperty_.emplace_back(\"max\");\r\n\t}\r\n\telse {\r\n\t\tproperty_.emplace_back(\"unique\");\r\n\t\tproperty_.emplace_back(\"top\");\r\n\t\tproperty_.emplace_back(\"freq\");\r\n\t}\r\n\r\n\tcolumn prop_col(\"index\", property_);\r\n\r\n\tvector<Object> vals = getDescribeObjectValues(type);\r\n\r\n\tcolumn val_col(name, vals);\r\n\r\n\tTable tabel({ prop_col ,val_col });\r\n\ttabel.print();\r\n}\r\n\r\nunordered_map<Object, int  > column::value_count()\r\n{\r\n\tunordered_map<Object, int> results;\r\n\tfor (const auto& val : values) {\r\n\t\t++results[val];\r\n\t}\r\n\treturn results;\r\n}\r\nunordered_map<Object, float> column::value_count_pct()\r\n{\r\n\tunordered_map<Object, float> results;\r\n\tfor (const auto& val : values) {\r\n\t\t++results[val];\r\n\t}\r\n\r\n\tauto size_ = values.size();\r\n\tfor (auto& valcounter : results) {\r\n\t\tvalcounter.second /= size_;\r\n\t}\r\n\treturn results;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1168, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "420f247d-03e8-4ab2-9f22-4e4c090e6673": {"__data__": {"id_": "420f247d-03e8-4ab2-9f22-4e4c090e6673", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed4f65a6-67b1-4528-afd0-0394b7e11f03", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b81774d2fbfd2bd54e2b3aab7a6bc661079fb1d5aacc69b33e43c7b513f3646f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::value_count_print    () {\r\n\r\n\tunordered_map<Object, int> curr_value_count = value_count();\r\n\r\n\tvector<Object> index_vec(curr_value_count.size());\r\n\tvector<Object> value_vec(curr_value_count.size());\r\n\r\n\tint idx = 0;\r\n\r\n\tfor (const auto& val : curr_value_count) {\r\n\t\tindex_vec[idx] = Object(val.first);\r\n\t\tvalue_vec[idx++] = Object(val.second, Dtype::INT32);\r\n\t}\r\n\tcolumn indexcol(\"index\", Tools::gen_seq_obj(0, (int)curr_value_count.size()));\r\n\r\n\tcolumn namecol(name, index_vec);\r\n\tcolumn valuecol(\"Count\", value_vec);\r\n\r\n\tTable table({ indexcol, namecol, valuecol });\r\n\ttable.print();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 626, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d06226c4-05c5-451d-85f9-93d80d99b32e": {"__data__": {"id_": "d06226c4-05c5-451d-85f9-93d80d99b32e", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f12e7db3-0a73-4dbe-8a17-18858f34152a", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "aa4bde2175909c02b98dc8c70074aadb19991aa703fbb16d4401720fdc5e498f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::value_count_pct_print() {\r\n\r\n\tauto curr_value_count = value_count_pct();\r\n\r\n\tvector<Object> index_vec(curr_value_count.size());\r\n\tvector<Object> value_vec(curr_value_count.size());\r\n\r\n\tint idx = 0;\r\n\r\n\tfor (const auto& val : curr_value_count) {\r\n\t\tindex_vec[idx] = Object(val.first);\r\n\t\tvalue_vec[idx++] = Object(val.second, Dtype::FLOAT);\r\n\t}\r\n\r\n\tcolumn indexcol(\"index\", Tools::gen_seq_obj(0, (int)curr_value_count.size()));\r\n\r\n\tcolumn namecol(name, index_vec);\r\n\tcolumn valuecol(\"pct\", value_vec);\r\n\r\n\tTable table({ indexcol, namecol, valuecol });\r\n\ttable.print();\r\n}\r\n\r\nunordered_set<Object> column::unique() {\r\n\r\n\treturn to_uset();\r\n}\r\n\r\nint column::unique_count()\r\n{\r\n\treturn (int)(to_uset().size());\r\n}\r\nint column::na_count    ()\r\n{\r\n\tint na_counter = 0;\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (values[i].type == Dtype::NA) {\r\n\t\t\t++na_counter;\r\n\t\t}\r\n\t}\r\n\treturn na_counter;\r\n}\r\n\r\n////////////////\r\n\r\n// Alteration", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 963, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8cbc42e-8030-4a42-8516-2d39445cf8ce": {"__data__": {"id_": "e8cbc42e-8030-4a42-8516-2d39445cf8ce", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0aafbd97-d626-4089-8e7f-ff40407a38ad", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e8f8701c3d806ccf020c7172552fdf75e958676aac999f5b6825d50bfdf6c2ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid   column::drop  (int idx)\r\n{\r\n\tvalues.erase(values.begin() + idx);\r\n\t--size;\r\n}\r\ncolumn column::drop  (set<int> indexes, bool inplace)\r\n{\r\n\tunordered_set<int> in_indexes;\r\n\r\n\tfor (int i : indexes)\r\n\t\tin_indexes.insert(i);\r\n\r\n\tint new_size = static_cast<int>(values.size() - indexes.size());\r\n\r\n\tauto end = in_indexes.end();\r\n\r\n\tcolumn new_col;\r\n\r\n\tnew_col.values = vector<Object>();\r\n\tnew_col.values.reserve(new_size);\r\n\r\n\r\n\tint i = 0;\r\n\tfor (Object& val : values) {\r\n\r\n\t\tif (in_indexes.find(i++) == end) {\r\n\t\t\tnew_col.values.push_back(val);\r\n\t\t}\r\n\t}\r\n\r\n\tif (inplace) {\r\n\t\tvalues = std::move(new_col.values);\r\n\t\tsize = (int)values.size();\r\n\t\tnew_col = column();\r\n\t\treturn new_col;\r\n\t}\r\n\r\n\tnew_col.set_name(name);\r\n\tnew_col.size = new_size;\r\n\tnew_col.type = this->type;\r\n\tnew_col.secType = this->secType;\r\n\tnew_col.mixed_type = this->mixed_type;\r\n\r\n\treturn new_col;\r\n}\r\ncolumn column::dropna(bool in_place)\r\n{\r\n\tif (in_place) {\r\n\t\t*this = drop(naidxs());\r\n\t}\r\n\telse {\r\n\t\tcolumn new_cols = *this;\r\n\t\treturn new_cols.drop(new_cols.naidxs());\r\n\t}\r\n\treturn column();\r\n}\r\n\r\ncolumn column::concat(column othercol)\r\n{\r\n\tassert(name    == othercol.name    && \"Both Col must have same name\");\r\n\tassert(secType == othercol.secType && \"Both Col must have same type\");\r\n\r\n\tcolumn newcol = *this;\r\n\tnewcol.type = std::max(type, othercol.type);\r\n\tnewcol.secType = std::max(secType, othercol.secType);\r\n\tnewcol.mixed_type = true;\r\n\r\n\tfor (Object val : othercol.values) {\r\n\t\tnewcol.appendPushBack(val);\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1519, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b32fb10-ab3b-4759-893c-2a1441752c63": {"__data__": {"id_": "9b32fb10-ab3b-4759-893c-2a1441752c63", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d79a52bc-fe42-4c06-a291-faf08e22d866", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "17fec1214f23afed7aa0e6bbc0c3881ed64ea52500446c865b1062b8485b980b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nfor (Object val : othercol.values) {\r\n\t\tnewcol.appendPushBack(val);\r\n\t}\r\n\treturn newcol;\r\n}\r\n\r\ncolumn column::repeat(int times)\r\n{\r\n\tif (times == 0) return *this;\r\n\r\n\tint ac_size = len();\r\n\tint new_size = ac_size * times;\r\n\r\n\tvector<Object> new_values(new_size);\r\n\r\n\tfor (int i = 0; i < new_size; i++)\r\n\t{\r\n\t\tnew_values[i] = values[i % ac_size];\r\n\t}\r\n\r\n\treturn column(name, new_values);\r\n}\r\ncolumn column::repeat_for_each(int times)\r\n{\r\n\tif (times == 0 || times == 1) return *this;\r\n\r\n\tint ac_size = len();\r\n\tint new_size = ac_size * times;\r\n\tvector<Object> new_values(new_size);\r\n\r\n\tint idx = 0;\r\n\tint temp_times = times;\r\n\tfor (int i = 0; i < (int)(new_size / times); i++)\r\n\t{\r\n\t\ttemp_times = times;\r\n\t\twhile (temp_times--)\r\n\t\t{\r\n\t\t\tnew_values[idx++] = values[i];\r\n\t\t}\r\n\t}\r\n\treturn column(name, new_values);\r\n\r\n}\r\n\r\ncolumn column::sample(int size_, int seed, bool with_replacement)\r\n{\r\n\treturn (*this)[Tools::rand_vec_nums(size_, size - 1, 0, seed, with_replacement)];\r\n}\r\ncolumn column::shuffle(int seed)\r\n{\r\n\treturn (*this)[Tools::rand_vec_nums(size, size - 1, 0, seed, false)];\r\n}\r\n\r\n////////////////\r\n\r\n// Sorting\r\n\r\nvector<int> column::map_sort(\r\n\tvector<Object>& arr,\r\n\tbool reverse,\r\n\tSortAlgo algo)\r\n{\r\n\r\n\tswitch (algo)\r\n\t{\r\n\tcase SortAlgo::heap:\t  return Sort::heap(arr, reverse);\r\n\tcase SortAlgo::insertion: return Sort::insertion(arr, reverse);\r\n\tcase SortAlgo::bubble:    return Sort::bubble(arr, reverse);\r\n\tcase SortAlgo::selection: return Sort::selection(arr, reverse);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1511, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39347ff8-b1ef-4f32-89d7-335f8cd630fa": {"__data__": {"id_": "39347ff8-b1ef-4f32-89d7-335f8cd630fa", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ff4a3b22-13e1-4312-b6ec-a03c2bba0ef4", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "56d882c5be0bfcbb41b7c0a7e951ae1ed5faf434299daa174bf7a2e977454457", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ncase SortAlgo::selection: return Sort::selection(arr, reverse);\r\n\tcase SortAlgo::double_selection: return Sort::double_selection(arr, reverse);\r\n\tcase SortAlgo::merge:\t  return Sort::merge_sort(arr, reverse);\r\n\tcase SortAlgo::quick:\t  return Sort::quick_sort(arr, reverse);\r\n\r\n\tcase SortAlgo::merge_and_insertion:\r\n\t\treturn Sort::merge_insertion_sort(arr, reverse);\r\n\r\n\tdefault:\r\n\t\tbreak;\r\n\t}\r\n\r\n\tvector<int> temp;\r\n\r\n\treturn temp;\r\n}\r\n\r\n\r\nvector<int> column::sortAndGetIndexs(bool revers, SortAlgo algo)\r\n{\r\n\treturn map_sort(values, revers, algo);\r\n}\r\n\r\ncolumn column::sortAndGetCol(bool revers, SortAlgo algo)\r\n{\r\n\tvector<Object> tempValues = values;\r\n\r\n\tmap_sort(tempValues, revers, algo);\r\n\r\n\tcolumn new_col = *this;\r\n\tnew_col.values = tempValues;\r\n\r\n\treturn new_col;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 799, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "752b8591-c8ce-432b-ba4b-4f80a3cbfb1d": {"__data__": {"id_": "752b8591-c8ce-432b-ba4b-4f80a3cbfb1d", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "518b4fe8-81fe-4c60-b0cb-ee219cfc90a2", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ea8a82fed50a4e3aec00a94c20699cfe9cad85bc758fb1a5fde01419bca2ee2b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::sort(bool revers, SortAlgo algo)\r\n{\r\n\tmap_sort(values, revers, algo);\r\n}\r\n\r\n////////////////\r\n\r\n// Algorithmic Methods\r\n\r\nObject column::kth_element(int k)\r\n{\r\n\tvector<Object> temp_values = values;\r\n\treturn kth_element(temp_values, 0, size - 1, k);\r\n}\r\n\r\nObject column::kth_largest_element (int k)\r\n{\r\n\tvector<Object> temp_values = values;\r\n\treturn kth_element(temp_values, 0, size - 1, size - k + 1);\r\n}\r\nObject column::kth_smallest_element(int k)\r\n{\r\n\treturn kth_element(k);\r\n}\r\n\r\ncolumn column::kth_largest_elements (int k, bool reverse)\r\n{\r\n\tvector<Object> temp_values = values;\r\n\tkth_element(temp_values, 0, size - 1, size - k + 1);\r\n\r\n\tstring new_name = std::to_string(k) + \"_largest_items\";\r\n\r\n\tvector<Object> new_vec(temp_values.begin() + (size - k), temp_values.end());\r\n\r\n\t//Sort::insertion(new_vec, reverse);\r\n\r\n\treturn column(new_name, new_vec);\r\n}\r\ncolumn column::kth_smallest_elements(int k, bool reverse)\r\n{\r\n\tvector<Object> temp_values = values;\r\n\tkth_element(temp_values, 0, size - 1, k);\r\n\r\n\tstring new_name = std::to_string(k) + \"_smallest_items\";\r\n\r\n\tvector<Object> new_vec(temp_values.begin(), temp_values.begin() + k);\r\n\r\n\t//Sort::insertion(new_vec, reverse);\r\n\r\n\treturn column(new_name, new_vec);\r\n}\r\n\r\nObject column::kth_top_cat (uint32_t k)\r\n{\r\n\r\n\tunordered_map<Object, uint32_t> value_counter;\r\n\r\n\tfor (const auto& val : values) {\r\n\t\tvalue_counter[val]++;\r\n\t}\r\n\r\n\tusing FreqPair = std::pair<uint32_t, Object>;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1473, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73880a0e-4ad1-4921-bb27-311409c33d1b": {"__data__": {"id_": "73880a0e-4ad1-4921-bb27-311409c33d1b", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7218757a-7429-4a3a-ba40-f6a5a69b17f9", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8bd6b4bdc1a449d2b05fd29c89c4c2a6f519c9b24e5259ad64a4f23ee504c12a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvalue_counter[val]++;\r\n\t}\r\n\r\n\tusing FreqPair = std::pair<uint32_t, Object>;\r\n\tstd::priority_queue<FreqPair, vector<FreqPair>, std::greater<>> min_heap;\r\n\r\n\tfor (const auto& entry : value_counter) {\r\n\t\tmin_heap.push({ entry.second, entry.first });\r\n\t\tif (min_heap.size() > k) {\r\n\t\t\tmin_heap.pop();\r\n\t\t}\r\n\t}\r\n\r\n\tif (!min_heap.empty()) {\r\n\t\treturn min_heap.top().second;\r\n\t}\r\n\r\n\treturn Object();\r\n}\r\nObject column::kth_least_cat(uint32_t k)\r\n{\r\n\tunordered_map<Object, uint32_t> value_counter;\r\n\r\n\tfor (const auto& val : values) {\r\n\t\tvalue_counter[val]++;\r\n\t}\r\n\r\n\tusing FreqPair = std::pair<uint32_t, Object>;\r\n\tstd::priority_queue<FreqPair> max_heap;\r\n\r\n\tfor (const auto& entry : value_counter) {\r\n\t\tmax_heap.push({ entry.second, entry.first });\r\n\r\n\t\tif (max_heap.size() > k) {\r\n\t\t\tmax_heap.pop();\r\n\t\t}\r\n\t}\r\n\r\n\tif (!max_heap.empty()) {\r\n\t\treturn max_heap.top().second;\r\n\t}\r\n\r\n\treturn Object();\r\n}\r\n\r\ncolumn column::kth_top_cats (uint32_t k)\r\n{\r\n\tauto value_counts_res = value_count();\r\n\r\n\tif (k > value_counts_res.size()) {\r\n\t\tk = (uint32_t)value_counts_res.size();\r\n\t}\r\n\r\n\tvector<std::pair<Object, int>> vec(value_counts_res.begin(), value_counts_res.end());\r\n\r\n\tstd::sort(vec.begin(), vec.end(),\r\n\t\t[](\r\n\t\t\tconst std::pair<Object, int>& a,\r\n\t\t\tconst std::pair<Object, int>& b) {\r\n\t\t\t\treturn a.second > b.second; // Sort in descending order based on value\r\n\t\t});\r\n\r\n\tvector<Object> result_values;\r\n\tresult_values.reserve(k);\r\n\tfor (size_t i = 0; i < k; i++)\r\n\t{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1484, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f40365d2-1875-4898-9af6-aa01dadf5853": {"__data__": {"id_": "f40365d2-1875-4898-9af6-aa01dadf5853", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "153d19db-0955-49ee-8e42-b2ab554904b2", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ac170fda95e1be781db015fa8ea8273022a5649fc9292638ea9973f5761eeaf3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvector<Object> result_values;\r\n\tresult_values.reserve(k);\r\n\tfor (size_t i = 0; i < k; i++)\r\n\t{\r\n\t\tresult_values.emplace_back(vec[i].first);\r\n\t}\r\n\r\n\treturn column(name, result_values, mixed_type);\r\n}\r\ncolumn column::kth_lest_cats(uint32_t k)\r\n{\r\n\tauto value_counts_res = value_count();\r\n\r\n\tif (k > value_counts_res.size()) {\r\n\t\tk = (uint32_t)value_counts_res.size();\r\n\t}\r\n\r\n\tvector<std::pair<Object, int>> vec(value_counts_res.begin(), value_counts_res.end());\r\n\r\n\tstd::sort(vec.begin(), vec.end(),\r\n\t\t[](\r\n\t\t\tconst std::pair<Object, int>& a,\r\n\t\t\tconst std::pair<Object, int>& b) {\r\n\t\t\t\treturn a.second < b.second; // Sort in descending order based on value\r\n\t\t});\r\n\r\n\tvector<Object> result_values;\r\n\tresult_values.reserve(k);\r\n\tfor (size_t i = 0; i < k; i++)\r\n\t{\r\n\t\tresult_values.emplace_back(vec[i].first);\r\n\t}\r\n\r\n\treturn column(name, result_values, mixed_type);\r\n}\r\n\r\nSubArrayBoundris column::maxSubSeq()\r\n{\r\n\treturn maxSubArraySub(values, 0, size - 1);\r\n}\r\nSubArrayBoundris column::minSubSeq()\r\n{\r\n\treturn minSubArraySub(values, 0, size - 1);\r\n}\r\n\r\n////////////////\r\n\r\n// Duplication\r\n\r\nset<int> column::duplicated()\r\n{\r\n\tset<int> duplicated_indices;\r\n\tif (values.empty()) {\r\n\t\treturn duplicated_indices;\r\n\t}\r\n\r\n\tunordered_set<Object> unique_values;\r\n\tsize_t value_size = values.size();\r\n\tunique_values.reserve(value_size);\r\n\r\n\tfor (size_t i = 0; i < value_size; ++i) {\r\n\r\n\t\tconst Object& current = values[i];\r\n\t\tif (current.type == Dtype::NA) {\r\n\t\t\tcontinue;\r\n\t\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a99075b-c183-4734-93f5-9d86a4a0ef33": {"__data__": {"id_": "1a99075b-c183-4734-93f5-9d86a4a0ef33", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "541ba03d-106c-49f3-ab61-01d208a67f87", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2fee50133c2209d8a9230c74e51820e9062ae381c3eafc605b4a4aae3d98809c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nconst Object& current = values[i];\r\n\t\tif (current.type == Dtype::NA) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t// Try to insert and check if it was successful\r\n\t\tauto [_, was_inserted] = unique_values.emplace(current);\r\n\r\n\t\tif (!was_inserted) {\r\n\t\t\tduplicated_indices.emplace(i);\r\n\t\t}\r\n\t}\r\n\treturn duplicated_indices;\r\n}\r\n\r\ncolumn column::drop_duplicated(bool inplace)\r\n{\r\n\tset<int> dub_idxs = this->duplicated();\r\n\r\n\tif (inplace) {\r\n\t\tvalues.erase(\r\n\t\t\tstd::remove_if(values.begin(), values.end(),\r\n\t\t\t\t[&dub_idxs, idx = 0](const auto&) mutable {\r\n\t\t\t\t\treturn dub_idxs.count(idx++);\r\n\t\t\t\t}),\r\n\t\t\tvalues.end()\r\n\t\t);\r\n\t\tsize -= (int)dub_idxs.size();\r\n\t}\r\n\telse {\r\n\t\tcolumn new_col = *this;\r\n\t\tnew_col.drop_duplicated(inplace = true);\r\n\t\treturn new_col;\r\n\t}\r\n\treturn column();\r\n}\r\n\r\n////////////////\r\n\r\n// Handling Memory\r\n\r\nsize_t column::get_mem_size()\r\n{\r\n\tsize_t not_fully_used_size = (this->values.capacity() - this->size) * 8;\r\n\tsize_t fully_used_size = Object::get_mem_size(values);\r\n\tsize_t mem_size = not_fully_used_size + fully_used_size;\r\n\treturn mem_size;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1075, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82514485-7a98-4394-8d08-eae8f403e278": {"__data__": {"id_": "82514485-7a98-4394-8d08-eae8f403e278", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "22f6be7b-60fb-486c-9757-b3d1f3928022", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "632a4b51c64f1a2b32e928bb579f88e52d4b27ea94cee2f4bc3e7038f71ce838", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::optimiz_mem(bool with_mixed_type)\r\n{\r\n\ttype = Object::optimize_mem(this->values, with_mixed_type);\r\n\tsecType = Object::get_sec_type(type);\r\n\tmixed_type = with_mixed_type;\r\n}\r\n\r\n////////////////\r\n\r\n// Apply\r\n\r\ncolumn column::apply(std::function<Object(const Object&)> func)\r\n{\r\n\tcolumn new_col = *this;\r\n\r\n\tfor (auto& value : new_col.values) {\r\n\t\tvalue = func(value); // Apply the function to each value\r\n\t}\r\n\treturn new_col; // Return a new column with the results}\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c93b8735-334d-42c1-a0e2-4ecdaa46e211": {"__data__": {"id_": "c93b8735-334d-42c1-a0e2-4ecdaa46e211", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "752a038c-1d56-4151-a6e1-57ade34d0d61", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0885c834fc4bb06358a3f6c53bb97f67859f3c5f0056b54acb9a568caba51bf0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::papply(const std::function<Object(const Object&)>& func)\r\n{\r\n\tomp_set_num_threads(omp_get_max_threads());\r\n\r\n#pragma omp parallel for\r\n\tfor (size_t i = 0; i < size; ++i) {\r\n\t\tvalues[i] = func(values[i]); // Apply the function to each value\r\n\t}\r\n}\r\n\r\n////////////////\r\n\r\n// Filtering\r\n\r\ncolumn column::filter(vector<set<int>>& indexes)\r\n{\r\n\tif (indexes.empty()) return column();\r\n\r\n\tset<int> result = indexes[0];\r\n\r\n\tfor (size_t i = 1; i < indexes.size(); i++)\r\n\t{\r\n\t\tset<int> curr_set = indexes[i];\r\n\t\tset<int> intersections;\r\n\r\n\t\tstd::set_intersection(\r\n\t\t\tresult.begin(), result.end(),\r\n\t\t\tcurr_set.begin(), curr_set.end(),\r\n\t\t\tstd::inserter(\r\n\t\t\t\tintersections,\r\n\t\t\t\tintersections.begin()\r\n\t\t\t)\r\n\t\t);\r\n\t\tresult = intersections;\r\n\r\n\t\tif (result.empty()) break;\r\n\t}\r\n\treturn (*this)[result];\r\n}\r\ncolumn column::filter(set<int>& indexes) { return (*this)[indexes]; }\r\n\r\nset<int> column::filterByConditionIdx(std::function<bool(const Object&)> condition)\r\n{\r\n\tset<int> matched_idx;\r\n\tint i = 0;\r\n\tfor (const auto& val : values) {\r\n\t\tif (condition(val)) matched_idx.insert(i);\r\n\t\t++i;\r\n\t}\r\n\treturn matched_idx;\r\n}\r\ncolumn   column::filterByCondition   (std::function<bool(const Object&)> condition)\r\n{\r\n\treturn (*this)[filterByConditionIdx(condition)];\r\n}\r\n\r\nset<int> column::filterByConditionIdx(std::function<bool(const size_t idx, const Object&)>condition) {\r\n\r\n\tset<int> matched_idx;\r\n\tint i = 0;\r\n\tfor (const auto& val : values) {\r\n\t\tif (condition(i, val)) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1499, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e929e25-99fb-4219-bff9-cb5d9a9edf37": {"__data__": {"id_": "9e929e25-99fb-4219-bff9-cb5d9a9edf37", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "099db20d-999b-4095-8f84-621ea3f159c5", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0e666c684d8d88a8df242d60fa7742b7b54715f7929f9b35c80192f8918a5fb8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nset<int> matched_idx;\r\n\tint i = 0;\r\n\tfor (const auto& val : values) {\r\n\t\tif (condition(i, val)) {\r\n\t\t\tmatched_idx.insert(i);\r\n\t\t}\r\n\t\t++i;\r\n\t}\r\n\treturn matched_idx;\r\n}\r\ncolumn   column::filterByCondition   (std::function<bool(const size_t idx, const Object&)>condition) {\r\n\treturn (*this)[filterByConditionIdx(condition)];\r\n}\r\n\r\nset<int> column::isin(std::initializer_list<Object> invalues)\r\n{\r\n\treturn isin(vector<Object>(invalues.begin(), invalues.end()));\r\n}\r\n\r\n////////////////\r\n\r\n// utilities", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 521, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6cc6e4f-777d-43c5-810b-624c98f964ae": {"__data__": {"id_": "b6cc6e4f-777d-43c5-810b-624c98f964ae", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "de9c27cc-5cc9-4d8d-9ce2-4a2227a5cbec", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "58163fc8c055b7271c3cbbd88716c135a4a9bb83c2051aaca487499f2691f10c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nvoid column::calc_max_str_val_len()\r\n{\r\n\tmaxLenStr = (int)name.length();\r\n\tint temp_len;\r\n\r\n\tfor (const Object& val : values) {\r\n\t\ttemp_len = val.len();\r\n\t\tif (temp_len > maxLenStr)\r\n\t\t\tmaxLenStr = temp_len;\r\n\t}\r\n}\r\n\r\n////////////////\r\n\r\n//Random Generating Values\r\n\r\ncolumn column::rand_nums(int size, int max, int min, unsigned int seed)\r\n{\r\n\treturn column(\"NA\", Object::rand_nums(size, max, min, seed), false);\r\n}\r\n\r\n////////////////\r\n\r\n// Private Methods\r\n\r\nvector<Object> column::calc(char op, Object val) {\r\n\r\n\tvector<Object> newvalues;\r\n\tnewvalues.reserve(size);\r\n\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (values[i].type == Dtype::NA) {\r\n\t\t\tnewvalues.emplace_back(Object());\r\n\t\t\tcontinue;\r\n\t\t};\r\n\r\n\t\tswitch (op)\r\n\t\t{\r\n\t\tcase '+': newvalues.emplace_back(values[i] + val); break;\r\n\t\tcase '-': newvalues.emplace_back(values[i] - val); break;\r\n\t\tcase '*': newvalues.emplace_back(values[i] * val); break;\r\n\t\tcase '/': newvalues.emplace_back(values[i] / val); break;\r\n\t\tcase '%': newvalues.emplace_back(values[i] % val); break;\r\n\t\t}\r\n\t}\r\n\treturn newvalues;\r\n}\r\n\r\n\r\nObject column::kth_element(\r\n\tvector<Object>& arr,\r\n\tint start,\r\n\tint end, int k)\r\n{\r\n\tif (start == end) return arr[start];\r\n\r\n\tint q = Tools::randimized_partition(arr, start, end);\r\n\tint j = q - start + 1;\r\n\r\n\tif (k == j) return arr[q];\r\n\r\n\telse if (k < j) {\r\n\r\n\t\treturn kth_element(arr, start, q - 1, k);\r\n\t}\r\n\telse {\r\n\r\n\t\treturn kth_element(arr, q + 1, end, k - j);\r\n\t}\r\n\r\n\treturn Object();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1490, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "24709d62-c7d6-4485-a1d9-082afeb133c7": {"__data__": {"id_": "24709d62-c7d6-4485-a1d9-082afeb133c7", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2f9c82f-c936-4520-b31e-8fa0ea6281b8", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "25ea0a609db96794ea808167e8a0f64e9195049bea83fd9b1f003dba0b104ae4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n}\r\n\telse {\r\n\r\n\t\treturn kth_element(arr, q + 1, end, k - j);\r\n\t}\r\n\r\n\treturn Object();\r\n}\r\n\r\nSubArrayBoundris column::middelMaxSub  (vector<Object> arr, int low, int mid, int high){\r\n\tint best_lidx = mid;\r\n\tint best_ridx = mid;\r\n\r\n\tlong double best_lsum = (long double)arr[mid].value_num();\r\n\tlong double best_rsum = best_lsum;\r\n\r\n\tlong int temp = 0;\r\n\r\n\tfor (int i = mid; i >= low; --i)\r\n\t{\r\n\t\ttemp += (long int)arr[i].value_num();\r\n\r\n\t\tif (temp > best_lsum) {\r\n\t\t\tbest_lsum = temp;\r\n\t\t\tbest_lidx = i;\r\n\t\t}\r\n\t}\r\n\r\n\ttemp = 0;\r\n\tfor (int i = mid; i <= high; ++i)\r\n\t{\r\n\t\ttemp += (long int)arr[i].value_num();\r\n\r\n\t\tif (temp > best_rsum) {\r\n\t\t\tbest_rsum = temp;\r\n\t\t\tbest_ridx = i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { best_lidx, best_ridx, best_lsum + best_rsum - arr[mid].value_num() };\r\n}\r\nSubArrayBoundris column::maxSubArraySub(vector<Object> arr, int low, int high)\r\n{\r\n\tif (low == high) return { low, high, arr[low].value_num() };\r\n\r\n\tint mid = (low + high) / 2;\r\n\r\n\tSubArrayBoundris leftSubSum = maxSubArraySub(arr, low, mid);\r\n\tSubArrayBoundris rightSubSum = maxSubArraySub(arr, mid + 1, high);\r\n\tSubArrayBoundris midSubsum = middelMaxSub(arr, low, mid, high);\r\n\r\n\tif (\r\n\t\tleftSubSum.sum >= rightSubSum.sum &&\r\n\t\tleftSubSum.sum >= midSubsum.sum)\r\n\t\treturn leftSubSum;\r\n\r\n\telse if (\r\n\t\tleftSubSum.sum <= rightSubSum.sum &&\r\n\t\trightSubSum.sum >= midSubsum.sum)\r\n\t\treturn rightSubSum;\r\n\r\n\treturn midSubsum;\r\n}\r\n\r\nSubArrayBoundris column::middelMinSub  (vector<Object> arr, int low, int mid, int high)\r\n{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1512, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "185bbcc7-be3d-4b74-8751-26194a393427": {"__data__": {"id_": "185bbcc7-be3d-4b74-8751-26194a393427", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6e05c47c-aa36-44f3-a77e-6fe0172304bf", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ae9244e38cdaedd960ece58a281e2c2ec95e032c5a67e99101afd47d9fa35fc6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\n}\r\n\r\nSubArrayBoundris column::middelMinSub  (vector<Object> arr, int low, int mid, int high)\r\n{\r\n\tint best_lidx = mid;\r\n\tint best_ridx = mid;\r\n\r\n\tlong double best_lsum = (long double)arr[mid].value_num();\r\n\tlong double best_rsum = best_lsum;\r\n\r\n\tlong int temp = 0;\r\n\r\n\tfor (int i = mid; i >= low; --i)\r\n\t{\r\n\t\ttemp += (long int)arr[i].value_num();\r\n\r\n\t\tif (temp < best_lsum) {\r\n\t\t\tbest_lsum = temp;\r\n\t\t\tbest_lidx = i;\r\n\t\t}\r\n\t}\r\n\r\n\ttemp = 0;\r\n\tfor (int i = mid; i <= high; ++i)\r\n\t{\r\n\t\ttemp += (long int)arr[i].value_num();\r\n\r\n\t\tif (temp < best_rsum) {\r\n\t\t\tbest_rsum = temp;\r\n\t\t\tbest_ridx = i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { best_lidx, best_ridx, best_lsum + best_rsum - arr[mid].value_num() };\r\n}\r\nSubArrayBoundris column::minSubArraySub(vector<Object> arr, int low, int high)\r\n{\r\n\tif (low == high) return { low, high, arr[low].value_num() };\r\n\r\n\tint mid = (low + high) / 2;\r\n\r\n\tSubArrayBoundris leftSubSum = minSubArraySub(arr, low, mid);\r\n\tSubArrayBoundris rightSubSum = minSubArraySub(arr, mid + 1, high);\r\n\tSubArrayBoundris midSubsum = middelMinSub(arr, low, mid, high);\r\n\r\n\tif (\r\n\t\tleftSubSum.sum <= rightSubSum.sum &&\r\n\t\tleftSubSum.sum <= midSubsum.sum)\r\n\t\treturn leftSubSum;\r\n\r\n\telse if (\r\n\t\tleftSubSum.sum >= rightSubSum.sum &&\r\n\t\trightSubSum.sum <= midSubsum.sum)\r\n\t\treturn rightSubSum;\r\n\r\n\treturn midSubsum;\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n\r\n// Comparison\r\n\r\nset<int> column::operator < (Object value) { return COLUMN_COMPARE_OP(this, value, < ); }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1498, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82a993ff-5008-4a78-a90f-b8954eab3d95": {"__data__": {"id_": "82a993ff-5008-4a78-a90f-b8954eab3d95", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "facb0366-5c6e-4b81-8871-d4e5730f1eb6", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e6b7cb5e167f6f78e981e784a4ef559a368d05f98dd58fa4e4b4cf145460e1fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\nset<int> column::operator < (Object value) { return COLUMN_COMPARE_OP(this, value, < ); }\r\nset<int> column::operator > (Object value) { return COLUMN_COMPARE_OP(this, value, > ); }\r\nset<int> column::operator <=(Object value) { return COLUMN_COMPARE_OP(this, value, <=); }\r\nset<int> column::operator >=(Object value) { return COLUMN_COMPARE_OP(this, value, >=); }\r\nset<int> column::operator ==(Object value) { return COLUMN_COMPARE_OP(this, value, ==); }\r\n\r\nvector<bool> column::operator ==(column other)\r\n{\r\n\tassert((secType == other.secType && other.type != Dtype::NA) && \"This not valid comparison!\");\r\n\r\n\tvector<bool> reults(size);\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\treults[i] = values[i] == other.values[i];\r\n\t}\r\n\treturn reults;\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n\r\n// Arithmetic Operations\r\n\r\ncolumn column::operator + (Object other) { return COLUMN_ARITHMETICS_SCALAR_OP(this, other, +); }\r\ncolumn column::operator - (Object other) { return COLUMN_ARITHMETICS_SCALAR_OP(this, other, -); }\r\ncolumn column::operator * (Object other) { return COLUMN_ARITHMETICS_SCALAR_OP(this, other, *); }\r\ncolumn column::operator / (Object other) { return COLUMN_ARITHMETICS_SCALAR_OP(this, other, /); }\r\ncolumn column::operator % (Object other) { return COLUMN_ARITHMETICS_SCALAR_OP(this, other, %); }\r\n\r\ncolumn column::operator + (column other) { return COLUMN_ARITHMETICS_OP_COLUMN(this, &other, +); }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1446, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6cae80a2-6fb4-4090-9cc6-77c0d2065b54": {"__data__": {"id_": "6cae80a2-6fb4-4090-9cc6-77c0d2065b54", "embedding": null, "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b3a64e42-4adb-4c02-b4de-9344759a047a", "node_type": "4", "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "cdb05f82a5f8400324d3c23ca234690b2bed86683f39c5bb76eff3bf52e6a679", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.cpp\ncolumn column::operator + (column other) { return COLUMN_ARITHMETICS_OP_COLUMN(this, &other, +); }\r\ncolumn column::operator - (column other) { return COLUMN_ARITHMETICS_OP_COLUMN(this, &other, -); }\r\ncolumn column::operator * (column other) { return COLUMN_ARITHMETICS_OP_COLUMN(this, &other, *); }\r\ncolumn column::operator / (column other) { return COLUMN_ARITHMETICS_OP_COLUMN(this, &other, /); }\r\ncolumn column::operator % (column other) { return COLUMN_ARITHMETICS_OP_COLUMN(this, &other, %); }\r\n\r\n//2746", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 533, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2cdfb903-516b-4906-8510-81cf848dd9a4": {"__data__": {"id_": "2cdfb903-516b-4906-8510-81cf848dd9a4", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e55daa4d-a26f-49ae-85d5-8ec166ac552a", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "a8e4c1adb24a8d9785fa8308ad14c0356e6a726ffe90d295931235d8292904b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n#pragma once\r\n\r\n#ifndef Column_CLS\r\n#define Column_CLS\r\n\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#include <map>\r\n\r\n#include <vector>\r\n#include <string>\r\n#include <set>\r\n\r\n#include <iomanip>\r\n#include <algorithm>\r\n#include <cassert>\r\n\r\n#include <mutex>\r\n#include <execution>\r\n\r\n#include <omp.h>\r\n\r\n#include \"../helpers/Tools.h\"\r\n#include \"../ObjectDs/Object.h\"\r\n\r\n\r\n#include \"../sort_cls/Sort.h\"\r\n\r\n#include <chrono>\r\n\r\n#include <initializer_list>\r\n#include <type_traits>\r\n#include <iterator>\r\n\r\nusing namespace std;\r\n\r\n// 144 byte\r\n// 104\r\n\r\n// Macro to normalize an index based on the size of the container.\r\n#define NORMALIZE_INDEX(idx, size) ((idx) < 0 ? ((size) + (idx)) % (size) : (idx))", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 728, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6dfd6ee7-9adb-4fa0-abef-17675b545fd4": {"__data__": {"id_": "6dfd6ee7-9adb-4fa0-abef-17675b545fd4", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b7936b3-1dd9-486f-94bc-917aaac01460", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "18818becd58312291b4693f2ece140671b1a776e2a0cdd206e375ce99808ea69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\nclass column\r\n{\r\n\r\n\t#pragma region Private Methods\r\n\t\t// Calculate operation on all elements with a given value.\r\n\t\tvector<Object> calc(char op, Object val);\r\n\r\n\t\tvector<int> map_sort(vector<Object>& arr, bool reverse, SortAlgo algo);\r\n\r\n\t\tObject kth_element(vector<Object>& arr, int start, int end, int k);\r\n\r\n\t\tSubArrayBoundris middelMaxSub(vector<Object> arr, int low, int mid, int high);\r\n\t\tSubArrayBoundris maxSubArraySub(vector<Object> arr, int low, int high);\r\n\r\n\t\tSubArrayBoundris middelMinSub(vector<Object> arr, int low, int mid, int high);\r\n\t\tSubArrayBoundris minSubArraySub(vector<Object> arr, int low, int high);\r\n\t#pragma endregion\r\n\r\n\r\npublic:\r\n\r\n\t#pragma region Attributes\r\n\r\n\t\tvector<Object> values;\r\n\t\tstring name = \"NA\";\r\n\t\tDtype  type = Dtype::NA,\r\n\t\t\tsecType = Dtype::NA;\r\n\t\tbool   mixed_type = false;\r\n\t\tint    size = 0,\r\n\r\n\t\t\tmaxLenStr = 0;\r\n\t#pragma endregion\r\n\r\n\t#pragma region Constructors\r\n\r\n\t\ttemplate<typename Container>\r\n\t\tusing is_iterable = std::void_t<\r\n\t\t\tdecltype(std::begin(std::declval<Container>())),\r\n\t\t\tdecltype(std::end(std::declval<Container>()))\r\n\t\t> ;\r\n\r\n\t\t// Helper to detect if type is iterable\r\n\t\ttemplate<typename Container, typename = void>\r\n\t\tstruct is_iterable_container : std::false_type {};\r\n\r\n\t\ttemplate<typename Container>\r\n\t\tstruct is_iterable_container<Container, is_iterable<Container>> : std::true_type {};\r\n\r\n\r\n\t\t\r\n\t\tcolumn() { *this = column(\"NA\", vector<Object>(), false); }\r\n\r\n\t\tcolumn(int size, bool mixed_type = false) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cbf4036f-1b1f-476b-96ef-aae92cd2348e": {"__data__": {"id_": "cbf4036f-1b1f-476b-96ef-aae92cd2348e", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ea1f226d-c62c-418f-bfdc-906a7cd13daf", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3d48e923a3eb1220ace1455086d6e53fc6bfdcb0077af4852ea1f11765644af1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\ncolumn(int size, bool mixed_type = false) {\r\n\t\t\tvalues = vector<Object>(size);\r\n\t\t\tthis->mixed_type = mixed_type;\r\n\t\t}\r\n\r\n\t\ttemplate<typename Container>\r\n\t\tcolumn(const Container& container,\r\n\t\t\ttypename std::enable_if_t<is_iterable_container<Container>::value>* = nullptr) \r\n\t\t{\r\n\r\n\t\t\t*this = column(\r\n\t\t\t\t\"NA\",\r\n\t\t\t\tcontainer,\r\n\t\t\t\ttrue\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\ttemplate<typename Container>\r\n\t\tcolumn(std::string name_,\r\n\t\t\tconst Container& container,\r\n\t\t\tbool mixed_type_ = false,\r\n\t\t\ttypename std::enable_if_t<is_iterable_container<Container>::value>* = nullptr\r\n\t\t)\r\n\t\t\t: values(std::begin(container), std::end(container)),  \r\n\t\t\tname(name_),\r\n\t\t\tsize((int)values.size()),\r\n\t\t\tmaxLenStr((int)name.length()),\r\n\t\t\tmixed_type(mixed_type_),\r\n\t\t\ttype(Object::get_highest_type(values)),\r\n\t\t\tsecType(Object::get_sec_type(type))\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t// Initializer list constructor\r\n\t\tcolumn(std::initializer_list<Object> init)\r\n\t\t\t: values(init),\r\n\t\t\tname(\"NA\"),\r\n\t\t\tsize((int)init.size()),\r\n\t\t\tmaxLenStr(0),\r\n\t\t\tmixed_type(false),\r\n\t\t\ttype(Object::get_highest_type(values)),\r\n\t\t\tsecType(Object::get_sec_type(type))\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t// Constructor with name and initializer list\r\n\t\tcolumn(std::string name_, std::initializer_list<Object> init)\r\n\t\t\t: values(init),\r\n\t\t\tname(name_),\r\n\t\t\tsize((int)init.size()),\r\n\t\t\tmaxLenStr((int)name_.length()),\r\n\t\t\tmixed_type(false),\r\n\t\t\ttype(Object::get_highest_type(values)),\r\n\t\t\tsecType(Object::get_sec_type(type))\r\n\t\t{\r\n\t\t}\r\n\r\n\r\n\t#pragma endregion", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1490, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc9b278d-f302-4790-8119-fd6fa9a8c09c": {"__data__": {"id_": "dc9b278d-f302-4790-8119-fd6fa9a8c09c", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "877da1ed-aa76-4bc1-a4e7-8567ff314cbe", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4105280844a686784a74291daa9a4e37797a295f3756eb777c7058e61c3f6033", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\nsecType(Object::get_sec_type(type))\r\n\t\t{\r\n\t\t}\r\n\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Index-Based Accessors\r\n\t\tObject&\t\t  operator[](int idx)\t\t{ return values[NORMALIZE_INDEX(idx, size)]; }\r\n\t\tconst Object& operator[](int idx) const { return values[NORMALIZE_INDEX(idx, size)]; }\r\n\r\n\t\tcolumn operator [] (   set<int> indexes) { return get_indexes(indexes); }\r\n\t\tcolumn operator [] (vector<int> indexes) { return get_indexes(indexes); }\r\n\t#pragma endregion\r\n\r\n\t#pragma region Iterators\r\n\t\t// Begin and end methods for range-based for loops\r\n\t\tvector<Object>::iterator       begin()       { return values.begin(); }\r\n\t\tvector<Object>::const_iterator begin() const { return values.begin(); }\r\n\t\t\t\r\n\t\tvector<Object>::iterator       end()\t   { return values.end(); }\r\n\t\tvector<Object>::const_iterator end() const { return values.end(); }\r\n\t#pragma endregion\r\n\r\n\t#pragma region Getter/Setter Attributes\r\n\r\n\t\t// Set the name of the column.\r\n\t\tvoid set_name(string name);\r\n\r\n\t\t// Get the type of the column as a string.\r\n\t\tstring type_str() const;\r\n\r\n\t\t// Get the length (number of elements) in the column.\r\n\t\tint len();\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Append Functions\r\n\r\n\t\t// Append Object Value to the end of the values with specified Size In advance (Supports Mixed Dtype Value Columns).\r\n\t\tvoid append(Object val);\r\n\r\n\t\t// Append Multiples Value from vector to The Values Like in Python (Extend) with specified Size In advance\r\n\t\tvoid append(const vector<Object>& vals);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1502, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2a924a7-7d26-4488-89ac-999bbdbb0c41": {"__data__": {"id_": "b2a924a7-7d26-4488-89ac-999bbdbb0c41", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7a523f53-d272-4679-8c83-46223db58026", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "1065ed31755db13c82e388ddb5e1839f6011912c547170460b7b443e3a26ac70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\nvoid append(const vector<Object>& vals);\r\n\r\n\t\t// Append Object Value to the end of the values (Supports Mixed Dtype Value Columns).\r\n\t\tvoid appendPushBack(Object val);\r\n\r\n\t\t// Append Multiples Value from vector to The Values Like in Python (Extend)\r\n\t\tvoid appendPushBack(const vector<Object>& vals);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Print Function\r\n\r\n\t\t// Print The Value Row useful in Printing the Table.\r\n\t\tvoid printAt(int idx);\r\n\r\n\t\t// Print The Ranges Value from index to another.\r\n\t\tvoid p(int from = -1, int to = -1);\r\n\r\n\t\t// Print where NA values exists as Index.\r\n\t\tvoid print_naidxs();\r\n\r\n\t\t// Print The Head Data Range first value to Limits \r\n\t\tvoid phead(int limit = 5);\r\n\r\n\t\t// Print The Tail Data Range from (-limits) to the end of the data.\r\n\t\tvoid ptail(int limit = 5);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Get Column Values\r\n\t\t\r\n\t\t// Get Data Range from index to another.\r\n\t\tcolumn range(int from, int to);\r\n\r\n\t\t// Get Data Range from index 0 to limit=(default 5).\r\n\t\tcolumn head(int limit = 5);\r\n\r\n\t\t// Get Data Range from index size-(limit=default 5) to the size of the data.\r\n\t\tcolumn tail(int limit = 5);\r\n\r\n\t\t// get copy of all column values\r\n\t\tcolumn copy();\r\n\r\n\t\t// Get Values of this Many indexes from iterable container\r\n\t\ttemplate<typename Container>\r\n\t\tcolumn get_indexes(const Container& indexes,\r\n\t\t\ttypename std::enable_if_t<is_iterable_container<Container>::value>* = nullptr);\r\n\r\n\t\tcolumn get_indexes(std::initializer_list<int> indexes);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73c9f46d-beaf-4b2a-9519-c526d928352e": {"__data__": {"id_": "73c9f46d-beaf-4b2a-9519-c526d928352e", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d8364767-e8f5-48cf-9c2c-20b3621d772c", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "bd2ca2e26f6d473da27588bffbf04e480221fd928f5f27ee6592be7581c99da0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\ncolumn get_indexes(std::initializer_list<int> indexes);\r\n\r\n\t#pragma endregion \r\n\r\n\t#pragma region Handling Missing Data\r\n\r\n\t\t// get the indexes of NA values in vector;\r\n\t\tset<int> naidxs();\r\n\r\n\t\t// get the indexes of not NA values in vector;\r\n\t\tset<int> not_naidxs();\r\n\r\n\t\t// fill NA Value, fill With mode if the type is String, Mean if number.\r\n\t\t// and if inplace=true make the change in the original column else make the change in new one and return it.\r\n\t\tcolumn fillna(bool inplace = false);\r\n\r\n\t\t// fill NA Value, fill With Input Value,\r\n\t\t// and if inplace=true make the change in the original column else make the change in new one and return it.\r\n\t\tcolumn fillna(Object val, bool inplace = false);\r\n\t#pragma endregion\r\n\r\n\t#pragma region Statistical Operations\r\n\t\t// this region Methods is valid only for number operations.\r\n\r\n\t\t// get the minimum value.\r\n\t\tdouble min();\r\n\r\n\t\t// get the maximum value.\r\n\t\tdouble max();\r\n\r\n\t\t// calculate the sum of values\r\n\t\tdouble sum();\r\n\r\n\t\t// calculate the mean of values\r\n\t\tdouble mean();\r\n\r\n\t\t// calculate the standard divination.\r\n\t\t// with option if have mean as parameter to speedup the operation.\r\n\t\tdouble std(bool haveMean = false, double meanValue = 0);\r\n\r\n\t\t// calculate the standard divination, multi-thread version.\r\n\t\t// with option if have mean as parameter to speedup the operation.\r\n\t\tdouble std_2(bool haveMean = false, double meanValue = 0);\r\n\r\n\t\t// calculate the median, with option if the values sorted.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c17ed029-9479-44b9-b441-a8e9bc597b2f": {"__data__": {"id_": "c17ed029-9479-44b9-b441-a8e9bc597b2f", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c1dff4c5-6324-4968-abcf-f761e1d6a0b9", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "daf8a17ee9ec0f7591f38e411f44e1b66ce8ad1fe5af17b0abcf046d48304759", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n// calculate the median, with option if the values sorted.\r\n\t\tdouble median(bool sorted = false, vector<double> optionalValues = {});\r\n\r\n\t\t// calculate the mode(most frequent value), with option of values counts.\r\n\t\tObject mode(bool with_valu_count = false, unordered_map<Object, int> value_counts_ = {});\r\n\r\n\r\n\t\t// Calculate the correlation between this column and another.\r\n\t\tdouble corr(\r\n\t\t\tcolumn& other,\r\n\t\t\tbool with_means = false, double mean_x = 0, double mean_y = 0,\r\n\t\t\tbool with_stds  = false, double std_x  = 0, double std_y  = 0);\r\n\r\n\t\t// Calculate Quantile\r\n\t\tdouble quantile(float q, bool withInSortedVec = false, vector<double> sortedValues = {});\r\n\t\tdouble quantile_2(float q, vector<double>& sortedValues, bool withInSortedVec = false);\r\n\r\n\t\t// Apply a function to rolling windows.\r\n\t\tcolumn rolling(int window, StatFun  func);\r\n\r\n\t\t// Function for intervals.\r\n\t\tcolumn for_each_interval(int interval_size, StatFun func);\r\n\r\n\t\t// Difference calculation across elements.\r\n\t\tcolumn diff(int periods = 1, string change_func = \"normal\");\r\n\r\n\t\t// Inline methods for statistical calculations on subsets.\r\n\t\tstatic inline Object mean  (const vector<Object>& values_, size_t start, size_t end);\r\n\t\tstatic inline Object std   (const vector<Object>& values_, size_t start, size_t end);\r\n\t\tstatic inline Object mode  (const vector<Object>& values_, size_t start, size_t end);\r\n\t\tstatic inline Object sum   (const vector<Object>& values_, size_t start, size_t end);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1495, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9731ba07-c0e2-4950-bafd-6a926bc5a864": {"__data__": {"id_": "9731ba07-c0e2-4950-bafd-6a926bc5a864", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "64106a82-9b59-4f60-82cd-c682b8a70d56", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "7e0b8d0ac30eb3fcde908d9976657f69d44e5122e77cad6a02806e07085fbd8b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\nstatic inline Object sum   (const vector<Object>& values_, size_t start, size_t end);\r\n\t\tstatic inline Object median(      vector<Object>& values_, size_t start, size_t end);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Outliers Detection\r\n\r\n\t\t// Detect and remove outliers based on z-score threshold `m`.\r\n\t\tcolumn remove_outliers(double m = 2.0, bool inplace = false);\r\n\t\tset<int>& remove_get_outliers_idxs(double m = 2.0);\r\n\t\tset<int> get_outliers_idxs(double m = 2.0);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region String Operations\r\n\r\n\t\t// Transformations for string elements in the column.\r\n\t\t// Convert to lowercase.\r\n\t\tcolumn to_lw(); \r\n\r\n\t\t// Convert to uppercase.\r\n\t\tcolumn to_up(); \r\n\r\n\t\t// Convert to title case.\r\n\t\tcolumn to_title(); \r\n\r\n\t\t// Remove leading/trailing whitespace.\r\n\t\tcolumn strip(); \r\n\r\n\t\t// Search and pattern extraction.\r\n\t\t// Indexes of elements containing a substring.\r\n\t\tset<int> contains(string target);\r\n\r\n\t\t// Extract regex matches.\r\n\t\tcolumn str_extract_pattern(const string& pattern);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Conversion\r\n\r\n\t// converts values to Double Number if the column not Number.\r\n\tcolumn to_num (bool inplace=false);\r\n\r\n\t// converts values to Strings\r\n\tcolumn to_str (bool inplace=false);\r\n\r\n\t// converts values to dates\r\n\tcolumn to_date(bool inplace=false, DateFormat dateformat=DateFormat::AUTO);\r\n\tstatic column to_date(column col, DateFormat dateFormate);\r\n\r\n\t// concerts values to date attributes like (date_year, date_month, date_day)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1516, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55bde1b2-b329-431f-85a4-0c1b04099010": {"__data__": {"id_": "55bde1b2-b329-431f-85a4-0c1b04099010", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "da136a53-3d61-49af-9fbc-5c05208d11de", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6b1177169aaa0a4589b3eef011f464ddf97c8094435d4ef8492eebe5495bb31f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n// concerts values to date attributes like (date_year, date_month, date_day)\r\n\tcolumn to_date_attr(bool inplace, Dtype date_attr_type);\r\n\r\n\tcolumn to_date_year (bool inplace = false);\r\n\tcolumn to_date_month(bool inplace = false);\r\n\tcolumn to_date_day  (bool inplace = false);\r\n\r\n\t// converts all values to New Data type as Parameter\r\n\t// and if inplace = true converts the this.values and return void default column. \r\n\t// inplace = false converts copy of column's values and return it. \t \r\n\tcolumn to_type(Dtype new_type, bool inplace = false);\r\n\r\n\t// Get New Container to column's values\r\n\t// put the values in set and get it.\r\n\tset<Object> to_set();\r\n\t// put the values in unordered set and return.\r\n\tunordered_set<Object> to_uset();\r\n\r\n#pragma endregion\r\n\r\n\t#pragma region \"Info About Column's Data\"\r\n\r\n\t// generate description for column data based on it's data type. \r\n\t// return map name of statistic as key and it's value.\r\n\tunordered_map<string, Object> describe();\r\n\r\n\t// get the values of statistics based on column's type.\r\n\tvector<Object> getDescribeObjectValues(Dtype include = Dtype::NA);\r\n\r\n\t// print describe table \r\n\tvoid describe_print();\r\n\r\n\t// for each value count how much in all values\r\n\tunordered_map<Object, int> value_count();\r\n\r\n\t// for each value count the percentage of it with respect of all values.\r\n\tunordered_map<Object, float> value_count_pct();\r\n\r\n\t// print table of value count and it's pct\r\n\tvoid value_count_print();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1477, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0ce329d6-ea59-4026-86d2-a68acf879c1c": {"__data__": {"id_": "0ce329d6-ea59-4026-86d2-a68acf879c1c", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b5f78e2b-6707-4f9f-b151-08655d360a9b", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b19bf3019523be27bb24229cfd0544e252db23f80314ec672bdf558a33971f2b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n// print table of value count and it's pct\r\n\tvoid value_count_print();\r\n\r\n\t// print table of value count and it's pct\r\n\tvoid value_count_pct_print();\r\n\r\n\t// get unique values of all values.\r\n\tunordered_set<Object> unique();\r\n\r\n\t// get size of unique values.\r\n\tint unique_count();\r\n\r\n\t// get size of NA values.\r\n\tint na_count();\r\n\r\n#pragma endregion\r\n\r\n\t#pragma region Alteration\r\n\r\n\t// drop value with index (inplace=true by defaults)\r\n\tvoid drop(int idx);\r\n\r\n\t// drop set of indexes at once.\r\n\tcolumn drop(set<int> indexes, bool inplace= false);\r\n\r\n\t// drop all indexes wheres it's values NA\r\n\tcolumn dropna(bool in_place = false);\r\n\r\n\t// add values of other column to this column and return th new one.\r\n\tcolumn concat(column othercol);\r\n\r\n\t// repeat the whole length of value number of times.\r\n\tcolumn repeat(int times);\r\n\r\n\t// repeat each value of all values number of times.\r\n\tcolumn repeat_for_each(int times);\r\n\r\n\t// get sample of values, with the size of output size, and seed number of random generator.\r\n\tcolumn sample(int size_, int seed = 0, bool with_replacement = 1);\r\n\r\n\t// get shuffled values in new column based on seed value. \r\n\tcolumn shuffle(int seed = 0);\r\n\r\n#pragma endregion\r\n\r\n\t#pragma region Sorting\r\n\t// sort values with user-defined class Named Sort\r\n\t// ascending by defaults, you can make revers=true to make it descending \r\n\t// use algo to specify which sorting algorithm used (see available ones in SortAlgo Enum).\r\n\t// this sort in copy of values.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1502, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33cf35c9-4093-4469-8ebc-c06b1a7ea77a": {"__data__": {"id_": "33cf35c9-4093-4469-8ebc-c06b1a7ea77a", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "72d90471-ef21-4160-bebc-8d3970f18b9b", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6c6e1e01a72ea111bb659da2dfa431879c38dd41d0e1a9230908d6ad4307a842", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n// this sort in copy of values.\r\n\tcolumn sortAndGetCol(bool revers = false, SortAlgo algo = SortAlgo::heap);\r\n\r\n\t// Same Above, and return the reordered indexes not the values.\r\n\tvector<int> sortAndGetIndexs(bool revers = false, SortAlgo algo = SortAlgo::heap);\r\n\r\n\t// Same Above, but Sort in this values, and don't return column.\r\n\tvoid sort(bool revers = false, SortAlgo algo = SortAlgo::heap);\r\n#pragma endregion\r\n\r\n\t#pragma region Algorithmic Methods\r\n\t// get kth element from the begin of the values (smallest to biggest) O(N) \r\n\t// this handle data as value bigger or smaller as value.\r\n\tObject kth_element(int k);\r\n\r\n\t// get one largest kth element. O(N)\r\n\tObject kth_largest_element(int k);\r\n\r\n\t// get one smallest kth element. O(N)\r\n\tObject kth_smallest_element(int k);\r\n\r\n\t// get many elements that are the most largest in the values. O(N) and insertion sort.\r\n\tcolumn kth_largest_elements(int k, bool reverse = false);\r\n\r\n\t// get many elements that are the most smallest in the values. O(N) and insertion sort.\r\n\tcolumn kth_smallest_elements(int k, bool reverse = false);\r\n\r\n\t// get kth top one category with respect to frequency in values. O(N) \r\n\tObject kth_top_cat(uint32_t k);\r\n\r\n\t// get kth lest one category with respect to frequency in values. O(N) \r\n\tObject kth_least_cat(uint32_t k);\r\n\r\n\t// get kth top many category with respect to frequency in values. O(N) and insertion sort.\r\n\tcolumn kth_top_cats(uint32_t k);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1456, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a9592903-191e-47d8-a2e0-e44e57319d98": {"__data__": {"id_": "a9592903-191e-47d8-a2e0-e44e57319d98", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1121d67d-f094-47cd-b8a5-1a9e70b648b8", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2534818e49856de86f48006ca2543c87dfa63f309a6d359441bdda54aa693e41", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\ncolumn kth_top_cats(uint32_t k);\r\n\r\n\t// get kth lest many category with respect to frequency in values. O(N) and insertion sort.\r\n\tcolumn kth_lest_cats(uint32_t k);\r\n\r\n\t// get max sub-sequence from numbers values O(NlogN).\r\n\tSubArrayBoundris maxSubSeq();\r\n\r\n\t// get min sub-sequence from numbers values O(NlogN).\r\n\tSubArrayBoundris minSubSeq();\r\n\r\n#pragma endregion\r\n\r\n\t#pragma region Duplication\r\n\r\n\tset<int> duplicated();\r\n\r\n\tcolumn drop_duplicated(bool inplace = false);\r\n\r\n#pragma endregion\r\n\r\n\t#pragma region Handling Memory\r\n\r\n\t// get total Column size in memory.\r\n\tsize_t get_mem_size();\r\n\r\n\t// convert the column dtype to most suitable dtype based on it's range values or data types.\r\n\t// if with_mixed_type = true, enable the values have different data type.\r\n\t// if with_mixed_type = false, get max suitable data type and make converts all values into it.\r\n\tvoid optimiz_mem(bool with_mixed_type = true);\r\n\r\n#pragma endregion\r\n\r\n\t#pragma region Apply\r\n\r\n\t\t// Apply user-defined function\r\n\t\tcolumn apply(std::function<Object(const Object&)> func);\r\n\r\n\t\t// Parallel Apply user-defined function\r\n\t\tvoid papply(const std::function<Object(const Object&)>& func);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Filtering\r\n\r\n\t\t// take many indexes and get values with intersection of them.\r\n\t\tcolumn filter(vector<set<int>>& indexes);\r\n\r\n\t\t// get the values of this indexes.\r\n\t\tcolumn filter(set<int>& indexes);\r\n\r\n\t\t// filter values by user function with Object value and get the matched indexes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1c79a8c9-260d-4a8d-801f-2ae08e511f06": {"__data__": {"id_": "1c79a8c9-260d-4a8d-801f-2ae08e511f06", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fa21f75b-45a8-450b-837f-ff4a21788c16", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "55833c0c2b8060ba660606c90e1497f9c1513ac26bef3be832e2780179f34aad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n// filter values by user function with Object value and get the matched indexes.\r\n\t\tset<int> filterByConditionIdx(std::function<bool(const Object&)>condition);\r\n\r\n\t\t// filter values by user function with Object value and get the matched values in column.\r\n\t\tcolumn filterByCondition(std::function<bool(const Object&)>condition);\r\n\r\n\t\t// filter values by user function with Object value and current idx and get the matched indexes.\r\n\t\tset<int> filterByConditionIdx(std::function<bool(const size_t idx, const Object&)>condition);\r\n\r\n\t\t// filter values by user function with Object value and current idx get the matched values in column.\r\n\t\tcolumn filterByCondition(std::function<bool(const size_t idx, const Object&)>condition);\r\n\r\n\t\t// get values' indexes that in input vector.\r\n\t\ttemplate<typename Container>\r\n\t\tset<int> isin(const Container& invalues,\r\n\t\t\ttypename std::enable_if_t<is_iterable_container<Container>::value>* = nullptr);\r\n\r\n\t\tset<int> isin(std::initializer_list<Object> invalues);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Comparesion Operators\r\n\r\n\t\tset<int> operator < (Object value);\r\n\t\tset<int> operator > (Object value);\r\n\r\n\t\tset<int> operator <= (Object value);\r\n\t\tset<int> operator >= (Object value);\r\n\r\n\t\tset<int> operator == (Object value);\r\n\r\n\t\tvector<bool> operator == (column other);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Arthmatic Operators\r\n\r\n\t\tcolumn operator + (Object other);\r\n\t\tcolumn operator - (Object other);\r\n\t\tcolumn operator * (Object other);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "98dc2280-3688-4a27-b0ad-9fa1a4675a50": {"__data__": {"id_": "98dc2280-3688-4a27-b0ad-9fa1a4675a50", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f3651a62-81d3-43bc-84f2-80e66bfd05dd", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4b7feed16a6fe7ca1ff37e6efa3d79c9bf927bae4d972fb18838756895533a29", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\ncolumn operator - (Object other);\r\n\t\tcolumn operator * (Object other);\r\n\t\tcolumn operator / (Object other);\r\n\t\tcolumn operator % (Object other);\r\n\r\n\t\tcolumn operator + (column other);\r\n\t\tcolumn operator - (column other);\r\n\t\tcolumn operator * (column other);\r\n\t\tcolumn operator / (column other);\r\n\t\tcolumn operator % (column value);\r\n\r\n\t\tvoid operator += (Object other) {\r\n\t\t\tvalues = calc('+', other);\r\n\t\t}\r\n\t\tvoid operator -= (Object other) {\r\n\t\t\tvalues = calc('-', other);\r\n\t\t}\r\n\t\tvoid operator *= (Object value) {\r\n\t\t\tvalues = calc('*', value);\r\n\t\t}\r\n\t\tvoid operator /= (Object value) {\r\n\t\t\tvalues = calc('/', value);\r\n\t\t}\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Random Generating Values\r\n\r\n\t\t// generate random numbers as column.\r\n\t\tstatic column rand_nums(int size, int max, int min = 0, unsigned int seed = 0);\r\n\r\n\t#pragma endregion\r\n\t\r\n\t#pragma region utilities\r\n\r\n\t\t\t// useful while printing \r\n\t\t\tvoid calc_max_str_val_len();\r\n\r\n\t#pragma endregion\r\n\r\n\tfriend ostream& operator<<(ostream& os, column col)\r\n\t{\r\n\t\tos << \"[\";\r\n\t\tfor (int i = 0; i < col.size; i++)\r\n\t\t{\r\n\t\t\tif (i < col.size - 1) os << col.values[i] << \", \";\r\n\t\t\t\r\n\t\t\telse os << col.values[i];\r\n\t\t\t\r\n\t\t}\r\n\t\tos << \"]\";\r\n\t\treturn os;\r\n\t}\r\n};\r\n\r\ninline Object column::sum(const std::vector<Object>& values_, size_t start, size_t end)\r\n{\r\n\tif (start >= end || end > values_.size()) {\r\n\t\tthrow std::invalid_argument(\"Invalid indexes\");\r\n\t}\r\n\r\n\tdouble sum_ = 0;\r\n\tfor (size_t i = start; i < end; ++i) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1489, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b5a46ec2-314f-4e75-8602-ef6076e0c47a": {"__data__": {"id_": "b5a46ec2-314f-4e75-8602-ef6076e0c47a", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "92aaf5a3-585f-4001-aef4-05541309319d", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "254bf0bbcd6f1c94a2c0cafde6b99d40d6b9eb729da9091c09a2f58c4863dce0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n}\r\n\r\n\tdouble sum_ = 0;\r\n\tfor (size_t i = start; i < end; ++i) {\r\n\t\tif (values_[i].secType != Dtype::NUMBER) continue;\r\n\t\tsum_ += values_[i].value_num();\r\n\r\n\t}\r\n\treturn Object(sum_);\r\n}\r\n\r\ninline Object column::mean(const std::vector<Object>& values_, size_t start, size_t end)\r\n{\r\n\tif (start >= end || end > values_.size()) {\r\n\t\tthrow std::invalid_argument(\"Invalid indexes\");\r\n\t}\r\n\r\n\tdouble sum_ = 0;\r\n\tfor (size_t i = start; i < end; i++)\r\n\t{\r\n\t\tif (values_[i].secType != Dtype::NUMBER) continue;\r\n\t\tsum_ += values_[i].value_num();\r\n\r\n\t}\r\n\treturn Object(sum_ / (double)(end - start));\r\n}\r\n\r\ninline Object column::std(const std::vector<Object>& values_, size_t start, size_t end)\r\n{\r\n\tif (start >= end || end > values_.size() || end - start < 2) {\r\n\t\tthrow std::invalid_argument(\"Invalid indexes or sample size must be at least 2 for std calculation\");\r\n\t}\r\n\tdouble mean_value = mean(values_, start, end).value_num();\r\n\r\n\tdouble temp_diff;\r\n\tdouble sum_sq_diff = 0;\r\n\r\n\tfor (size_t i = start; i < end; i++)\r\n\t{\r\n\t\tif (values_[i].secType != Dtype::NUMBER) continue;\r\n\t\ttemp_diff = values_[i].value_num() - mean_value;\r\n\t\tsum_sq_diff += temp_diff * temp_diff;\r\n\r\n\t}\r\n\r\n\treturn Object(std::sqrt(sum_sq_diff / (end - start - 1)));\r\n}\r\n\r\ninline Object column::median(vector<Object>& values_, size_t start, size_t end)\r\n{\r\n\tif (start >= end || end > values_.size()) {\r\n\t\tthrow std::invalid_argument(\"Invalid indexes\");\r\n\t}\r\n\r\n\tstd::sort(values_.begin() + start, values_.begin() + end);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1503, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "803ed9e8-b633-4fb3-a1de-93de761978b3": {"__data__": {"id_": "803ed9e8-b633-4fb3-a1de-93de761978b3", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d225eaf8-cbcd-4a0a-a8bd-4939b398a87f", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2765b77ba9d268debef433c7185840779685375eeb97747877f5da513784ab53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\n}\r\n\r\n\tstd::sort(values_.begin() + start, values_.begin() + end);\r\n\r\n\tsize_t mid = start + (end - start) / 2;\r\n\tif ((end - start) % 2 == 0) {\r\n\t\treturn Object((values_[mid - 1] + values_[mid]) / 2.0);\r\n\t}\r\n\telse {\r\n\t\treturn values_[mid];\r\n\t}\r\n}\r\n\r\ninline Object column::mode(const std::vector<Object>& values_, size_t start, size_t end)\r\n{\r\n\tif (start >= end || end > values_.size()) {\r\n\t\tthrow std::invalid_argument(\"Invalid indexes\");\r\n\t}\r\n\r\n\tstd::map<Object, size_t> counts;\r\n\tObject max_element = values_[start];\r\n\tsize_t max_count = counts[max_element];\r\n\r\n\tfor (size_t i = start; i < end; ++i) {\r\n\r\n\t\tcounts[values_[i]]++;\r\n\r\n\t\tif (counts[values_[i]] > max_count) {\r\n\r\n\t\t\tmax_count = counts[values_[i]];\r\n\t\t\tmax_element = values_[i];\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn max_element;\r\n}\r\n\r\n\r\n\r\n#endif // !Column_CLS\r\n\r\n#define CHECK_NUMBER_METHOUDS(obj) \\\r\n    assert(obj.secType == Dtype::NUMBER && \"This method only used for Numbers only\")\r\n\r\n#define CHECK_STRING_METHOUDS(obj) \\\r\n    assert(obj.secType == Dtype::STRING && \"This method only used for Strings only\")\r\n\r\n#define STRING_FUNCTION(col, func) \\\r\ndo { \\\r\n    CHECK_STRING_METHOUDS((col)); \\\r\n    column new_column = col; \\\r\n    for (Object& val : new_column.values) { \\\r\n        val = val.func(); \\\r\n    } \\\r\n    return new_column; \\\r\n} while(0)\r\n\r\n\r\n#define COLUMN_COMPARE_OP(this_ptr, value, op) \\\r\n    [&]() -> set<int> { \\\r\n        assert((this_ptr) != nullptr && \"Column pointer cannot be null\"); \\", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1478, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b74129dd-563f-41e2-b047-996cd1f0040d": {"__data__": {"id_": "b74129dd-563f-41e2-b047-996cd1f0040d", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c4b7a296-d9b3-48e1-b5f5-267544c79b27", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "bbc49c98d77971e3477bfc83cb5c33230dc7b12febd62884058736183586a5cb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\nassert((this_ptr) != nullptr && \"Column pointer cannot be null\"); \\\r\n        assert(((this_ptr)->secType == (value).secType && (value).type != Dtype::NA) && \"Invalid comparison types\"); \\\r\n        set<int> indexes; \\\r\n        const auto* const _col = (this_ptr); \\\r\n        const auto& _val = (value); \\\r\n        for (int i = 0; i < _col->size; i++) { \\\r\n            if (_col->values[i].type == Dtype::NA) continue; \\\r\n            if (_col->values[i] op _val) indexes.insert(i); \\\r\n        } \\\r\n        return indexes; \\\r\n    }()\r\n\r\n\r\n#define COLUMN_ARITHMETICS_SCALAR_OP(this_ptr, other, op) \\\r\n    [&]() -> column { \\\r\n        column new_col = (*this_ptr);\\\r\n        \\\r\n        const auto* const _col = (this_ptr); \\\r\n        const auto& _other = (other); \\\r\n        \\\r\n        for (int i = 0; i < _col->size; i++) { \\\r\n            if (_col->values[i].type == Dtype::NA) { \\\r\n                new_col.values[i] = Object(); \\\r\n            } else { \\\r\n                new_col.values[i] = _col->values[i] op _other; \\\r\n            } \\\r\n        } \\\r\n        return new_col; \\\r\n    }()\r\n\r\n\r\n#define COLUMN_ARITHMETICS_OP_COLUMN(col1_ptr, col2_ptr, op) \\\r\n    [&]() -> column { \\\r\n        assert((col1_ptr)->secType == (col2_ptr)->secType && \"two columns must be the same type\"); \\\r\n        assert((col1_ptr)->size == (col2_ptr)->size && \"two columns must be the same length\"); \\\r\n        \\\r\n        const auto* const _col1 = (col1_ptr); \\\r\n        const auto* const _col2 = (col2_ptr); \\", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "025ae5c5-f4f8-497b-a870-366438ba5540": {"__data__": {"id_": "025ae5c5-f4f8-497b-a870-366438ba5540", "embedding": null, "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6bb2cd90-4ade-4bfd-9895-5961a43e2f66", "node_type": "4", "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "29d1155c1d6d4af9950784a59faa4481070a941606c03074a6ca8ed30e689803", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: column.h\nconst auto* const _col1 = (col1_ptr); \\\r\n        const auto* const _col2 = (col2_ptr); \\\r\n        \\\r\n        column new_col = *_col1; \\\r\n        new_col.set_name(\"(\" + _col1->name + \")\" + \" \" #op \" \" + \"(\" + _col2->name + \")\"); \\\r\n        new_col.type = std::max(_col1->type, _col2->type); \\\r\n        \\\r\n        for (int i = 0; i < _col1->size; i++) { \\\r\n            if (_col1->values[i].type != Dtype::NA && _col2->values[i].type != Dtype::NA) { \\\r\n                new_col.values[i] = _col1->values[i] op _col2->values[i]; \\\r\n            } \\\r\n        } \\\r\n        return new_col; \\\r\n    }()\r\n\r\ntemplate<typename Container>\r\ninline set<int> column::isin(const Container& invalues, typename std::enable_if_t<is_iterable_container<Container>::value>*)\r\n{\r\n\tunordered_set<Object> invalues_uset(invalues.begin(), invalues.end());\r\n\tset<int> idxs;\r\n\tconst auto uset_end = invalues_uset.end();\r\n\r\n\tuint32_t i = 0;\r\n\tfor (const Object& value : values) {\r\n\t\tif (invalues_uset.find(value) != uset_end) {\r\n\t\t\tidxs.insert(i);\r\n\t\t}\r\n\t\t++i;\r\n\t}\r\n\treturn idxs;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1072, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "feb7bfc3-c537-4b4b-8f8f-69c68ff923b9": {"__data__": {"id_": "feb7bfc3-c537-4b4b-8f8f-69c68ff923b9", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c39686df-3202-475a-a323-ce5ea6a5572c", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ca353ed30ff1b3144a15c0224f68d4fbeef1f09aa8de5c0889b94cf02136c596", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n#include \"dataFrame.h\"\r\n\r\n// Constructors\r\ndataFrame::dataFrame()\r\n{\r\n\tsize = 0;\r\n\tcolumns = {};\r\n\tdata = {};\r\n}\r\ndataFrame::dataFrame(string path, bool mixed_type) {\r\n\r\n\tauto startTime = std::chrono::high_resolution_clock::now();\r\n\tconst int NUMBER_OF_LINES = count_file_lines(path);\r\n\tthis->path = path;\r\n\tint idx = 0;\r\n\r\n\tfstream file{ path };\r\n\tassert(file.is_open() && \"file can't open\");\r\n\r\n\tcout << \"Load data...\\n\";\r\n\tstring line;\r\n\tgetline(file, line);\r\n\tistringstream row(line);\r\n\tstring val;\r\n\r\n\t// reading first row always as columns names.\r\n\tfor (val; getline(row, val, ',');) {\r\n\t\tcolumn tempCol(NUMBER_OF_LINES, mixed_type);\r\n\t\ttempCol.name = val;\r\n\t\tdata[val] = tempCol;\r\n\t\tcolumns.push_back(val);\r\n\t}\r\n\r\n\t// and other rows are values. \r\n\tfor (line; getline(file, line);)\r\n\t{\r\n\t\tistringstream row(line);\r\n\t\tfor (val; getline(row, val, ',');) {\r\n\r\n\t\t\tif (val.length() == 0) { data[columns[idx]].append(Object(   )); }\r\n\t\t\telse\t\t\t\t   { data[columns[idx]].append(Object(val)); }\r\n\r\n\t\t\tidx++;\r\n\t\t}\r\n\t\tidx = 0;\r\n\t}\r\n\r\n\tfile.close();\r\n\r\n\tsize = data.begin()->second.len();\r\n\r\n\tstd::chrono::milliseconds duration = std::chrono::duration_cast<std::chrono::milliseconds>\r\n\t\t(std::chrono::high_resolution_clock::now() - startTime); // Calculate the duration in microseconds\r\n\r\n\tcout << \"Load data done.\\n\";\r\n\tcout << \"Time to load data taken: \" << duration.count() / 1000.0 << \" sec\" << std::endl; // Print the time taken\r\n}\r\ndataFrame::dataFrame(vector<column> cols)\r\n{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1504, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b4b5fe2d-f752-4fb2-bdf0-c424b8853502": {"__data__": {"id_": "b4b5fe2d-f752-4fb2-bdf0-c424b8853502", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a55c2433-1bed-42e2-b400-bde775997f03", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "761bb1a8abce145bfab7320db968d3c1ab980d1ec8ab0819a458701fef5409c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n}\r\ndataFrame::dataFrame(vector<column> cols)\r\n{\r\n\tif (is_same_length(cols) == false) { make_cols_same_length(cols); }\r\n\tuint16_t col_counter = 0;\r\n\tfor (column& col : cols) {\r\n\t\tif (col.name == \"NA\") { col.name = \"col_\" + to_string(col_counter++); }\r\n\t\tdata[col.name] = col;\r\n\t}\r\n\r\n\tcolumns = vector<string>(cols.size());\r\n\tint idx = 0;\r\n\tfor (column col : cols) {\r\n\r\n\t\tdata[col.name] = col;\r\n\t\tcolumns[idx++] = col.name;\r\n\t}\r\n\tsize = cols[0].size;\r\n}\r\ndataFrame::dataFrame(unordered_map<string, column> input_data)\r\n{\r\n\tsize = input_data.begin()->second.size;\r\n\r\n\tfor (auto col : input_data) {\r\n\t\tcolumns.emplace_back(col.first);\r\n\t\tcol.second.set_name(col.first);\r\n\t\tdata.emplace(col.first, col.second);\r\n\t}\r\n}\r\ndataFrame::dataFrame(std::initializer_list<std::pair<const std::string, column>> init)\r\n{\r\n\tfor (auto pair : init) {\r\n\t\tcolumns.push_back(pair.first);\r\n\t\tpair.second.set_name(pair.first);\r\n\t\tdata.emplace(pair.first, pair.second);\r\n\t}\r\n\tsize = data.begin()->second.len();\t\r\n}\r\ndataFrame::dataFrame(unordered_map<string, column> input_data, vector<string> columns)\r\n{\r\n\tthis->columns = columns;\r\n\r\n\tsize = input_data.begin()->second.size;\r\n\r\n\tfor (auto col : columns) {\r\n\t\tinput_data[col].set_name(col);\r\n\t\tdata.emplace(col, input_data[col]);\r\n\t}\r\n}\r\ndataFrame::dataFrame(unordered_map<string, vector<Object>> input_data)\r\n{\r\n\tsize = input_data.begin()->second.size();\r\n\tfor (auto col : input_data) {\r\n\t\tcolumns.emplace_back(col.first);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b3c2970d-810b-4a8b-9b52-a4d43972dd60": {"__data__": {"id_": "b3c2970d-810b-4a8b-9b52-a4d43972dd60", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3a26d13d-c3fe-4e66-a13b-69e1125f9429", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ec2c3e6a1561e11624d966270cfc00dff475a7de1e66ab090cd16f5f7db8fd81", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nfor (auto col : input_data) {\r\n\t\tcolumns.emplace_back(col.first);\r\n\t\tdata.emplace(col.first, column(col.first, col.second));\r\n\t}\r\n}\r\ndataFrame::dataFrame(unordered_map<string, vector<Object>> input_data, vector<string> columns)\r\n{\r\n\tthis->columns = columns;\r\n\r\n\tsize = input_data.begin()->second.size();\r\n\tfor (auto col : columns) {\r\n\t\tdata.emplace(col, column(col, input_data[col]));\r\n\t}\r\n}\r\n\r\ndataFrame& dataFrame::operator=(const dataFrame& other) {\r\n\tif (this == &other)\r\n\t\treturn *this;\r\n\r\n\tthis->size = other.size;\r\n\tthis->columns = other.columns;\r\n\tthis->data = other.data;\r\n\r\n\treturn *this;\r\n}\r\n\r\n/////////////////////////////////////\r\n// Data Accessing\r\ncolumn& dataFrame::operator[](string col) {\r\n\tassert(is_valid_column(col) && \"this Column name is not found\");\r\n\treturn data[col];\r\n}\r\nconst column& dataFrame::operator[](string col) const {\r\n\tassert(is_valid_column(col) && \"Column name is not found\");\r\n\treturn data.at(col); // Use .at() to ensure bounds checking and const correctness}\r\n}\r\n\r\ndataFrame  dataFrame::operator[](vector<string> colsNames) {\r\n\r\n\tfor (string col : colsNames) {\r\n\t\tif (!is_valid_column(col)) {\r\n\t\t\tstd::cout << \"colName :\" << col; assert(false && \"Column name is not found\");\r\n\t\t}\r\n\t}\r\n\tvector<column> selectedCols(colsNames.size());\r\n\r\n\tfor (int i = 0; i < colsNames.size(); i++)\r\n\t{\r\n\t\tselectedCols[i] = data[colsNames[i]];\r\n\t}\r\n\treturn dataFrame(selectedCols);\r\n}\r\ndataFrame  dataFrame::operator[](initializer_list<string> colsNames) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1507, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36195c07-fc0c-4a14-9f9d-67405e286b46": {"__data__": {"id_": "36195c07-fc0c-4a14-9f9d-67405e286b46", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3ca0527b-de9c-42a1-9ace-e747fd467139", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "811092e9a58ac4fa4a36f40c221f605f23c60183fd504ad6941743aaa0f23a8f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n}\r\ndataFrame  dataFrame::operator[](initializer_list<string> colsNames) { \r\n\treturn (*this)[vector<string>(colsNames.begin(), colsNames.end())]; \r\n};\r\n\r\n#define FILTER_DF_BY_INDEXES(columns, indexes) \\\r\n    std::vector<column> filterdCols((columns).size()); \\\r\n    int idx = 0; \\\r\n    for (const std::string& colname : (columns)) { \\\r\n        filterdCols[idx++] = data[colname][indexes]; \\\r\n    } \\\r\n    return dataFrame(filterdCols);\r\n\r\ndataFrame dataFrame::operator[](   set<int> indexes) { FILTER_DF_BY_INDEXES(columns, indexes); }\r\ndataFrame dataFrame::operator[](vector<int> indexes) { FILTER_DF_BY_INDEXES(columns, indexes); }\r\ndataFrame dataFrame::operator[](initializer_list<int> indexes) {\r\n\tFILTER_DF_BY_INDEXES(columns, vector<int>(indexes.begin(), indexes.end())); \r\n}\r\n\r\n/////////////////////////////////////\r\n// Information About the Dataframe\r\n\r\nvector<int> dataFrame::shape()\r\n{\r\n\treturn { data.begin()->second.size, (int)data.size() };\r\n}\r\n\r\nunordered_map<Dtype, uint16_t> dataFrame::dtype_count()\r\n{\r\n\r\n\tunordered_map<Dtype, uint16_t> counter;\r\n\tfor (const auto& col : data) {\r\n\t\t++counter[col.second.type];\r\n\t}\r\n\treturn counter;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1178, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "16bc2399-7de0-454f-b320-e3934b922f71": {"__data__": {"id_": "16bc2399-7de0-454f-b320-e3934b922f71", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "778cc87b-1fc4-4d08-b45b-ac3484fb24b6", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d315cfe5e2f87cbcfc95212da19ceed2a75d57ad7e1550d8e60f9b990222633c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid dataFrame::info() {\r\n\r\n\tomp_set_num_threads(1);\r\n\r\n\tvector<Object> property_;\r\n\tproperty_.emplace_back(\"Range Index\");\r\n\tproperty_.emplace_back(\"Data Columns\");\r\n\tproperty_.emplace_back(\"DTypes\");\r\n\tproperty_.emplace_back(\"Memory Usage\");\r\n\r\n\tcolumn indext1(\r\n\t\t\"Property\",\r\n\t\tproperty_\r\n\t);\r\n\r\n\tint numberofcols = (int)columns.size();\r\n\r\n\tauto dtype_counter = this->dtype_count();\r\n\r\n\tstring types = \"\";\r\n\tfor (auto dt : dtype_counter) {\r\n\t\ttypes += Object::type_str(dt.first) + \"(\" + to_string(dt.second) + \"), \";\r\n\t}\r\n\r\n\ttypes = types.substr(0, types.length() - 2);\r\n\r\n\tvector<Object> values;\r\n\tvalues.emplace_back(to_string(data[columns[0]].size) + \" entries\");\r\n\tvalues.emplace_back(to_string(columns.size()) + \" columns\");\r\n\tvalues.emplace_back(types);\r\n\r\n\t//values.emplace_back(to_string((int)(filesize(path) / 1024.0)) + \" KB\");\r\n\r\n\tvalues.emplace_back(to_string((this->get_mem_size() / 1024.0)) + \" KB\");\r\n\r\n\tcolumn valt1(\"Value\", values);\r\n\r\n\tTable tab1({ indext1 ,valt1 });\r\n\ttab1.print();\r\n\r\n\r\n\tvector<Object> num_of_nonna_for_cols(numberofcols);\r\n\tvector<Object> num_of_na_for_cols(numberofcols);\r\n\tvector<Object> dtypevals(numberofcols);\r\n\tint numofna;\r\n\r\n\tcolumn tempCol;\r\n\r\n\tfor (int i = 0; i < numberofcols; i++)\r\n\t{\r\n\t\ttempCol = data[columns[i]];\r\n\r\n\t\tnumofna = (int)tempCol.naidxs().size();\r\n\r\n\t\tnum_of_nonna_for_cols[i] = Object(tempCol.size - numofna);\r\n\t\tnum_of_na_for_cols[i] = Object(numofna);\r\n\t\tdtypevals[i] = Object(tempCol.type_str());\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1500, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa516b43-8495-46bc-9d2e-451a7bc01e5b": {"__data__": {"id_": "aa516b43-8495-46bc-9d2e-451a7bc01e5b", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66b02433-a600-4ec4-97c2-b6a6afe1b473", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6bb936f3c18a53497fa7c99594c2d1cad77502a245c360d6aed053bb4c1889f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nnum_of_na_for_cols[i] = Object(numofna);\r\n\t\tdtypevals[i] = Object(tempCol.type_str());\r\n\t}\r\n\r\n\tcolumn indext2(\"Index\", Tools::gen_seq_obj(0, numberofcols));\r\n\r\n\tcolumn colname(\"Column\", Object::from_vector_string(columns));\r\n\r\n\tcolumn nonna(\"Non-Null Count\", num_of_nonna_for_cols);\r\n\tcolumn na(\"Null Count\", num_of_na_for_cols);\r\n\tcolumn dtypscol(\"DType\", dtypevals);\r\n\r\n\tTable tab2({ indext2 ,colname, nonna, na, dtypscol });\r\n\ttab2.print();\r\n\r\n\tomp_set_num_threads(omp_get_max_threads());\r\n\r\n}\r\n\r\ndataFrame dataFrame::describe(Dtype include) {\r\n\r\n\tomp_set_num_threads(2);\r\n\r\n\tvector<string> includedCols;\r\n\r\n\tvector<string> property_;\r\n\tif (include == Dtype::NA) {\r\n\t\tproperty_ = {\r\n\t\t\"mean\",\r\n\t\t\"std\",\r\n\t\t\"median\",\r\n\t\t\"min\",\r\n\r\n\t\t\"25%\",\r\n\t\t\"50%\",\r\n\t\t\"75%\",\r\n\t\t\"max\",\r\n\r\n\t\t\"unique\",\r\n\t\t\"top\",\r\n\t\t\"freq\"\r\n\t\t};\r\n\t\tincludedCols = columns;\r\n\t}\r\n\r\n\telse if (include == Dtype::NUMBER) {\r\n\t\tproperty_ = {\r\n\t\t\"mean\",\r\n\t\t\"std\",\r\n\t\t\"median\",\r\n\t\t\"min\",\r\n\r\n\t\t\"25%\",\r\n\t\t\"50%\",\r\n\t\t\"75%\",\r\n\t\t\"max\",\r\n\t\t};\r\n\r\n\t\tincludedCols = this->get_num_cols();\r\n\t}\r\n\telse if (include == Dtype::STRING) {\r\n\r\n\t\tproperty_ = {\r\n\t\t\"unique\",\r\n\t\t\"top\",\r\n\t\t\"freq\"\r\n\t\t};\r\n\r\n\t\tincludedCols = get_str_cols();\r\n\t}\r\n\telse {\r\n\t\tassert(false && \"INVALID INCLUDE TYPE\");\r\n\t}\r\n\tvector<column> cols(includedCols.size() + 1);\r\n\r\n\tcols[0] = column(\"index\", Object::from_vector_string(property_));\r\n\r\n\tint n = (int)includedCols.size() + 1;\r\n#pragma omp parallel\r\n\t{\r\n\t\t// Use thread-private variables to store thread-specific indexes", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8eda3b05-0bcb-42dc-8b7c-cfabb55738ff": {"__data__": {"id_": "8eda3b05-0bcb-42dc-8b7c-cfabb55738ff", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2826eadd-fbf7-460b-8716-3c1cc7eabc90", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9a691f58d422cccc2a448671e2ab8e97eba441a2843b8e9cddf68a7a5a82ae70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n#pragma omp parallel\r\n\t{\r\n\t\t// Use thread-private variables to store thread-specific indexes\r\n#pragma omp for\r\n\t\tfor (int idx = 1; idx < n; ++idx) {\r\n\t\t\tconst std::string& colname = includedCols[idx - 1];\r\n\t\t\tcols[idx] = column(colname, data.at(colname).getDescribeObjectValues(include));\r\n\t\t}\r\n\t}\r\n\tomp_set_num_threads(omp_get_max_threads());\r\n\treturn dataFrame(cols);\r\n}\r\n\r\ndataFrame dataFrame::corr()\r\n{\r\n\r\n\tstruct CorrStruct {\r\n\t\tstring col1;\r\n\t\tstring col2;\r\n\t\tdouble corr;\r\n\t};\r\n\r\n\tunordered_map<string, double> means;\r\n\tunordered_map<string, double> stds;\r\n\r\n\r\n\tauto num_cols = this->get_num_cols();\r\n\tsize_t num_cols_size = num_cols.size();\r\n\r\n\r\n\tvector<Object> cols_names = Object::from_vector_string(num_cols);\r\n\tunordered_map<string, vector<Object>> cols_corrs;\r\n\tcols_corrs[\"ColsName\"] = cols_names;\r\n\r\n\r\n\tvector<CorrStruct> corrs;\r\n\tcorrs.reserve(num_cols_size * (num_cols_size + 1) / 2.0);\r\n\r\n\tfor (size_t i = 0; i < num_cols_size; i++)\r\n\t{\r\n\t\tfor (size_t j = i; j < num_cols_size; j++)\r\n\t\t{\r\n\r\n\t\t\tauto col1 = num_cols[i];\r\n\t\t\tauto col2 = num_cols[j];\r\n\t\t\tdouble corr_;\r\n\r\n\t\t\tif (col1 == col2) {\r\n\t\t\t\tcorr_ = 1.0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (means.find(col1) == means.end()) {\r\n\t\t\t\t\tmeans[col1] = data[col1].mean();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (means.find(col2) == means.end()) {\r\n\t\t\t\t\tmeans[col2] = data[col2].mean();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stds.find(col1) == stds.end()) {\r\n\t\t\t\t\tstds[col1] = data[col1].std_2(true, means[col1]);\r\n\t\t\t\t}\r\n\t\t\t\tif (stds.find(col2) == stds.end()) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e906416-1712-4807-bd55-223a0328e8f3": {"__data__": {"id_": "9e906416-1712-4807-bd55-223a0328e8f3", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "515f93f6-703a-4e6a-829e-b2fa6ef1c7ac", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "142a20d237e9394af8c43cf4d6ed37cd308789be18d2a231fe37fe1cc8ef5ada", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n}\r\n\t\t\t\tif (stds.find(col2) == stds.end()) {\r\n\t\t\t\t\tstds[col2] = data[col2].std_2(true, means[col2]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcorr_ = data[col1].corr(\r\n\t\t\t\t\tdata[col2],\r\n\t\t\t\t\ttrue, means[col1], means[col2],\r\n\t\t\t\t\ttrue, stds[col1], stds[col2]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (cols_corrs.find(col1) == cols_corrs.end()) {\r\n\t\t\t\tcols_corrs[col1] = vector<Object>();\r\n\t\t\t\tcols_corrs[col1].reserve(num_cols_size);\r\n\t\t\t}\r\n\r\n\t\t\tif (cols_corrs.find(col2) == cols_corrs.end()) {\r\n\t\t\t\tcols_corrs[col2] = vector<Object>();\r\n\t\t\t\tcols_corrs[col2].reserve(num_cols_size);\r\n\t\t\t}\r\n\r\n\t\t\tcols_corrs[col1].emplace_back(corr_);\r\n\r\n\t\t\tif (col1 != col2) {\r\n\t\t\t\tcols_corrs[col2].emplace_back(corr_);\r\n\t\t\t}\r\n\r\n\t\t\tcorrs.push_back({ col1, col2, corr_ });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvector<column> cols_;\r\n\tcols_.reserve(num_cols_size + 1);\r\n\r\n\tcols_.emplace_back(column(\"ColsName\", cols_names));\r\n\r\n\tfor (string colName : num_cols) {\r\n\t\tcols_.emplace_back(column(colName, cols_corrs[colName]));\r\n\t}\r\n\r\n\r\n\tdataFrame corr_df(cols_);\r\n\r\n\treturn corr_df;\r\n}\r\n\r\n////////////////////////////////////\r\n// Getters/Setters\r\n\r\nvector<string> dataFrame::get_num_cols () { return get_sectype_cols(Dtype::NUMBER); }\r\nvector<string> dataFrame::get_str_cols () { return get_sectype_cols(Dtype::STRING); }\r\nvector<string> dataFrame::get_date_cols() { return get_sectype_cols(Dtype::DATE  ); }\r\n\r\nvector<string> dataFrame::get_sectype_cols(Dtype cols_sectype)\r\n{\r\n\tvector<string> num_cols;\r\n\tfor (string col_name : columns) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dee6e763-e4e2-47ff-99ec-f8a7098b79da": {"__data__": {"id_": "dee6e763-e4e2-47ff-99ec-f8a7098b79da", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "85e919df-9c3e-4ef8-819d-3b1cb93f1c75", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ae2ceffe1ec409e1c05edb44d269f8fd327b829621e77f5ab35437bb2e9bee88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n{\r\n\tvector<string> num_cols;\r\n\tfor (string col_name : columns) {\r\n\t\tif (data[col_name].secType == cols_sectype) {\r\n\t\t\tnum_cols.push_back(col_name);\r\n\t\t}\r\n\t}\r\n\treturn num_cols;\r\n}\r\n\r\ndataFrame dataFrame::add_col(column col, bool inplace) {\r\n\r\n\tif (inplace) {\r\n\t\tdata[col.name] = col;\r\n\t\tcolumns.push_back(col.name);\r\n\t\treturn dataFrame();\r\n\t}\r\n\tdataFrame new_df = *this;\r\n\tnew_df.data[col.name] = col;\r\n\tnew_df.columns.push_back(col.name);\r\n\treturn new_df;\r\n}\r\n\r\nsize_t dataFrame::get_mem_size()\r\n{\r\n\tsize_t total_mem_size = 0;\r\n\tfor (auto col : data) {\r\n\t\ttotal_mem_size += col.second.get_mem_size();\r\n\t}\r\n\r\n\treturn total_mem_size;\r\n}\r\n\r\ndataFrame dataFrame::range(int from, int to)\r\n{\r\n\tbool valid_range = from >= 0 && from <= size && to >= from && to <= size;\r\n\tif (!valid_range) {\r\n\t\tcout << \"Invalid range: from=\" << from << \", to=\" << to << \" and your size=\" << size << endl; assert(0);\r\n\t\treturn dataFrame();\r\n\t}\r\n\treturn (*this)[Tools::gen_seq_int(from, to)];\r\n}\r\ndataFrame dataFrame::head(int n) {\r\n\r\n\treturn range(0, n);\r\n}\r\ndataFrame dataFrame::tail(int n) {\r\n\treturn  this->range(this->size - n, this->size);\r\n}\r\n\r\nunordered_map<string, Object> dataFrame::iloc(int idx) {\r\n\r\n\tunordered_map<string, Object> recored;\r\n\tfor (auto col : columns) {\r\n\t\trecored[col] = data[col][idx];\r\n\t}\r\n\treturn recored;\r\n}\r\nObject dataFrame::   iloc(int r, int c) {\r\n\r\n\treturn data[columns[c]][r];\r\n}\r\ndataFrame dataFrame::iloc(vector<int> vrange, vector<int> hrange)\r\n{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1489, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "810ed5ba-6007-4b76-9b3e-8dc403b05917": {"__data__": {"id_": "810ed5ba-6007-4b76-9b3e-8dc403b05917", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6f23c2b4-233f-4d4e-91d6-d4a8f69466a6", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8173dc9af5e17320f54dce9a02097569ad3285b81b795632d0549d9c4b402522", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n}\r\ndataFrame dataFrame::iloc(vector<int> vrange, vector<int> hrange)\r\n{\r\n\tif ((vrange.size() != 2 || hrange.size() != 2) || \r\n\t\t(vrange[0] >= vrange[1]) || \r\n\t\t(hrange[0] >= hrange[1])) assert(false && \"Invalid Range\");\r\n\r\n\tvector<string> newColNames;\r\n\tfor (int i = hrange[0]; i < hrange[1]; i++) { newColNames.push_back(columns[i]); };\r\n\r\n\tvector<column> newColValue;\r\n\tfor (string colname : newColNames) {\r\n\t\tnewColValue.push_back(data[colname].range(vrange[0], vrange[1]));\r\n\t}\r\n\treturn dataFrame(newColValue);\r\n}\r\n\r\ndataFrame dataFrame::copy() { return *this; }\r\n\r\ndataFrame dataFrame::sample(int size_, int seed, bool with_replacement)\r\n{\r\n\treturn (*this)[Tools::rand_vec_nums(size_, this->size - 1, 0, seed, with_replacement)];\r\n}\r\n\r\ndataFrame dataFrame::shuffle(int seed)\r\n{\r\n\treturn (*this)[Tools::rand_vec_nums(size, this->size - 1, 0, seed, false)];\r\n}\r\n\r\n/////////////////////////////////////\r\n// print  //////////////////////////", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 970, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "79eb6b72-4683-4f13-a842-666e29b701ff": {"__data__": {"id_": "79eb6b72-4683-4f13-a842-666e29b701ff", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3b22d43b-5ee2-43b7-9298-f4e232a0c352", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f334447fb8c1958796227cacb3848d0d0093251ec25fb36841e85665c70b9a55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid dataFrame::p(bool printGenIndex) {\r\n\r\n\tint idx = 0,\r\n\t\tnewsize = (int)(printGenIndex ? columns.size() + 1 : columns.size());\r\n\r\n\tvector<column> tempCols(newsize);\r\n\r\n\tif (printGenIndex) { tempCols[idx++] = column(\"Index\", Tools::gen_seq_obj(0, size)); }\r\n\r\n\tfor (string col : columns) { tempCols[idx++] = data[col]; }\r\n\r\n\tTable table(tempCols);\r\n\ttable.print();\r\n}\r\nvoid dataFrame::phead(int limit) { this->head(limit).p(); }\r\nvoid dataFrame::ptail(int limit) { this->tail(limit).p(); }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 519, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff9c3221-55d5-4c53-ba08-982b95444b1c": {"__data__": {"id_": "ff9c3221-55d5-4c53-ba08-982b95444b1c", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5611e91-5ca2-4f95-85b5-afa4c2fa4204", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8cd3032cc1ddd7f35c06a5ac81f426f081780bb2efd2702a2a28d04cb4b2ed83", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid dataFrame::ptail(int limit) { this->tail(limit).p(); }\r\nvoid dataFrame::cols_p() {\r\n\r\n\tcout << \"\\n[\"; for (auto name : columns) cout << name << \", \"; cout << \"]\\n\";\r\n}\r\n\r\n/////////////////////////////////////\r\n// Dealing with bad data\r\ninline void dataFrame::drop(int idx)\r\n{\r\n\tfor (string colname : columns) {\r\n\r\n\t\tdata[colname].values.erase(data[colname].values.begin() + idx);\r\n\t\t--data[colname].size;\r\n\t}\r\n\t--size;\r\n}\r\ninline void dataFrame::drop(set<int>& idxs)\r\n{\r\n\t// Get the number of columns\r\n\tint num_columns = (int)columns.size();\r\n\r\n\t// Parallelize the loop over columns using OpenMP\r\n\t#pragma omp parallel for\r\n\tfor (int i = 0; i < num_columns; ++i) {\r\n\t\tstring colname = columns[i];\r\n\t\tdata[colname].drop(idxs, true);\r\n\t}\r\n\r\n\t// Update the size after dropping rows\r\n\t#pragma omp atomic\r\n\tthis->size -= (int)idxs.size();\r\n}\r\n\r\nset<int>  dataFrame::naidxs (vector<string> colnames)\r\n{\r\n\tcolnames = colnames.size() == 0 ? columns : colnames;\r\n\r\n\tvector<set<int>> all_na_idexs(colnames.size());\r\n\r\n\t#pragma omp parallel for\r\n\tfor (size_t i = 0; i < colnames.size(); i++)\r\n\t{\r\n\t\tall_na_idexs[i] = data[colnames[i]].naidxs();\r\n\t}\r\n\r\n\tset<int> na_idexs;\r\n\tfor (const auto& s : all_na_idexs) {\r\n\r\n\t\tstd::set_union(\r\n\t\t\tna_idexs.begin(), na_idexs.end(),\r\n\t\t\ts.begin(), s.end(),\r\n\t\t\tstd::inserter(na_idexs, na_idexs.end())\r\n\t\t);\r\n\t}\r\n\treturn na_idexs;\r\n}\r\ndataFrame dataFrame::get_na (vector<string> colnames) { return (*this)[naidxs()]; }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e2a8b96a-25a9-4e2d-965e-03cef0d93530": {"__data__": {"id_": "e2a8b96a-25a9-4e2d-965e-03cef0d93530", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8e07f125-b421-4605-878a-2900ba5f8c9d", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "828de099ba025994ee190c4d9a1942daf77c4c01a7329173e18b9445e57e45fc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid      dataFrame::drop_na(vector<string> colnames)\r\n{\r\n\tauto na_idxs = naidxs(colnames);\r\n\tdrop(na_idxs);\r\n}\r\n\r\nset<int>  dataFrame::outliers_idx (vector<string> cols, double m)\r\n{\r\n\tvector<string> num_cols = cols.size() == 0 ? get_num_cols() : cols;\r\n\r\n\tvector<set<int>> removed_idxs(num_cols.size());\r\n\r\n#pragma omp parallel for\r\n\tfor (size_t i = 0; i < num_cols.size(); i++)\r\n\t{\r\n\t\tremoved_idxs[i] = data[num_cols[i]].get_outliers_idxs(m);\r\n\t}\r\n\r\n\tset<int> final_removed_idx;\r\n\tfor (const auto& s : removed_idxs) {\r\n\r\n\t\tstd::set_union(\r\n\t\t\tfinal_removed_idx.begin(), final_removed_idx.end(),\r\n\t\t\ts.begin(), s.end(),\r\n\t\t\tstd::inserter(final_removed_idx, final_removed_idx.end())\r\n\t\t);\r\n\t}\r\n\r\n\treturn final_removed_idx;\r\n}\r\ndataFrame dataFrame::get_outliers (vector<string> cols, double m)\r\n{\r\n\treturn (*this)[outliers_idx(cols, m)];\r\n}\r\ndataFrame dataFrame::drop_outliers(vector<string> cols, double m, bool inplace)\r\n{\r\n\tauto final_removed_idx = outliers_idx(cols, m);\r\n\r\n\tif (inplace) {\r\n\t\tdrop(final_removed_idx);\r\n\t\treturn *this;\r\n\t}\r\n\r\n\tdataFrame new_df = *this;\r\n\tnew_df.drop(final_removed_idx);\r\n\treturn new_df;\r\n}\r\n\r\nset<int> dataFrame::duplicated()\r\n{\r\n\tset<int> dup_i;\r\n\tunordered_set<vector<const Object*>,\r\n\t\tstd::hash<vector<const Object*>>, ObjectPtrVectorEqual> unique_row;\r\n\r\n\tint df_size = (int)data.begin()->second.size,\r\n\t   col_size = (int)columns.size();\r\n\r\n\tvector<const column*> cols_ref;\r\n\tcols_ref.reserve(columns.size());", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1480, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c5b14826-34de-4e0d-ac18-3360442f5b12": {"__data__": {"id_": "c5b14826-34de-4e0d-ac18-3360442f5b12", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "272782eb-53a5-4cda-8285-e8a7f00d2a1b", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4290ceaa99ef2db575af212d2429e8c058f06ab7586d538c014dd1d2176df597", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvector<const column*> cols_ref;\r\n\tcols_ref.reserve(columns.size());\r\n\r\n\tfor (const string& colname : columns) { cols_ref.push_back(&data[colname]); }\r\n\r\n\tfor (int i = 0; i < df_size; i++)\r\n\t{\r\n\t\tvector<const Object*> temp_row;\r\n\t\ttemp_row.reserve(col_size);\r\n\r\n\t\tfor (const column* col : cols_ref) { temp_row.push_back(&(col->values[i])); }\r\n\r\n\t\tif (!unique_row.emplace(temp_row).second) { dup_i.insert(i); }\r\n\t}\r\n\treturn dup_i;\r\n}\r\n\r\ndataFrame dataFrame::drop_duplicates(bool inplace)\r\n{\r\n\tset<int> dup_idxs = duplicated();\r\n\tif (inplace) {\r\n\t\tdrop(dup_idxs);\r\n\t}\r\n\telse {\r\n\t\tdataFrame new_df = *this;\r\n\t\tnew_df.drop(dup_idxs);\r\n\t\treturn new_df;\r\n\t}\r\n\treturn dataFrame();\r\n}\r\n\r\n/////////////////////////////////////\r\n// Filtration\r\n\r\ninline std::set<int> intersection_idx(std::vector<std::set<int>>& sets) {\r\n\r\n\tif (sets.empty())\r\n\t\treturn {};\r\n\r\n\tvector<vector<int>> setidx_size;\r\n\tsetidx_size.reserve(sets.size());\r\n\r\n\tint i = 0;\r\n\tfor (const auto& set_ : sets) {\r\n\t\tvector<int> t = { i++, (int)set_.size() };\r\n\r\n\t\tsetidx_size.push_back(t);\r\n\t}\r\n\r\n\tstd::sort(setidx_size.begin(), setidx_size.end(),\r\n\t\t[](const vector<int> a, const vector<int> b) {\r\n\t\t\treturn a[1] < b[1];\r\n\t\t});\r\n\r\n\tvector<set<int>*> new_sets(sets.size());\r\n\r\n\tfor (size_t i = 0; i < sets.size(); i++)\r\n\t{\r\n\t\tnew_sets[i] = &(sets[setidx_size[i][0]]);\r\n\t}\r\n\r\n\tstd::set<int> result = *new_sets[0];\r\n\r\n\r\n\t// Perform intersection with each subsequent set\r\n\tfor (size_t i = 1; i < sets.size(); ++i) {\r\n\t\tstd::set<int> temp;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "170d47ac-c928-4b07-be73-3396d40f50c8": {"__data__": {"id_": "170d47ac-c928-4b07-be73-3396d40f50c8", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "49482eee-b2d3-4a89-ba69-605b95356f12", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "dce2acea60c0b3c7c9e2c1bffdbaeb79c27773634e1d0d64aea9f1a4850832a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nfor (size_t i = 1; i < sets.size(); ++i) {\r\n\t\tstd::set<int> temp;\r\n\t\tconst auto& current_set = *new_sets[i];\r\n\r\n\t\t// Keep only elements that are in both sets\r\n\t\tfor (const auto& elem : result) {\r\n\t\t\tif (current_set.find(elem) != current_set.end()) {\r\n\t\t\t\ttemp.insert(elem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Early exit if the intersection becomes empty\r\n\t\tif (temp.empty()) {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\tresult = std::move(temp); // Move temp to result for the next iteration\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\ndataFrame dataFrame::filter(vector<set<int>> indexes)\r\n{\r\n\tif (indexes.empty()) return dataFrame();\r\n\tset<int> result = intersection_idx(indexes);\r\n\tif (result.empty()) return dataFrame();\r\n\treturn (*this)[result];\r\n}\r\n\r\nset<int> dataFrame::filter_by_condition_idx(\r\n\tvector<string> cols,\r\n\tvector<std::function<bool(const Object&)>> conditions)\r\n{\r\n\tauto num_cols = (int)cols.size();\r\n\tauto num_conditions = conditions.size();\r\n\tif (num_conditions != 1 && num_cols != num_conditions) {\r\n\t\tcout << \"\\nNumber of columns: \" << num_cols << \" Number of Conditions: \" << num_conditions << endl;\r\n\t\tcout << \"Invalid Filters by conditions, Must num cols = num conditions if there is are more than one column\";\r\n\t\tassert(0);\r\n\t}\r\n\r\n\tvector<set<int>> cols_idx_res(num_cols);\r\n\r\n\t#pragma omp parallel for num_threads(num_cols)\r\n\tfor (size_t i = 0; i < num_cols; i++) {\r\n\t\tcols_idx_res[i] = data[cols[i]].filterByConditionIdx(\r\n\t\t\tconditions[num_conditions == 1 ? 0 : i]\r\n\t\t);\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1484, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6920acb1-81a7-4e79-872c-3b922b49d069": {"__data__": {"id_": "6920acb1-81a7-4e79-872c-3b922b49d069", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7e966d04-965d-4f00-b743-472b2cfbffad", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ad279a12779213e6cdf43c2d7d24adb1e186aa7fa4500964040417f4c615f6db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nconditions[num_conditions == 1 ? 0 : i]\r\n\t\t);\r\n\t}\r\n\r\n\treturn intersection_idx(cols_idx_res);\r\n}\r\n\r\ndataFrame dataFrame::filter_by_condition(\r\n\tvector<string> cols,\r\n\tvector<std::function<bool(const Object&)>> conditions)\r\n{\r\n\tauto final_idx = filter_by_condition_idx(cols, conditions);\r\n\treturn (*this)[final_idx];\r\n}\r\n\r\nset<int> dataFrame::filter_by_condition_idx(\r\n\tmap<\r\n\t\tstring,\r\n\t\tstd::function<bool(const Object&)>\r\n\t> cols_conditions)\r\n{\r\n\t// filter dataframe by bool function for each column name in cols.\r\n\t// and if many columns names and one bool function, this indicates \r\n\t// that apply this function to all columns in cols.\r\n\t// else, num of columns must the same number of functions if number of function is not 1.\r\n\r\n\tvector<string> colsnames;\r\n\tvector<std::function<bool(const Object&)>> colconditions;\r\n\r\n\tfor (const auto& col_condition : cols_conditions) {\r\n\r\n\t\tif (this->is_valid_column(col_condition.first)) {\r\n\r\n\t\t\tcolsnames.push_back(col_condition.first);\r\n\t\t\tcolconditions.push_back(col_condition.second);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcout << \"Invalid Filtering this Colname Is not Valid: \" << col_condition.first << endl;\r\n\t\t\tassert(0);\r\n\t\t}\r\n\t}\r\n\r\n\treturn filter_by_condition_idx(colsnames, colconditions);\r\n}\r\ndataFrame dataFrame::filter_by_condition(\r\n\tmap<\r\n\t\tstring, \r\n\t\tstd::function<bool(const Object&)>\r\n\t> cols_conditions\r\n)\r\n{\r\n\tauto final_idx = filter_by_condition_idx(cols_conditions);\r\n\r\n\treturn (*this)[final_idx];\r\n}\r\n\r\n/////////////////////////////////////", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1516, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "316afbe1-1761-42e1-abe5-aefcb9705a61": {"__data__": {"id_": "316afbe1-1761-42e1-abe5-aefcb9705a61", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d3225cf5-bb14-4533-b02d-05c3997a452a", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "a83ebd9151742f65ccb237305bf55740fd36915d8b5cbf2a6c4028aba1cd4a63", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nreturn (*this)[final_idx];\r\n}\r\n\r\n/////////////////////////////////////\r\n// Data Exploratory\r\n\r\ndataFrame dataFrame::groupBy(\r\n\tvector<string> by,\r\n\tstring targetcol,\r\n\tStatFun func)\r\n{\r\n\tfor (const auto& colname : by) {\r\n\t\tif (!is_valid_column(colname)) { cout << \"this \\\"\" << colname << \"\\\" Invalid Column name\\n\"; assert(0); }\r\n\t}\r\n\r\n\tunordered_map<\r\n\t\tvector<Object>,\r\n\t\tvector<Object>\r\n\t> groupMap;\r\n\r\n\tint cols_size = (int)by.size();\r\n\tauto key = vector<Object>(cols_size);\r\n\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tstd::transform(by.begin(), by.end(), key.begin(),\r\n\t\t\t[&](const string& col) { return data[col][i]; });\r\n\r\n\t\tauto& group = groupMap.try_emplace(key, vector<Object>()).first->second;\r\n\r\n\t\tgroup.emplace_back(data[targetcol][i]);\r\n\t}\r\n\r\n\r\n\tint new_size = (int)groupMap.size();\r\n\tvector<column> new_cols(cols_size + 1);\r\n\r\n\tfor (size_t i = 0; i < cols_size; i++)\r\n\t{\r\n\t\tnew_cols[i] = column(new_size, true);\r\n\t\tnew_cols[i].set_name(by[i]);\r\n\t\tnew_cols[i].size = new_size;\r\n\t\tnew_cols[i].type = data[by[i]].type;\r\n\t\tnew_cols[i].secType = data[by[i]].secType;\r\n\t}\r\n\r\n\tnew_cols[cols_size] = column(new_size, true);\r\n\tnew_cols[cols_size].set_name(targetcol);\r\n\tnew_cols[cols_size].size = new_size;\r\n\r\n\r\n\tint i = 0;\r\n\tObject stat_value;\r\n\r\n\tfor (auto& entery : groupMap) {\r\n\r\n\t\tvector<Object> vals = std::move(entery.second);\r\n\t\tif (vals.size() == 1) {\r\n\t\t\tstat_value = func == COUNT ? 1 : func == STD ? Object() : vals[0];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tswitch (func)\r\n\t\t\t{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1502, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f3197f6-befd-4cd5-9c94-b81107e78ed1": {"__data__": {"id_": "2f3197f6-befd-4cd5-9c94-b81107e78ed1", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "44c48063-0ae3-44dc-ac5d-cf2ccb2743c6", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9ef1edba0723d1198653e7038ddb4314d9f92add0dcd9ae789cc7e9bafdb0c21", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n}\r\n\t\telse {\r\n\t\t\tswitch (func)\r\n\t\t\t{\r\n\t\t\tcase MEAN:  stat_value = column::mean(vals, 0, vals.size());\t\tbreak;\r\n\t\t\tcase MEDIAN:stat_value = column::median(vals, 0, vals.size());\t\tbreak;\r\n\t\t\tcase STD:   stat_value = column::std(vals, 0, vals.size());\t\tbreak;\r\n\t\t\tcase MODE:  stat_value = column::mode(vals, 0, vals.size());\t\tbreak;\r\n\t\t\tcase SUM:   stat_value = column::sum(vals, 0, vals.size());\t\tbreak;\r\n\t\t\tcase COUNT: stat_value = Object(vals.size(), Dtype::INT32); break;\r\n\t\t\tdefault:    stat_value = Object();\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (size_t j = 0; j < cols_size; j++) {\r\n\t\t\tnew_cols[j].values[i] = entery.first[j];\r\n\t\t}\r\n\r\n\t\tnew_cols[cols_size].values[i++] = stat_value;\r\n\t\tif (new_cols[cols_size].type < stat_value.type) {\r\n\t\t\tnew_cols[cols_size].type = stat_value.type;\r\n\t\t}\r\n\t}\r\n\r\n\tnew_cols[cols_size].secType = Object::get_sec_type(new_cols[cols_size].type);\r\n\r\n\treturn dataFrame(new_cols);\r\n}\r\n\r\n\r\ndataFrame dataFrame::orderBy(vector<string> by, vector<bool> revers) {\r\n\r\n\tfor (const auto& colname : by) {\r\n\t\tif (!is_valid_column(colname)) { cout << \"this \\\"\" << colname << \"\\\" Invalid Column name\\n\"; assert(0); }\r\n\t}\r\n\r\n\tsize_t reverse_size = revers.size();\r\n\r\n\tif (reverse_size != 1 && reverse_size != by.size()) {\r\n\t\tassert(false && \"Invalid order parameters, revers size must same by size\");\r\n\t}\r\n\r\n\tunordered_map<string, column> temp_data = data;\r\n\r\n\t// Reserve memory for sorting keys and index\r\n\tvector<\r\n\t\tpair<\r\n\t\tuint64_t,\r\n\t\tvector<const Object*>\r\n\t\t>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1509, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cd8c1a20-b02b-4aec-822a-53998dd72988": {"__data__": {"id_": "cd8c1a20-b02b-4aec-822a-53998dd72988", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "67330ad6-fc3b-4fdf-a98a-3d67952fea53", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "c1e7c8829553dc8106c5010b37175f25aa6cdcf1b9af9bc97be6dc3b04c907d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvector<\r\n\t\tpair<\r\n\t\tuint64_t,\r\n\t\tvector<const Object*>\r\n\t\t>\r\n\t> temp_by_values;\r\n\ttemp_by_values.reserve(size);\r\n\r\n\tsize_t by_size = by.size();\r\n\r\n\t// Pre-fetch column references to avoid repeated map lookups\r\n\tvector<const column*> by_columns;\r\n\tby_columns.reserve(by_size);\r\n\r\n\tfor (const string& by_col : by) {\r\n\t\tby_columns.push_back(&data[by_col]);\r\n\t}\r\n\r\n\t// Prepare rows for sorting\r\n\tfor (int i = 0; i < size; i++) {\r\n\r\n\t\tvector<const Object*> row_values;\r\n\t\trow_values.reserve(by_size);\r\n\r\n\t\tfor (const column* col : by_columns) {\r\n\t\t\trow_values.emplace_back(&(col->values[i]));  // Use pointer for fast access\r\n\t\t}\r\n\t\ttemp_by_values.emplace_back(i, std::move(row_values));\r\n\t}\r\n\r\n\tstd::sort(temp_by_values.begin(), temp_by_values.end(),\r\n\t\t[&by_size, &revers, &reverse_size](\r\n\t\t\tconst pair<uint64_t, vector<const Object*>>& a,\r\n\t\t\tconst pair<uint64_t, vector<const Object*>>& b) {\r\n\r\n\t\t\t\tbool curr_revers;\r\n\t\t\t\tfor (size_t i = 0; i < by_size; i++) {\r\n\t\t\t\t\tif (*(a.second[i]) == *(b.second[i])) continue;\r\n\r\n\t\t\t\t\tcurr_revers = (reverse_size == 1) ? revers[0] : revers[i];\r\n\t\t\t\t\tif (curr_revers) {\r\n\t\t\t\t\t\treturn *(a.second[i]) > *(b.second[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn *(a.second[i]) < *(b.second[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn a.first < b.first;\r\n\t\t}\r\n\t);\r\n\r\n\tvector<int> new_index;\r\n\tnew_index.reserve(size);\r\n\r\n\tfor (const auto& row : temp_by_values) {\r\n\t\tnew_index.emplace_back(row.first);\r\n\t}\r\n\r\n\tfor (const string& colname : columns) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0b63bb53-2b4f-4656-b25d-3334a8749e45": {"__data__": {"id_": "0b63bb53-2b4f-4656-b25d-3334a8749e45", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b614016b-6733-4631-8627-ee6dedd125aa", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "63e1564fbb17485b78e7b03c48045227bdb249eb3f3e7d19156935ef73b3b6f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nnew_index.emplace_back(row.first);\r\n\t}\r\n\r\n\tfor (const string& colname : columns) {\r\n\t\ttemp_data[colname] = temp_data[colname][new_index];\r\n\t}\r\n\r\n\tdataFrame new_df = dataFrame(temp_data);\r\n\tnew_df.columns = columns;\r\n\r\n\treturn new_df;\r\n}\r\n\r\ninline const unordered_map<\r\n\tObject,\r\n\tunordered_map<string, Object>\r\n> dataFrame::get_merg_df_values_on(const dataFrame& df, const string on) const\r\n{\r\n\tunordered_map<Object, unordered_map<string, Object>> df_values_on;\r\n\r\n\tauto df_size = df.size;\r\n\r\n\tfor (int i = 0; i < df_size; i++) {\r\n\r\n\t\tconst Object on_val = df[on][i];\r\n\r\n\t\tif (df_values_on.find(on_val) != df_values_on.end()) continue;\r\n\r\n\t\tfor (const string& other_colname : df.columns) {\r\n\t\t\tif (other_colname == on) continue;\r\n\r\n\t\t\tdf_values_on[on_val][other_colname] = df[other_colname][i];\r\n\t\t}\r\n\t}\r\n\r\n\treturn df_values_on;\r\n}\r\n\r\ndataFrame dataFrame::merge(const dataFrame& other, const string on, string how)\r\n{\r\n\tauto left_values = get_merg_df_values_on(*this, on),\r\n\t\tright_values = get_merg_df_values_on(other, on);\r\n\r\n\tunordered_map<string, column> new_df_data;\r\n\tvector<string> all_cols(columns.size() + other.columns.size() - 1);\r\n\tint i = 0;\r\n\r\n\tfor (const string& colname : columns) {\r\n\t\tnew_df_data[colname] = column();\r\n\t\tnew_df_data[colname].mixed_type = data[colname].mixed_type;\r\n\t\tnew_df_data[colname].set_name(data[colname].name);\r\n\t\tall_cols[i++] = colname;\r\n\t}\r\n\tfor (const string& colname : other.columns) {\r\n\t\tif (colname == on) continue;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1491, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dae4db48-5d6d-416e-9d28-e6908581df94": {"__data__": {"id_": "dae4db48-5d6d-416e-9d28-e6908581df94", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3d6c5555-bb51-4a89-9d1e-b658cc51f07e", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b27c16e9b43b8c0cd5bf68a6d14ddfc7474cc257f290b4b71f266cbbf40bd2f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\n}\r\n\tfor (const string& colname : other.columns) {\r\n\t\tif (colname == on) continue;\r\n\r\n\t\tnew_df_data[colname] = column();\r\n\t\tnew_df_data[colname].mixed_type = other[colname].mixed_type;\r\n\t\tnew_df_data[colname].set_name(other[colname].name);\r\n\r\n\t\tall_cols[i++] = colname;\r\n\t}\r\n\r\n\r\n\tif (how == \"inner\") {\r\n\r\n\t\tfor (const auto& on_val_keyval : left_values) {\r\n\r\n\t\t\tauto it = right_values.find(on_val_keyval.first);\r\n\t\t\tif (it == right_values.end()) continue;\r\n\r\n\t\t\tnew_df_data[on].appendPushBack(on_val_keyval.first);\r\n\r\n\t\t\tfor (const auto& this_colname_value : on_val_keyval.second) {\r\n\t\t\t\tnew_df_data[this_colname_value.first].appendPushBack(this_colname_value.second);\r\n\t\t\t}\r\n\t\t\tfor (const auto& other_colname_value : it->second) {\r\n\t\t\t\tnew_df_data[other_colname_value.first].appendPushBack(other_colname_value.second);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse if (how == \"outer\") {\r\n\r\n\t\tunordered_set<Object> all_on_keys;\r\n\t\tfor (const auto& on_keyval : left_values) {\r\n\t\t\tall_on_keys.insert(on_keyval.first);\r\n\t\t}\r\n\t\tfor (const auto& on_keyval : right_values) {\r\n\t\t\tall_on_keys.insert(on_keyval.first);\r\n\t\t}\r\n\r\n\t\tfor (const auto& on_key : all_on_keys) {\r\n\r\n\t\t\tauto it_left = left_values.find(on_key),\r\n\t\t\t\tit_right = right_values.find(on_key);\r\n\r\n\t\t\tnew_df_data[on].appendPushBack(on_key);\r\n\r\n\t\t\tif (it_left == left_values.end()) {\r\n\t\t\t\tfor (const string& colname : columns) {\r\n\t\t\t\t\tif (colname == on) continue;\r\n\t\t\t\t\tnew_df_data[colname].appendPushBack(Object());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1497, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9c72bdaf-548e-4358-a2b2-a910b2c36069": {"__data__": {"id_": "9c72bdaf-548e-4358-a2b2-a910b2c36069", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a4599e28-6422-4e1e-916e-586b94af6474", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d17c4b22b8632f33c1c8cdae51d38a4fe562a6f32f0a6299f707971d5c286fca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nnew_df_data[colname].appendPushBack(Object());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (const auto& colname_val : it_left->second) {\r\n\t\t\t\t\tnew_df_data[colname_val.first].appendPushBack(colname_val.second);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (it_right == right_values.end()) {\r\n\t\t\t\tfor (const string& colname : other.columns) {\r\n\t\t\t\t\tif (colname == on) continue;\r\n\t\t\t\t\tnew_df_data[colname].appendPushBack(Object());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (const auto& colname_val : it_right->second) {\r\n\t\t\t\t\tnew_df_data[colname_val.first].appendPushBack(colname_val.second);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse if (how == \"right\" || how == \"left\") {\r\n\r\n\t\tauto* high_values = how == \"right\" ? &right_values : &left_values;\r\n\t\tauto* less_values = how == \"right\" ? &left_values : &right_values;\r\n\r\n\t\tauto* less_columns = how == \"right\" ? &columns : &other.columns;\r\n\r\n\t\tfor (const auto& on_val_keyval : *high_values) {\r\n\r\n\t\t\tnew_df_data[on].appendPushBack(on_val_keyval.first);\r\n\r\n\t\t\tfor (const auto& colname_value : on_val_keyval.second) {\r\n\t\t\t\tnew_df_data[colname_value.first].appendPushBack(colname_value.second);\r\n\t\t\t}\r\n\r\n\t\t\tauto it = less_values->find(on_val_keyval.first);\r\n\r\n\t\t\tif (it == less_values->end()) {\r\n\r\n\t\t\t\tfor (const auto& colname : *less_columns) {\r\n\t\t\t\t\tif (colname == on) continue;\r\n\t\t\t\t\tnew_df_data[colname].appendPushBack(Object());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (const auto& colname_value : it->second) {\r\n\t\t\t\t\tnew_df_data[colname_value.first].appendPushBack(colname_value.second);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1521, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4256cf78-4e21-4eba-a9ad-c691bcb377e5": {"__data__": {"id_": "4256cf78-4e21-4eba-a9ad-c691bcb377e5", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0b246e80-9431-4929-a624-276108b13180", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3e65a7b8cdbc880621b5155b15a27b96b9cecba63469652b4c744d9ded1750a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nnew_df_data[colname_value.first].appendPushBack(colname_value.second);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn dataFrame(new_df_data, all_cols);\r\n}\r\n\r\n/////////////////////////////////////\r\n// Apply\r\ndataFrame dataFrame::apply(map<const std::string, std::function<Object(const Object&)>> col_functions, bool inplace)\r\n{\r\n\tif (inplace) {\r\n\t\tfor (const auto& col_function : col_functions) {\r\n\t\t\tdata[col_function.first] = data[col_function.first].apply(col_function.second);\r\n\t\t}\r\n\t\tdataFrame df;\r\n\t\treturn df;\r\n\t}\r\n\r\n\tauto deep_copy_df = *this;\r\n\tfor (const auto& col_function : col_functions) {\r\n\t\tdeep_copy_df[col_function.first] = deep_copy_df[col_function.first].apply(col_function.second);\r\n\t}\r\n\treturn deep_copy_df;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 742, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "97149381-8904-4d1b-80eb-387fb3714be8": {"__data__": {"id_": "97149381-8904-4d1b-80eb-387fb3714be8", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "12d708cc-7ca2-48f7-91dc-245d76dd6b51", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "fa46e1a332e48fcd31d3da1fc51f756cacc2df75716b35ddddea77de351c7a47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid dataFrame::papply(map<const string, std::function<Object(const Object&)>> col_functions)\r\n{\r\n\tvector<string> cols;\r\n\tcols.reserve(col_functions.size());\r\n\r\n\tfor (const auto& col_function : col_functions) {\r\n\t\tcols.emplace_back(col_function.first);\r\n\t}\r\n\r\n\t// Use OpenMP for parallel processing of column functions\r\n\t#pragma omp parallel for \r\n\tfor (size_t i = 0; i < cols.size(); ++i) {\r\n\t\tconst string& curr_col = cols[i];\r\n\t\tdata[curr_col].papply(col_functions.at(curr_col));\r\n\t}\r\n}\r\n/////////////////////////////////////\r\n// Others\r\nvoid dataFrame::optimiz_mem(bool with_mixed_types)\r\n{\r\n\tfor (auto& name_col : this->data) {\r\n\t\tname_col.second.optimiz_mem(with_mixed_types);\r\n\t}\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 717, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0abe758f-0d1e-49da-aade-dcc3ddb88185": {"__data__": {"id_": "0abe758f-0d1e-49da-aade-dcc3ddb88185", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b7a92457-8d71-4a06-a829-cf4e22bf2b42", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4f4c31254c8df7cc89c1455c686f4e9f96692d9e940ebc215e5b102e748b5843", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid dataFrame::to_csv(const std::string& targetPath) {\r\n\r\n\tstd::ofstream file{ targetPath };\r\n\tassert(file.is_open() && \"file can't open\");\r\n\r\n\tint col_size = static_cast<int>(columns.size());\r\n\r\n\t// Write the header\r\n\tstd::ostringstream header;\r\n\tfor (int i = 0; i < col_size; i++) {\r\n\t\theader << columns[i];\r\n\t\tif (i < col_size - 1) header << \",\";\r\n\t}\r\n\tfile << header.str() << \"\\n\";\r\n\r\n\tstd::ostringstream line;\r\n\r\n\tfor (int i = 0; i < size; i++) {\r\n\t\tline.str(\"\");  \r\n\t\tline.clear();  \r\n\r\n\t\tfor (int e = 0; e < col_size; e++) {\r\n\t\t\tconst std::string& col_name = columns[e];\r\n\t\t\tauto& cell = data[col_name][i];\r\n\t\t\tline << (cell.type == Dtype::NA ? \"\" : cell.get());\r\n\r\n\t\t\tif (e < col_size - 1) line << \",\";\r\n\t\t}\r\n\t\tfile << line.str() << \"\\n\";\r\n\t}\r\n\r\n\tstd::cout << \"Save file with path: \" << targetPath << \".\\n\";\r\n}\r\n\r\ndataFrame dataFrame::concat(dataFrame otherdf)\r\n{\r\n\tassert(columns.size() == otherdf.columns.size() && \"both data-frames must have same size of columns\");\r\n\tfor (string colname : otherdf.columns) {\r\n\t\tif (!is_valid_column(colname)) {\r\n\t\t\tcout << \"col name: \" << colname << \"in new dataframe not found in current dataframe.\\n\";\r\n\t\t\tassert(false && \"both dataframes must have same col names\");\r\n\t\t}\r\n\t}\r\n\tdataFrame newdf = *this;\r\n\tfor (string colname : otherdf.columns) { newdf[colname] = newdf[colname].concat(otherdf[colname]); }\r\n\tnewdf.size += otherdf.size;\r\n\treturn newdf;\r\n}\r\n\r\n //Private Methods\r\n\r\nbool dataFrame::is_valid_column(string name) const {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a32dc29-2129-47c4-bfcb-e1b0a60e8462": {"__data__": {"id_": "3a32dc29-2129-47c4-bfcb-e1b0a60e8462", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ca001477-1244-4160-9e5d-88e3ed0a397d", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "cc9df5b53f01345e9bf0238153b1127815ba01df552e9913e297b23d47c811f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nreturn newdf;\r\n}\r\n\r\n //Private Methods\r\n\r\nbool dataFrame::is_valid_column(string name) const {\r\n\treturn std::find(this->columns.begin(), this->columns.end(), name) != this->columns.end();\r\n}\r\nbool dataFrame::is_same_length(vector<column> cols)\r\n{\r\n\tint init_size = cols[0].size;\r\n\tfor (column col : cols) if (col.size != init_size) return false;\r\n\treturn true;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 391, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "81f3f0f1-d4d5-48c5-ae0c-6b307d83062f": {"__data__": {"id_": "81f3f0f1-d4d5-48c5-ae0c-6b307d83062f", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "37c6bd61-b717-459f-9a59-e193ca43b858", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3f92a61cb4a6d9301d719c9b5f595d648f583ab1ef64e625d4368ca4f53607f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nint  dataFrame::get_max_col_length(vector<column> cols)\r\n{\r\n\tint max_col_len = 0;\r\n\tfor (column col : cols) if (col.size > max_col_len) max_col_len = col.len();\r\n\treturn max_col_len;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 213, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4816a14-0967-4c51-baf2-8cf732e384b4": {"__data__": {"id_": "a4816a14-0967-4c51-baf2-8cf732e384b4", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "49535141-ce99-4070-8cb2-320ca16fe77e", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0cdfc04b3a82d44608c3dc7e02fdb37f2075f0bdac5d4e7e03764a8ad263c80e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nvoid  dataFrame::make_cols_same_length(vector<column>& cols)\r\n{\r\n\tint max_col_len = get_max_col_length(cols);\r\n\tfor (auto& col : cols) {\r\n\t\tif (col.len() == max_col_len) continue;\r\n\t\t\r\n\t\tint diff_len = max_col_len - col.len();\r\n\t\twhile (diff_len--) col.appendPushBack(Object());\r\n\t}\r\n}\r\nstd::ifstream::pos_type filesize(string filename)\r\n{\r\n\tstd::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);\r\n\treturn in.tellg();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 465, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "272df0fa-bac0-4f32-9727-9f94a902c771": {"__data__": {"id_": "272df0fa-bac0-4f32-9727-9f94a902c771", "embedding": null, "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "58483fe6-0b10-4fab-bb16-4b9f3f7038d7", "node_type": "4", "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f5a76639bca55dc3ad4661f73c25cf11d884001a959d9ece1070cc737ff6fde9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.cpp\nint dataFrame::count_file_lines(const std::string& filePath)\r\n{\r\n\tstd::ifstream file(filePath);\r\n\tif (!file.is_open()) { std::cerr << \"Failed to open the file.\" << std::endl; return -1; }\r\n\r\n\tconst int buffer_size = (const int)filesize(filePath);\r\n\tstd::vector<char> buffer(buffer_size);\r\n\tint lineCount = 0;\r\n\tfile.read(buffer.data(), buffer_size);\r\n\tfor (char c : buffer) if (c == '\\n') ++lineCount;\r\n\treturn lineCount;\r\n}\r\n\r\nbool dataFrame::operator==(dataFrame other)\r\n{\r\n\r\n\tif (columns.size() != other.columns.size()) {\r\n\t\tstd::cout << \"This not Equal col len to compare!\\n\";\r\n\t\tassert(0);\r\n\t}\r\n\r\n\tfor (string colname : other.columns)\r\n\t{\r\n\t\tif (!is_valid_column(colname)) {\r\n\t\t\tstd::cout << \"This col name: \" << colname << \" not in compared df !\\n\";\r\n\t\t\tassert(0);\r\n\t\t}\r\n\t}\r\n\r\n\tbool result = true;\r\n\r\n\t// Parallelize the outer loop for column comparison\r\n#pragma omp parallel for\r\n\tfor (int i = 0; i < columns.size(); ++i) {\r\n\r\n\t\tstd::string colname = columns[i];\r\n\r\n\t\tconst auto& temp_res = (this->data.at(colname)).values;\r\n\t\tconst auto& other_col = (other.data.at(colname)).values;\r\n\r\n\t\t// Compare column values\r\n\t\tfor (int j = 0; j < temp_res.size(); ++j) {\r\n\r\n\t\t\tif (temp_res[j] != other_col[j]) {\r\n\r\n\t\t\t\t// If a mismatch is found, update result and break from the loop\r\n#pragma omp critical\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = false;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n\r\n\treturn 1;\r\n}\r\n// 1550", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1438, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "690c6f97-12ad-4988-9152-8e777c1f8409": {"__data__": {"id_": "690c6f97-12ad-4988-9152-8e777c1f8409", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ae3f4d3f-a8c2-40de-851f-f2e04a462c13", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6ef77f838497f589e1a62e23c00a89857be81326e560dfc297d480d1bb389f57", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\n#pragma once\r\n#include \"../columnDs/column.h\"\r\n\r\n#include \"../tableclass/Table.h\"\r\n\r\n\r\n#include <fstream>\r\n#include <sstream>\r\n#include <cassert>\r\n#include <chrono>\r\n#include <map>\r\n#include <iterator>\r\n#include <numeric>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 247, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8fc0c6b-82f1-4f33-a4cb-1ebe9d573d3e": {"__data__": {"id_": "a8fc0c6b-82f1-4f33-a4cb-1ebe9d573d3e", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "602cc5ea-2f78-406a-be3b-c671a0444208", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6dba430ae598fcac0e4ed73a27142fab6ff13c6a6ffe0468cdf0c274744df8b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\nclass dataFrame\r\n{\r\n\t#pragma region Private Methouds\r\n\r\n\tbool is_valid_column(string name) const;\r\n\tbool is_same_length(vector<column> cols);\r\n\r\n\tint get_max_col_length(vector<column> cols);\r\n\tvoid make_cols_same_length(vector<column>& cols);\r\n\r\n\tint count_file_lines(const std::string& filePath);\r\n\r\n\tinline const unordered_map<\r\n\t\tObject,\r\n\t\tunordered_map<string, Object>\r\n\t> get_merg_df_values_on(const dataFrame& df, const string on) const;\r\n\t#pragma endregion\r\n\r\npublic:\r\n\r\n\t#pragma region Attributes\r\n\r\n\t\tstring path;\r\n\t\tunordered_map<string, column> data;\r\n\t\tvector<string> columns;\r\n\t\tint size;\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Constructors\r\n\r\n\t\tdataFrame();    \r\n\r\n\t\t// this read csv file by file path, and enable mixed type column's values if true.\r\n\t\tdataFrame(string path, bool mixed_type = true);\r\n\r\n\t\t// dataframe by multiple columns. \r\n\t\tdataFrame(vector<column> cols);\r\n\r\n\t\t// dataframe from data, key as column name and value as it's column. \r\n\t\tdataFrame(unordered_map<string, column> input_data);\r\n\r\n\t\tdataFrame(std::initializer_list<std::pair<const std::string, column>> init);\r\n\r\n\t\t// dataframe from data, key as column name and value as it's column. \r\n\t\t// with sorted columns names.\r\n\t\tdataFrame(unordered_map<string, column> input_data, vector<string> columns);\r\n\r\n\t\t// data from unorder_map that key as column name, value as many values of Objects in vector.\r\n\t\tdataFrame(unordered_map<string, vector<Object>> input_data);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1481, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73b972c2-e440-4940-8008-689c61da128f": {"__data__": {"id_": "73b972c2-e440-4940-8008-689c61da128f", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b3e4c17-24b1-4c17-bbec-f16c22d45d56", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ed84139986a40a43c4ee0371670d91878ace503b3c0fe82c7d2706bb393e892d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\ndataFrame(unordered_map<string, vector<Object>> input_data);\r\n\r\n\t\t// data from unorder_map that key as column name, value as many values of Objects in vector,\r\n\t\t// with sorted column names.\r\n\t\tdataFrame(unordered_map<string, vector<Object>> input_data, vector<string> columns);\r\n\r\n\t\t// Copy assignment operator that copy data of another df to assignee.\r\n\t\tdataFrame& operator=(const dataFrame& other);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Data Accessing\r\n\r\n\t\t\t// get column by it's name from the dataframe - normal.\r\n\t\t\tcolumn& operator[](string col);\r\n\r\n\t\t\t// get column by it's name from the dataframe - const case.\r\n\t\t\tconst column& operator[](string col) const;\r\n\r\n\t\t\t// get dataframe by columns names as input.\r\n\t\t\tdataFrame operator[](vector<string> colsNames);\r\n\t\t\tdataFrame operator[](initializer_list<string> colsNames);\r\n\r\n\t\t\t// get dataframe by filtered input indexes.\r\n\t\t\tdataFrame operator[](set<int> indexes);\r\n\t\t\tdataFrame operator[](vector<int> indexes);\r\n\t\t\tdataFrame operator[](initializer_list<int> indexes);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Getters/Setters\r\n\t\r\n    // get dataframe from index to index.\r\n\tdataFrame range(int from, int to);\r\n\r\n\t// get first n rows dataframe.\r\n\tdataFrame head(int n = 5);\r\n\r\n\t// get first n rows dataframe.\r\n\tdataFrame tail(int n = 5);\r\n\r\n\r\n\t// get all numbers columns names. \r\n\tvector<string> get_num_cols ();\r\n\r\n\t// get all string columns names. \r\n\tvector<string> get_str_cols ();\r\n\r\n\t// get all date columns names.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f127494-6e03-450f-b20c-c877ca25b319": {"__data__": {"id_": "0f127494-6e03-450f-b20c-c877ca25b319", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c275e3c3-0b7d-4d30-9dc8-4cbf80c39d36", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "536cbedb56261a5927c16ccd28f8c748b08269094b9b874cc2a17a6c6e52568d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\nvector<string> get_str_cols ();\r\n\r\n\t// get all date columns names. \r\n\tvector<string> get_date_cols();\r\n\r\n\t// get all columns names that match this second type. \r\n\tvector<string> get_sectype_cols(Dtype cols_sectype);\r\n\r\n\r\n\t// add new col to dataframe. \r\n\t// and if inplace true add it in this dataframe else add to new df and return it.\r\n\tdataFrame add_col(column col, bool inplace = 0);\r\n\r\n\t// get dataframe memory total size.\r\n\tsize_t get_mem_size();\r\n\r\n\r\n\t// get recored by index, that key as name of column and it's value the Object value.\r\n\tunordered_map<string, Object> iloc(int idx);\r\n\r\n\t// get value that corresponds to row and col indexes. this deals with dataframe as 2D Matrix. \r\n\tObject\t\t\t\t\t\t  iloc(int row, int col);\r\n\r\n\t// get dataframe with specified vertical range(columns) and horizontal range(rows)\r\n\tdataFrame\t\t\t\t\t  iloc(vector<int> vrange, vector<int> hrange);\r\n\r\n\r\n\t// get deep copy of the dataframe.\r\n\tdataFrame copy();\r\n\r\n\r\n\t// get random sample of dataframe rows.\r\n\tdataFrame sample(int size_, int seed = 0, bool with_replacement = 1);\r\n\r\n\t// shuffle dataframe rows.\r\n\tdataFrame shuffle(int seed = 0);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Information About the Dataframe\r\n\t\r\n\t// return 2 values, the number of rows, number of columns in df\r\n\tvector<int> shape();\r\n\r\n\t// print all information about the df, like the dtypes of columns, numbers of na/s and so on.\r\n\tvoid info();\r\n\r\n\t// get basic statistical summarization of dataframe columns.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1493, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96e3ef3b-b943-475c-b77e-9cbc431502b1": {"__data__": {"id_": "96e3ef3b-b943-475c-b77e-9cbc431502b1", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ddd38615-de89-42cf-9cbf-b015d69cd98c", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4fc54830f6ac370bc469d402de82a75c03f24245488713ba4f8ac8f39e3f20c4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\nvoid info();\r\n\r\n\t// get basic statistical summarization of dataframe columns.\r\n\tdataFrame describe(Dtype include = Dtype::NA);\r\n\r\n\t// get correlations of number columns.\r\n\tdataFrame corr();\r\n\r\n\t// get how many columns for each dtype.\r\n\tunordered_map<Dtype, uint16_t> dtype_count();\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Print Functions\r\n\r\n\t\t// print the whole dataframe, with option to print the index column.\r\n\t\tvoid p(bool printGenIndex = true);\r\n\r\n\t\t// print the head of dataframe.\r\n\t\tvoid phead(int limit = 5);\r\n\r\n\t\t// print the tail of dataframe.\r\n\t\tvoid ptail(int limit = 5);\r\n\r\n\t\t// print the columns of the dataframe.\r\n\t\tvoid cols_p();\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Dealing with bad data\r\n\r\n\t\t// drop row by index.\r\n\t\tinline void drop(int idx);\r\n\r\n\t\t// drop many rows by their indexes. \r\n\t\tinline void drop(set<int>& idxs);\r\n\r\n\r\n\t\t// get rows indexes that have at lest one na value.\r\n\t\tset<int> naidxs(vector<string> colnames = {});\r\n\r\n\t\t// get dataframe with rows that have at lest one na value. \r\n\t\tdataFrame get_na(vector<string> colnames = {});\r\n\r\n\t\t// drop rows that have at lest one na value.  \r\n\t\tvoid drop_na(vector<string> colnames = {});\r\n\r\n\r\n\t\t// get rows indexes that have at lest values that is outlier with respect to it's column. \r\n\t\tset<int> outliers_idx(\r\n\t\t\tvector<string> cols = {},\r\n\t\t\tdouble m = 2.0\r\n\t\t);\r\n\t\r\n\t\t// get dataframe with rows that have at lest values that is outlier with respect to it's column. \r\n\t\tdataFrame get_outliers(", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "19fa3d3e-7c19-41d6-b86b-e72e75adaae1": {"__data__": {"id_": "19fa3d3e-7c19-41d6-b86b-e72e75adaae1", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f91c9a09-d9d5-4fd3-8559-77cc1726605f", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6194aa52f653e180f73c9a3416d54f2e986cffd8ee10359f1496d62e0ec06a1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\ndataFrame get_outliers(\r\n\t\t\tvector<string> cols = {},\r\n\t\t\tdouble m = 2.0\r\n\t\t);\r\n\r\n\t\t// drop rows that have at lest values that is outlier with respect to it's column. \r\n\t\tdataFrame drop_outliers(\r\n\t\t\tvector<string> cols = {},\r\n\t\t\tdouble m = 2.0,\r\n\t\t\tbool inplace = false\r\n\t\t);\r\n\t\t\r\n\r\n\t\t// get duplicated rows indexes.\r\n\t\tset<int> duplicated();\r\n\r\n\t\t// drop duplicated rows from the df.\r\n\t\tdataFrame drop_duplicates(bool inplace = false);\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Filtration\r\n\r\n\t// filter dataframe based on intersection of all input indexes.\r\n\tdataFrame filter(vector<set<int>> indexes);\r\n\r\n\t// get filter dataframe indexes by bool function for each column name in cols.\r\n\tset<int> filter_by_condition_idx(\r\n\t\tvector<string> cols,\r\n\t\tvector<std::function<bool(const Object&)>> conditions\r\n\t);\r\n\r\n\t// get filter dataframe by bool function for each column name in cols.\r\n\tdataFrame filter_by_condition(\r\n\t\tvector<string> cols,\r\n\t\tvector<std::function<bool(const Object&)>> conditions\r\n\t);\r\n\r\n\t// get filter dataframe indexes by bool function(map value) for each column name(map key).\r\n\tset<int> filter_by_condition_idx(\r\n\t\tmap <\r\n\t\t\tstring,\r\n\t\t\tstd::function<bool(const Object&)>\r\n\t\t> cols_conditions\r\n\t);\r\n\r\n\t// get filter dataframe by bool function(map value) for each column name(map key).\r\n\tdataFrame filter_by_condition(\r\n\t\tmap <\r\n\t\t\tstring,\r\n\t\t\tstd::function<bool(const Object&)>\r\n\t\t> cols_conditions\r\n\t);\r\n\t#pragma endregion\r\n\r\n\t#pragma region Data Exploratory", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1507, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0294bf87-bc1a-4fa4-bbc9-1d522a107a37": {"__data__": {"id_": "0294bf87-bc1a-4fa4-bbc9-1d522a107a37", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "255f7452-e5ad-4c15-b55c-3e150ed788e5", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "711144a8a576b30d3b27350c39104417f16c365f7ab2c2fefcc2037edddd45fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\n> cols_conditions\r\n\t);\r\n\t#pragma endregion\r\n\r\n\t#pragma region Data Exploratory\r\n\r\n\t// group dataframe by columns names, and apply basic statics function in target column.\r\n\tdataFrame groupBy(\r\n\t\tvector<string> by,\r\n\t\tstring\t       targetcol,\r\n\t\tStatFun        func\r\n\t);\r\n\r\n\t// order the dataframe by columns, sorting ascending by defaults.\r\n\t// enable revers, if revers with size 1 so apply this revers option for all by columns.\r\n\t// is not, must be the same length of the by columns.\r\n\tdataFrame orderBy(\r\n\t\tvector<string> by, \r\n\t\tvector<bool  > revers = { false }\r\n\t);\r\n\r\n\t// merge two dataframes based on column name, \r\n\t// and the how to merge them Options = ['inner', 'outer', 'left', 'right']\r\n\tdataFrame merge(const dataFrame& other, const string on, string how = \"inner\");\r\n\r\n\t#pragma endregion\r\n\r\n\t#pragma region Apply\r\n\r\n\t// apply function to columns as key and their functions as value in input map.\r\n\tdataFrame apply(map<const std::string, std::function<Object(const Object&)>> col_functions, bool inplace=false);\r\n\r\n\t// apply function in parallel way to columns as key and their functions as value in input map.\r\n\tvoid papply(map<const string, std::function<Object(const Object&)>> col_functions);\r\n\t#pragma endregion\r\n\r\n\t// this optimize the memory/size of the dataframe for each column. \r\n\tvoid optimiz_mem(bool with_mixed_types = true);\r\n\r\n\t// convert/save the dataframe into csv formate with path to save to it.\r\n\tvoid to_csv(const std::string& targetPath);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1501, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4f011452-f052-43c7-a7f4-b7e3d2b38394": {"__data__": {"id_": "4f011452-f052-43c7-a7f4-b7e3d2b38394", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f3de3db1-7ee3-492a-8a0d-50c8e770c31c", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "1d9b59acef960a164fca41dfd2a850be2bc99be0b55573e394d662ff93534fe0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\nvoid to_csv(const std::string& targetPath);\r\n\r\n\t// concatenate another dataframe to this one.\r\n\tdataFrame concat(dataFrame otherdf);\r\n\r\n\t// to enable cout operator\r\n\tfriend ostream& operator<<(ostream& os, dataFrame df) { df.p(); return os; }\r\n\r\n\t// to enable equality comparison to another dataframe.\r\n\tbool operator == (dataFrame other);\r\n};\r\n\r\n// Overloaded operators for pretty printing\r\ntemplate <typename T>\r\nostream& operator<<(ostream& os, const vector<T>& vec) {\r\n\tos << \"[\";\r\n\tfor (size_t i = 0; i < vec.size(); ++i) {\r\n\t\tos << vec[i];\r\n\t\tif (i != vec.size() - 1) os << \",  \";\r\n\t}\r\n\tos << \"]\";\r\n\treturn os;\r\n}\r\n\r\ntemplate <typename T>\r\nostream& operator<<(ostream& os, const set<T>& set_) {\r\n\tos << \"[\";\r\n\tsize_t i = 0;\r\n\tfor (const T& value : set_) {\r\n\t\tos << value;\r\n\t\tif (i++ != set_.size() - 1) os << \", \";\r\n\t}\r\n\tos << \"]\";\r\n\treturn os;\r\n}\r\n\r\n// Debug print macro\r\n#define dprint(var) DPrint(#var, var)\r\ntemplate <typename T>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 965, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "00294ce4-219b-4e81-bffd-d7070081c378": {"__data__": {"id_": "00294ce4-219b-4e81-bffd-d7070081c378", "embedding": null, "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "22bf0130-134f-4783-a1db-e9e3e7fcf943", "node_type": "4", "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b560542656a5e62542ecbaa590d4efcb1354ce6ca128e2c59ad7762b2ae7101b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: dataFrame.h\nvoid DPrint(const string& var_name, const T& var_value) {\r\n\tcout << var_name << \" = \" << var_value << endl;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 136, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d23d2670-f998-4a2b-b686-bb899cd3e445": {"__data__": {"id_": "d23d2670-f998-4a2b-b686-bb899cd3e445", "embedding": null, "metadata": {"source": "Tools.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "847a8708-685c-4c97-961c-4bb18ac39a54", "node_type": "4", "metadata": {"source": "Tools.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f52e76db133f232e25e56889bd180bb82daf031377953adcc5dfcc581f06c24d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Tools.cpp\n#include \"Tools.h\"\r\n\r\nTools::Tools() {\r\n\r\n}\r\n\r\nvector<Object> Tools::gen_seq_obj(int from, int to)\r\n{\r\n\tint size = to - from;\r\n\tvector<Object> tempVec(size);\r\n\r\n\tfor (int i = 0; i < size; i++) tempVec[i] = Object(from++, Dtype::INT32);\r\n\treturn tempVec;\r\n}\r\n\r\nvector<int> Tools::gen_seq_int(int from, int to)\r\n{\r\n\tint i = 0;\r\n\tvector<int> tempVec(to - from);\r\n\twhile (from!=to) tempVec[i++] = from++;\r\n\treturn std::move(tempVec);\r\n}\r\n\r\nvoid Tools::printthis(vector<int> arr)\r\n{\r\n\tcout << endl;\r\n\tfor (int i = 0; i < arr.size(); i++)\r\n\t{\r\n\t\tcout << i << \" : \" << arr[i] << endl;\r\n\t}\r\n\tcout << endl;\r\n}\r\n\r\nvoid Tools::printthis(vector<Object> arr)\r\n{\r\n\tcout << endl;\r\n\tfor (int i = 0; i < arr.size(); i++)\r\n\t{\r\n\t\tcout << i << \" : \" << arr[i].get() << endl;\r\n\t}\r\n\tcout << endl;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 801, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "74df3ee1-9edc-4894-aba8-3c96a672c0aa": {"__data__": {"id_": "74df3ee1-9edc-4894-aba8-3c96a672c0aa", "embedding": null, "metadata": {"source": "Tools.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d8254abe-abbb-42e0-aef2-d1e18668d931", "node_type": "4", "metadata": {"source": "Tools.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "bc6ad5a3a3d3f83663ae46fdc9592f48febc7015b508c3d1b47ed0af3672cf47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Tools.cpp\nvoid Tools::printSubArrayBoundris(SubArrayBoundris sap)\r\n{\r\n\tcout << \"{low: \" << sap.low << \", high: \" << sap.high << \", sum: \" << sap.sum << \"}\\n\";\r\n}\r\n\r\ndouble  Tools::speedup_ratio_percent(double old_time, double new_time) {\r\n\r\n\treturn ((old_time - new_time) / old_time) * 100.0;\r\n}\r\n\r\ndouble Tools::timesFaster(double oldTime, double newTime) {\r\n\tif (oldTime <= 0 || newTime <= 0) {\r\n\t\tstd::cerr << \"Error: Speed values must be greater than zero.\" << std::endl;\r\n\t\treturn 0.0;\r\n\t}\r\n\treturn oldTime / newTime;\r\n\t;\r\n}\r\n\r\n\r\n\r\nint Tools::randimized_partition(vector<Object>& arr, int start, int end_)\r\n{\r\n\tint random_index = start + rand() % (end_ - start +1);\r\n\tstd::swap(arr[start], arr[random_index]);\r\n\r\n\tObject pivot = arr[start];\r\n\r\n\tint left = start + 1,\r\n\t\tright = end_;\r\n\r\n\twhile (left <= right) {\r\n\r\n\t\twhile (left <= right &&  arr[left] <= pivot) ++left;\r\n\t\twhile (left <= right && arr[right] >= pivot) --right;\r\n\r\n\t\tif (left < right) {\r\n\t\t\tstd::swap(arr[left], arr[right]);\r\n\t\t}\r\n\r\n\t}\r\n\tstd::swap(arr[start], arr[right]);\r\n\r\n\treturn right;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1077, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29be9ada-3ef6-494f-84a6-1ffcc2f80613": {"__data__": {"id_": "29be9ada-3ef6-494f-84a6-1ffcc2f80613", "embedding": null, "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6404afb5-2906-43d3-94d0-307aed47cb0c", "node_type": "4", "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "caaa0848125eb499cac8257332f5e35f67184b0bc33a6adb9a46d0cd875e5412", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Tools.h\n#pragma once\r\n#include <chrono>\r\n\r\n#include \"../ObjectDs/Object.h\"\r\n#include <unordered_set>\r\n\r\nusing namespace std;\r\n\r\n\r\nstruct SubArrayBoundris {\r\n    int low, high;\r\n    long double sum;\r\n};", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 215, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06166bab-8102-4c28-826c-8c27e5a367f2": {"__data__": {"id_": "06166bab-8102-4c28-826c-8c27e5a367f2", "embedding": null, "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a56c38cc-81ef-4da9-92f8-651ff2550d34", "node_type": "4", "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "99d5bbb8ddecdfe97f109994feb9ca8df3a0a8dfc84c593e9361b0b0c1b5b01f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Tools.h\nclass Tools\r\n{\r\npublic:\r\n\tTools();\r\n\r\n    static vector<Object> gen_seq_obj(int from, int to);\r\n    static vector<int> gen_seq_int(int from, int to);\r\n    static void printthis(vector<int> arr);\r\n    static void printthis(vector<Object> arr);\r\n    static void printSubArrayBoundris(SubArrayBoundris sap);\r\n\r\n    template<typename F>\r\n    static float timeIt(F&& func) {\r\n\r\n        auto start = std::chrono::high_resolution_clock::now();\r\n\r\n        func();\r\n\r\n        auto end = std::chrono::high_resolution_clock::now();\r\n        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\r\n        return (float)(duration.count());\r\n    }\r\n    static double speedup_ratio_percent(double old_time, double new_time);\r\n     \r\n    static double timesFaster(double oldTime, double newTime);\r\n    \r\n\r\n    static int randimized_partition(vector<Object>& arr, int start, int end);\r\n\r\n\r\n    static vector<int> rand_vec_nums(int size, int max, int min, unsigned int seed=0, bool with_replacement=1)\r\n    {\r\n        vector<int> values(size);\r\n\r\n        std::random_device rd;\r\n        std::mt19937 gen(seed == 0 ? rd() : seed);\r\n\r\n        std::uniform_int_distribution<int> dist(min, max);\r\n\r\n        if (with_replacement) {\r\n            for (int i = 0; i < size; i++)\r\n            {\r\n                values[i] = dist(gen);\r\n            }\r\n        }\r\n        else {\r\n            unordered_set<int> used_num;\r\n\r\n            int i = 0;\r\n            int rand_num;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "24053360-a280-45e8-a94d-86eaaf7de34e": {"__data__": {"id_": "24053360-a280-45e8-a94d-86eaaf7de34e", "embedding": null, "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "55aed45c-13b5-48f9-9836-092d41f95dfd", "node_type": "4", "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f9881a1f3cf86d0e2c762bcf5cef85c7c90e455c81ab7281f7fd0ba8f6e04845", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Tools.h\nunordered_set<int> used_num;\r\n\r\n            int i = 0;\r\n            int rand_num;\r\n\r\n            while (i < size) {\r\n                rand_num = dist(gen);\r\n\r\n                if (used_num.find(rand_num) == used_num.end()) {\r\n                    values[i++] = rand_num;\r\n                    used_num.insert(rand_num);\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n        return values;\r\n    }\r\n   \r\n};", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 434, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2aae5618-7a72-4f98-906d-ce3c381a28e3": {"__data__": {"id_": "2aae5618-7a72-4f98-906d-ce3c381a28e3", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d6d59b5c-620c-44a4-891c-9f126cf3ed49", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "5460d60c665dd048fa9243af55eb4a9b569b892227b05174121e78c78d6cb43d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\n#include \"Date.h\"\r\n#include \"../object.h\"\r\n#include <chrono>\r\n#include<iomanip>\r\n\r\n\r\nchar Date::find_delimiter(string datestr)\r\n{\r\n\tfor (char letter : datestr) {\r\n\t\tif (!std::isdigit(letter)) return letter;\r\n\t}\r\n\treturn -1;\r\n}\r\nDate Date::parseDateFromString(string dateStr, DateFormat dateFormat)\r\n{\r\n\tunsigned  int year_;\r\n\tunsigned char month_;\r\n\tunsigned char day_;\r\n\r\n\tstd::istringstream iss(dateStr);\r\n\r\n\tchar delimiter = find_delimiter(dateStr);\r\n\tstring token;\r\n\r\n\tswitch (dateFormat)\r\n\t{\r\n\tcase DateFormat::YYYY_MM_DD:\r\n\t{\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tyear_ = stoul(token);\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tmonth_ = static_cast<unsigned char>(stoul(token));\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tday_ = static_cast<unsigned char>(stoul(token));\r\n\t\tbreak;\r\n\t}\r\n\tcase DateFormat::YYYY_DD_MM:\r\n\t{\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tyear_ = stoul(token);\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tday_ = static_cast<unsigned char>(stoul(token));\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tmonth_ = static_cast<unsigned char>(stoul(token));\r\n\t\tbreak;\r\n\t}\r\n\r\n\tcase DateFormat::DD_MM_YYYY:\r\n\t{\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tday_ = static_cast<unsigned char>(stoul(token));\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tmonth_ = static_cast<unsigned char>(stoul(token));\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tyear_ = stoul(token);\r\n\r\n\t\tbreak;\r\n\t}\r\n\tcase DateFormat::MM_DD_YYYY:\r\n\t{\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tmonth_ = static_cast<unsigned char>(stoul(token));", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73352762-5704-4d4c-ac1a-815596b7809c": {"__data__": {"id_": "73352762-5704-4d4c-ac1a-815596b7809c", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "01b5e478-15d5-4a9b-9a95-5a5b8ef48289", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "98cbc07366780cc3247bf6420a5dedf29253a188610dfcb2c373b213f63d6575", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\n{\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tmonth_ = static_cast<unsigned char>(stoul(token));\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tday_ = static_cast<unsigned char>(stoul(token));\r\n\r\n\t\tgetline(iss, token, delimiter);\r\n\t\tyear_ = stoul(token);\r\n\t\tbreak;\r\n\t}\r\n\r\n\tdefault:\r\n\t\tyear_ = 0;\r\n\t\tmonth_ = 0;\r\n\t\tday_ = 0;\r\n\t}\r\n\r\n\r\n\treturn Date(year_, month_, day_);\r\n}\r\nvector<Object> Date::validate_date_str(Object date_str)\r\n{\r\n\tstring str_ = date_str.get();\r\n\r\n\tchar delimiter = find_delimiter(str_);\r\n\r\n\tif (delimiter == -1) {\r\n\r\n\t\tdate_str.print_info();\r\n\t\tassert(0 && \"Can't to Parse This String to Date\");\r\n\t}\r\n\r\n\tint delimiter_counter = 0;\r\n\tint str_len = (int)str_.length();\r\n\r\n\tbool is_my_delimiter;\r\n\r\n\tfor (size_t i = 0; i < str_len; i++)\r\n\t{\r\n\t\tis_my_delimiter = str_[i] == delimiter;\r\n\r\n\t\tif (is_my_delimiter) {\r\n\t\t\tif (delimiter_counter == 2) {\r\n\r\n\t\t\t\tcout << \"Can't to Parse This String to Date \" << endl <<\r\n\t\t\t\t\t\"Because the first Detected delimiter(\" << delimiter << \") \" <<\r\n\t\t\t\t\t\"appears more the 2 times\" << endl;\r\n\r\n\t\t\t\tassert(0);\r\n\t\t\t}\r\n\t\t\t++delimiter_counter;\r\n\t\t}\r\n\r\n\t\tif (!std::isalnum(str_[i]) && !is_my_delimiter) {\r\n\r\n\t\t\tdate_str.print_info();\r\n\t\t\tcout << \"Can't to Parse This String to Date \" << endl <<\r\n\t\t\t\t\"Because there is (\" << str_[i] << \") Not Number\" <<\r\n\t\t\t\t\" or Not First Detected delimiter(\" << delimiter << \")\" << endl;\r\n\r\n\t\t\tassert(0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvector<Object> attrs = date_str.split(string(1, delimiter), true);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1473, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cc7ac38e-07ef-4eea-b842-f03b15cef582": {"__data__": {"id_": "cc7ac38e-07ef-4eea-b842-f03b15cef582", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5f555fec-e0b8-49a7-9756-a205e490cb6b", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9ba9c8f853ffe424568f5c448cf397e561ed215add1c87d77860ee258ea25e2e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\nassert(0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvector<Object> attrs = date_str.split(string(1, delimiter), true);\r\n\tint above_31_counter = 0, above_12_counter = 0;\r\n\r\n\tfor (size_t i = 0; i < 3; i++)\r\n\t{\r\n\t\tif (attrs[i].secType != Dtype::NUMBER) {\r\n\r\n\t\t\tdate_str.print_info();\r\n\t\t\tcout << \"Can't to Parse This String to Date \" << endl <<\r\n\t\t\t\t\"Because there is (\" << attrs[i] << \") Not Number\\n\";\r\n\r\n\t\t\tassert(0);\r\n\t\t}\r\n\t\tif (attrs[i] > 31) {\r\n\r\n\t\t\tif (above_31_counter == 1) {\r\n\r\n\t\t\t\tdate_str.print_info();\r\n\t\t\t\tcout << \"Can't to Parse This String to Date \" << endl <<\r\n\t\t\t\t\t\"Because there is NUMBER(\" << attrs[i] << \") \" << \r\n\t\t\t\t\t\"that also bigger than 31 And Year That only Number can be.\\n\";\r\n\r\n\t\t\t\tassert(0);\r\n\t\t\t}\r\n\t\t\t++above_31_counter;\r\n\t\t}\r\n\t\tif (attrs[i] > 12) {\r\n\r\n\t\t\tif (above_12_counter == 2) {\r\n\r\n\t\t\t\tdate_str.print_info();\r\n\t\t\t\tcout << \"Can't to Parse This String to Date \" << endl <<\r\n\t\t\t\t\t\"Because there are Two Numbers \"<<\r\n\t\t\t\t\t\"that also bigger than 12 And Year and Month That only Number can be.\\n\";\r\n\r\n\t\t\t\tassert(0);\r\n\t\t\t}\r\n\t\t\t++above_12_counter;\r\n\t\t}\r\n\t}\r\n\treturn attrs;\r\n}\r\n\r\nDate::Date() {\r\n\tyear = 0;\r\n\tmonth = 0;\r\n\tday = 0;\r\n}\r\nDate::Date(const char date_str[])\r\n{\r\n\tObject temp = Object(date_str, Dtype::STRING);\r\n\t*this = Date(temp, DateFormat::AUTO);\r\n}\r\nDate::Date(Object obj)\r\n{\r\n\tif (obj.type == Dtype::DATE) {\r\n\t\t*this = obj.get_val<Date>().copy();\r\n\t}\r\n\telse {\r\n\r\n\t\tDateFormat extracted_format = Date::extractDateFormate(obj);\r\n\t\t*this = Date(obj, extracted_format);\r\n\t}\r\n\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1512, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3be7110f-0f80-47d8-ab6d-0be74eaacced": {"__data__": {"id_": "3be7110f-0f80-47d8-ab6d-0be74eaacced", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6030e332-da6c-48fd-96a5-cd1da6680c04", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d331f28ae7d5498f54d99d69e6a7a9d7194922ebd97f3680cfc955f744e1b469", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\n*this = Date(obj, extracted_format);\r\n\t}\r\n\r\n}\r\n\r\nDate::Date(string& datestr, DateFormat dateformat)\r\n{\r\n\tDateFormat extracted_format = dateformat == DateFormat::AUTO ? Date::extractDateFormate(Object(datestr)) : dateformat;\r\n\r\n\t*this = parseDateFromString(datestr, extracted_format);\r\n}\r\n\r\nDate::Date(const Object& datestr, DateFormat dateformat)\r\n{\r\n\tDateFormat extracted_format = dateformat == DateFormat::AUTO ? Date::extractDateFormate(datestr) : dateformat;\r\n\r\n\t*this = parseDateFromString(datestr.get_val<String>().get(), extracted_format);\r\n}\r\n\r\nDate::Date(unsigned int year, unsigned char month, unsigned char day)\r\n{\r\n\tthis->year = year;\r\n\tthis->month = month;\r\n\tthis->day = day;\r\n}\r\n\r\n\r\n\r\nObject Date::get_year () const\r\n{\r\n\treturn Object(year, Dtype::DATE_YEAR);\r\n}\r\nObject Date::get_month() const\r\n{\r\n\treturn Object(month, Dtype::DATE_MONTH);\r\n}\r\nObject Date::get_day  () const\r\n{\r\n\treturn Object(day, Dtype::DATE_DAY);\r\n}\r\n\r\nuint32_t Date::get_attr_num(Dtype attr_type)\r\n{\r\n\tswitch (attr_type)\r\n\t{\r\n\tcase Dtype::DATE_MONTH: return this->month;\r\n\tcase Dtype::DATE_DAY: return this->day;\r\n\tcase Dtype::DATE_YEAR: return this->year;\r\n\tdefault:\r\n\t\treturn 0;\r\n\t\tbreak;\r\n\t}\r\n}\r\n\r\nObject Date::get_attr(Dtype attr_type)\r\n{\r\n\tswitch (attr_type)\r\n\t{\r\n\tcase Dtype::DATE_MONTH: return Object(this->month, attr_type);\r\n\tcase Dtype::DATE_DAY: return Object(this->day, attr_type);\r\n\tcase Dtype::DATE_YEAR: return Object(this->year, attr_type);\r\n\tdefault:\r\n\t\treturn Object();\r\n\t\tbreak;\r\n\t}\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1513, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d1974fb9-4916-420b-95d3-2f0effb98d8a": {"__data__": {"id_": "d1974fb9-4916-420b-95d3-2f0effb98d8a", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "606c77e6-88ba-42fd-b29b-486611922bf7", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "392531960ec56538a2678d4286d8f3ef3e6ad59934519eeb2681939f7146d653", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\ndefault:\r\n\t\treturn Object();\r\n\t\tbreak;\r\n\t}\r\n}\r\n\r\nunsigned int  Date::get_year_num ()\r\n{\r\n\treturn year;\r\n}\r\nunsigned char Date::get_month_num()\r\n{\r\n\treturn month;\r\n\r\n}\r\nunsigned char Date::get_day_num  ()\r\n{\r\n\treturn day;\r\n}\r\n\r\n\r\nstring Date::get() const\r\n{\r\n\tstring str_year  = to_string(year);\r\n\tstring str_month = to_string(month);\r\n\tstring str_day   = to_string(day);\r\n\r\n\tint len_y = (4 - (int)str_year.length());\r\n\r\n\tfor (int i = 0; i < len_y; i++)\r\n\t{\r\n\t\tstr_year = \"0\" + str_year;\r\n\t}\r\n\r\n\tif (str_month.length() == 1) {\r\n\t\tstr_month = \"0\" + str_month;\r\n\t}\r\n\r\n\tif (str_day.length() == 1) {\r\n\t\tstr_day = \"0\" + str_day;\r\n\t}\r\n\r\n\treturn str_year + \"-\" + str_month + \"-\" + str_day;\r\n}\r\n\r\n\r\nDateFormat Date::extractDateFormate(Object date_str)\r\n{\r\n\tvector<Object> attrs = validate_date_str(date_str);\r\n\r\n\tint8_t year_index = 0, month_index = 1;\r\n\r\n\t// get year\r\n\tfor (int8_t i = 0; i < 3; i++)\r\n\t{\r\n\t\tif (attrs[i] > 31) {\r\n\t\t\tyear_index = i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// get month\r\n\tfor (int8_t i = 0; i < 3; i++)\r\n\t{\r\n\t\tif (attrs[i] <= 12) {\r\n\t\t\tmonth_index = i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (year_index == 0 && month_index == 1)\r\n\t\treturn DateFormat::YYYY_MM_DD;\r\n\r\n\telse if (year_index == 0 && month_index == 2)\r\n\t\treturn DateFormat::YYYY_DD_MM;\r\n\r\n\telse if (year_index == 2 && month_index == 0)\r\n\t\treturn DateFormat::MM_DD_YYYY;\r\n\telse\r\n\t\treturn DateFormat::DD_MM_YYYY;\r\n\t\r\n}\r\n\r\nDate Date::now()\r\n{\r\n\ttime_t currentTime = time(NULL);\r\n\ttm localTime;\r\n\tlocaltime_s(&localTime, &currentTime);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1512, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a9649ae-032b-4ba3-96f0-fe093ec621fe": {"__data__": {"id_": "8a9649ae-032b-4ba3-96f0-fe093ec621fe", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aab63da3-52b9-4995-966a-337cd7793b69", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d14fcc09c4cdae8dd1debaac36230a3a4e8ee91d36bf8131b5664550779d7bf4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\n{\r\n\ttime_t currentTime = time(NULL);\r\n\ttm localTime;\r\n\tlocaltime_s(&localTime, &currentTime);\r\n\r\n\tint currentY = localTime.tm_year + 1900;\r\n\tint currentM = localTime.tm_mon + 1;\r\n\tint currentD = localTime.tm_mday;\r\n\r\n\treturn Date(currentY, currentM, currentD);\r\n}\r\n\r\nDate Date::copy()\r\n{\r\n\treturn *this;\r\n}\r\n\r\n\r\nbool Date::operator < (const Date& other)  const {\r\n\r\n\tif (year != other.year) return year < other.year;\r\n\tif (month != other.month) return month < other.month;\r\n\treturn day < other.day;\r\n}\r\nbool Date::operator > (const Date& other)  const {\r\n\r\n\tif (year != other.year) return year > other.year;\r\n\tif (month != other.month) return month > other.month;\r\n\treturn day > other.day;\r\n}\r\n\r\nbool Date::operator <= (const Date& other) const {\r\n\r\n\tif (year != other.year) return year <= other.year;\r\n\tif (month != other.month) return month <= other.month;\r\n\treturn day <= other.day;\r\n}\r\nbool Date::operator >= (const Date& other) const {\r\n\r\n\tif (year != other.year) return year >= other.year;\r\n\tif (month != other.month) return month >= other.month;\r\n\treturn day >= other.day;\r\n}\r\n\r\nbool Date::operator == (const Date& other) const {\r\n\r\n\treturn year == other.year && month == other.month && day == other.day;\r\n}\r\nbool Date::operator != (const Date& other) const {\r\n\r\n\treturn !(*this == other);\r\n}\r\n\r\n\r\nbool Date::operator < (const Object& other)  const\r\n{\r\n\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this < other.get_val<Date>();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1468, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd17cf62-fb34-4d89-b6e8-fa18c6fc276c": {"__data__": {"id_": "dd17cf62-fb34-4d89-b6e8-fa18c6fc276c", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "31b09439-5754-4758-a659-f27d5b0db384", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9fbe70d6de7208dc5b9116057a968276555da097f0b58f4fe3ac305f55b8c1b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\n{\r\n\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this < other.get_val<Date>();\r\n\tcase Dtype::DATE_YEAR:  return year  < other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_MONTH: return month < other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_DAY:\treturn day\t < other.get_val<uint32_t>();\r\n\r\n\tdefault:\r\n\r\n\t\tstring operation = \" == \";\r\n\t\tcout << \"Comparision Error:: \" <<\r\n\t\t\tDtype::DATE << \"(\" << *this << \")\"\r\n\t\t\t+ operation\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\t\treturn 0;\r\n\t\tbreak;\r\n\t}\r\n\treturn 0;\r\n\r\n}\r\nbool Date::operator > (const Object& other)  const\r\n{\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this > other.get_val<Date>();\r\n\tcase Dtype::DATE_YEAR:  return year  > other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_MONTH: return month > other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_DAY:\treturn day > other.get_val<uint32_t>();\r\n\r\n\tdefault:\r\n\r\n\t\tstring operation = \" > \";\r\n\t\tcout << \"Comparision Error:: \" <<\r\n\t\t\tDtype::DATE << \"(\" << *this << \")\"\r\n\t\t\t+ operation\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\t\treturn 0;\r\n\t\tbreak;\r\n\t}\r\n\treturn 0;\r\n\r\n}\r\n\r\nbool Date::operator <= (const Object& other)  const\r\n{\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this <= other.get_val<Date>();\r\n\tcase Dtype::DATE_YEAR:  return year  <= other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_MONTH: return month <= other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_DAY:\treturn day <= other.get_val<uint32_t>();\r\n\r\n\tdefault:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1501, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9faad717-01c3-4f8a-be92-38bb75f7ef50": {"__data__": {"id_": "9faad717-01c3-4f8a-be92-38bb75f7ef50", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8e40a6f1-39a9-4d99-8df9-3781bc15fd13", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "88590b07a933a1d338be37e20ea4e983f946958b8be1289d3410679161d14699", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\ncase Dtype::DATE_DAY:\treturn day <= other.get_val<uint32_t>();\r\n\r\n\tdefault:\r\n\r\n\t\tstring operation = \" <= \";\r\n\t\tcout << \"Comparision Error:: \" <<\r\n\t\t\tDtype::DATE << \"(\" << *this << \")\"\r\n\t\t\t+ operation\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\t\tbreak;\r\n\t\treturn 0;\r\n\r\n\t}\r\n\treturn 0;\r\n\r\n}\r\nbool Date::operator >= (const Object& other)  const\r\n{\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this >= other.get_val<Date>();\r\n\tcase Dtype::DATE_YEAR:  return year  >= other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_MONTH: return month >= other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_DAY:\treturn day >= other.get_val<uint32_t>();\r\n\r\n\tdefault:\r\n\r\n\r\n\t\tstring operation = \" >= \";\r\n\t\tcout << \"Comparision Error:: \" <<\r\n\t\t\tDtype::DATE << \"(\" << *this << \")\"\r\n\t\t\t+ operation\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\r\n\t\tassert(0);\t\t\r\n\t\tbreak;\r\n\t\treturn 0;\r\n\r\n\t}\r\n\treturn 0;\r\n\r\n}\r\n\r\nbool Date::operator == (const Object& other)  const\r\n{\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this == other.get_val<Date>();\r\n\tcase Dtype::DATE_YEAR:  return year  == other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_MONTH: return month == other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_DAY:\treturn day == other.get_val<uint32_t>();\r\n\r\n\tdefault:\r\n\r\n\r\n\t\tstring operation = \" == \";\r\n\t\tcout << \"Comparision Error:: \" <<\r\n\t\t\tDtype::DATE << \"(\" << *this << \")\"\r\n\t\t\t+ operation\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\r\n\t\tbreak;\r\n\t\treturn 0;\r\n\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1511, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72565298-45aa-4b2f-bfac-18bc3ec8244f": {"__data__": {"id_": "72565298-45aa-4b2f-bfac-18bc3ec8244f", "embedding": null, "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "841863cc-ac91-4c04-aa0e-61789519e340", "node_type": "4", "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9001d9c0d37f1e9678d2e3b6050bb7bf7043e5c8105aaaef15ac239eb3b008e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.cpp\n<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\r\n\t\tbreak;\r\n\t\treturn 0;\r\n\r\n\t}\r\n\treturn 0;\r\n\r\n}\r\n\r\nbool Date::operator!=(const Object& other) const\r\n{\r\n\tswitch (other.type)\r\n\t{\r\n\tcase Dtype::DATE:\t\treturn *this != other.get_val<Date>();\r\n\tcase Dtype::DATE_YEAR:  return year  != other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_MONTH: return month != other.get_val<uint32_t>();\r\n\tcase Dtype::DATE_DAY:\treturn day != other.get_val<uint32_t>();\r\n\r\n\tdefault:\r\n\r\n\r\n\t\tstring operation = \" != \";\r\n\t\tcout << \"Comparision Error:: \" <<\r\n\t\t\tDtype::DATE << \"(\" << *this << \")\"\r\n\t\t\t+ operation\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\r\n\t\tbreak;\r\n\t\treturn 0;\r\n\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nDate& Date::operator = (const Date& other)\r\n{\r\n\tif (this != &other) {\r\n\t\tday   = other.day;\r\n\t\tmonth = other.month;\r\n\t\tyear  = other.year;\r\n\t}\r\n\treturn *this;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 888, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de9f7ccf-6467-43ab-83eb-1fcb99ab0c7b": {"__data__": {"id_": "de9f7ccf-6467-43ab-83eb-1fcb99ab0c7b", "embedding": null, "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53adbefa-b741-4033-a374-21cf8c391907", "node_type": "4", "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "1136a2145f234583308d040618521ebf28ede24b674b7fcc3bff9e4558405295", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.h\n#pragma once\r\n\r\n\r\n#ifndef DATE_CLS\r\n#define DATE_CLS\r\n\r\n#include <iostream>\r\n#include <string>\r\n#include <cassert>\r\n#include <sstream>\r\n#include <functional>\r\n\r\n\r\n#include \"../enums/enums.h\"\r\n\r\nclass Object;\r\n\r\n\r\nusing namespace std;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f9b0054-ea3c-439f-9650-ec980d42c27a": {"__data__": {"id_": "2f9b0054-ea3c-439f-9650-ec980d42c27a", "embedding": null, "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "95d9d9eb-3e47-4697-acf8-a80c2d1df643", "node_type": "4", "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "7c2d9b8782f66e13c551b82b640c997585c8a177326d828d392214b6ceec9e9f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.h\nclass Date\r\n{\r\n\tunsigned int  year;\r\n\tunsigned char month;\r\n\tunsigned char day;\r\n\r\n\tchar find_delimiter(string datestr);\r\n\tDate parseDateFromString(string dateStr, DateFormat dateFormat);\r\n\tvector<Object> validate_date_str(Object date_str);\r\n\r\npublic:\r\n\r\n\tDate();\r\n\tDate(const char date_str[]);\r\n\tDate(Object object);\r\n\tDate(string& datestr, DateFormat dateformat = DateFormat::AUTO);\r\n\tDate(const Object& datestr, DateFormat dateformat = DateFormat::AUTO);\r\n\tDate(unsigned int year, unsigned char month, unsigned char day);\r\n\r\n\r\n\tstatic Date now();\r\n\r\n\tDate copy();\r\n\r\n\tObject get_year()  const;\r\n\tObject get_month() const;\r\n\tObject get_day()   const;\r\n\r\n\tuint32_t get_attr_num(Dtype attr_type);\r\n\tObject get_attr(Dtype attr_type);\r\n\r\n\tunsigned int get_year_num  ();\r\n\tunsigned char get_month_num();\r\n\tunsigned char get_day_num  ();\r\n\r\n\tstring get() const;\r\n\r\n\tDateFormat extractDateFormate(Object date_str);\r\n\r\n\r\n\tbool operator < (const Date& other) const;\r\n\tbool operator > (const Date& other) const;\r\n\r\n\tbool operator <= (const Date& other) const;\r\n\tbool operator >= (const Date& other) const;\r\n\tbool operator == (const Date& other) const;\r\n\tbool operator != (const Date& other) const;\r\n\r\n\r\n\tbool operator < (const Object& other) const;\r\n\tbool operator > (const Object& other) const;\r\n\r\n\tbool operator <= (const Object& other) const;\r\n\tbool operator >= (const Object& other) const;\r\n\tbool operator == (const Object& other) const;\r\n\r\n\tbool operator != (const Object& other) const;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1504, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b28592e-5595-4bd2-97f8-639d5ed8fe08": {"__data__": {"id_": "9b28592e-5595-4bd2-97f8-639d5ed8fe08", "embedding": null, "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8e7b6de9-1c12-4808-acc7-c379c22665c1", "node_type": "4", "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6c890b87777adf94076cfd4443b79d1925de24d08bdec5ca2a554548a007373b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Date.h\nbool operator == (const Object& other) const;\r\n\r\n\tbool operator != (const Object& other) const;\r\n\r\n\tDate& operator = (const Date& otherDate);\r\n\r\n\tfriend ostream& operator << (ostream& os, const Date& date) {\r\n\t\tos << date.get();\r\n\t\treturn os;\r\n\t}\r\n\r\n\r\n\tstruct Hash {\r\n\r\n\t\tstd::size_t operator()(const Date& date) const {\r\n\t\t\tstd::size_t hash_value = 0;\r\n\r\n\t\t\t// Use different prime constants for each field\r\n\t\t\thash_value ^= std::hash<unsigned int>{}(date.day) + 0x9e3779b9 + (hash_value << 6) + (hash_value >> 2);\r\n\t\t\thash_value ^= std::hash<unsigned int>{}(date.month) + 0x7f4a7c15 + (hash_value << 6) + (hash_value >> 2);\r\n\t\t\thash_value ^= std::hash<int>{}(date.year) + 0x7fed7fed + (hash_value << 6) + (hash_value >> 2);\r\n\r\n\t\t\treturn hash_value;\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nnamespace std {\r\n\ttemplate <>\r\n\tstruct hash<Date> {\r\n\t\tstd::size_t operator()(const Date& obj) const {\r\n\t\t\treturn Date::Hash{}(obj);\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\n#endif // !DATE", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 956, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32062a0a-3cb3-45be-9467-5a4a5fc0f95b": {"__data__": {"id_": "32062a0a-3cb3-45be-9467-5a4a5fc0f95b", "embedding": null, "metadata": {"source": "enums.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5797c2d1-8dcf-4cb2-b0fd-beae5d3dbc15", "node_type": "4", "metadata": {"source": "enums.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "20947f5c056594d6b3808287d25a36f20bbb14483cc2f6da3249ca3d9c626445", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: enums.cpp\n#include \"enums.h\"\r\n\r\n\r\n// Definition and initialization of the unordered map\r\nconst unordered_map<Dtype, string> dtypeMap = {\r\n\t{Dtype::STRING, \"STRING\"},\r\n\r\n\t//////////////////////////////// Numbers\r\n\t{Dtype::NUMBER, \"NUMBER\"},\r\n\r\n\t{Dtype::INT8, \"INT8\"},\r\n\t{Dtype::INT16, \"INT16\"},\r\n\t{Dtype::INT32, \"INT32\"},\r\n\t{Dtype::INT64, \"INT64\"},\r\n\r\n\t{Dtype::FLOAT, \"FLOAT\"},\r\n\t{Dtype::DOUBLE, \"DOUBLE\"},\r\n\t////////////////////////////////\r\n\r\n\r\n\t{Dtype::DATE, \"DATE\"},\r\n\r\n\t{Dtype::DATE_ATTR, \"DATE_ATTR\"},\r\n\t{Dtype::DATE_YEAR, \"DATE_YEAR\"},\r\n\t{Dtype::DATE_MONTH, \"DATE_MONTH\"},\r\n\t{Dtype::DATE_DAY, \"DATE_DAY\"},\r\n\r\n\t{Dtype::NA, \"NA\"}\r\n};\r\n\r\nconst unordered_map<StatFun, string> statfun_str = {\r\n\t{StatFun::MEAN, \"MEAN\"},\r\n\t{StatFun::MEDIAN, \"MEAN\"},\r\n\t{StatFun::STD, \"STD\"},\r\n\t{StatFun::COUNT, \"COUNT\"},\r\n\t{StatFun::MODE, \"MODE\"},\r\n\t{StatFun::SUM, \"SUM\"},\r\n};\r\n\r\n\r\n\r\n\r\nstd::ostream& operator<<(std::ostream& os,const Dtype& dtype) {\r\n\r\n\tos << dtypeMap.at(dtype);\r\n\r\n\treturn os;\r\n}\r\n\r\nstd::ostream& operator<<(std::ostream& os, const SortAlgo& algo)\r\n{\r\n\tswitch (algo) {\r\n\tcase SortAlgo::heap:\r\n\t\tos << \"Heap Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::insertion:\r\n\t\tos << \"Insertion Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::bubble:\r\n\t\tos << \"Bubble Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::selection:\r\n\t\tos << \"Selection Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::double_selection:\r\n\t\tos << \"Double Selection Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::merge:\r\n\t\tos << \"Merge Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::merge_p:\r\n\t\tos << \"Parallel Merge Sort\";", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1521, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a0102ec-e546-408a-88e2-223008ee2759": {"__data__": {"id_": "8a0102ec-e546-408a-88e2-223008ee2759", "embedding": null, "metadata": {"source": "enums.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b400607f-5963-476f-a123-c0aacb332a1d", "node_type": "4", "metadata": {"source": "enums.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6fff0ac8fe7ff7bde635e8712b0e44744bc1272615aa7212d0d8a1c8eeceba60", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: enums.cpp\nos << \"Merge Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::merge_p:\r\n\t\tos << \"Parallel Merge Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::merge_and_insertion:\r\n\t\tos << \"Merge-Insertion Sort\";\r\n\t\tbreak;\r\n\tcase SortAlgo::quick:\r\n\t\tos << \"Quick Sort\";\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tos << \"Unknown Sort Algorithm\";\r\n\t\tbreak;\r\n\t}\r\n\treturn os;\r\n}\r\n\r\n\r\n\t\r\nstd::ostream& operator<<(std::ostream& os, const DateFormat& dateFormate) {\r\n\r\n\tswitch (dateFormate)\r\n\t{\r\n\tcase DateFormat::YYYY_MM_DD:\r\n\t\tos << \"YYYY_MM_DD\";\r\n\t\tbreak;\r\n\r\n\tcase DateFormat::YYYY_DD_MM:\r\n\t\tos << \"YYYY_DD_MM\";\r\n\t\tbreak;\r\n\r\n\tcase DateFormat::DD_MM_YYYY:\r\n\t\tos << \"DD_MM_YYYY\";\r\n\t\tbreak;\r\n\tcase DateFormat::MM_DD_YYYY:\r\n\t\tos << \"MM_DD_YYYY\";\r\n\t\tbreak;\r\n\r\n\tdefault:\r\n\t\tbreak;\r\n\t}\r\n\treturn os;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 751, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d779f43-cf6c-4403-bc3c-c82202aafb83": {"__data__": {"id_": "6d779f43-cf6c-4403-bc3c-c82202aafb83", "embedding": null, "metadata": {"source": "enums.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3fe49d07-4daf-4b7d-9f77-d9d0b0d93c2a", "node_type": "4", "metadata": {"source": "enums.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "42b93692069c51b63d173d24f250a236f2032734eff8ddffb42ff3ebf969e841", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: enums.h\n#ifndef ENUMS\r\n#define ENUMS\r\n\r\n#include <iostream>\r\n#include <string>\r\n#include <unordered_map>\r\n#include <typeinfo>\r\n\r\n\r\nusing namespace std;\r\n\r\n\r\n\r\nenum class Dtype {\r\n\r\n\tNA,\r\n\t////////////////////\r\n\r\n\tINT8,\r\n\tINT16,\r\n\tINT32,\r\n\tINT64,\r\n\tFLOAT,\r\n\tDOUBLE,\r\n\tNUMBER,\r\n\r\n\t////////////////////\r\n\r\n\tDATE_YEAR,\r\n\tDATE_MONTH,\r\n\tDATE_DAY,\r\n\tDATE_ATTR,\r\n\r\n\tDATE,\r\n\tSTRING\r\n};\r\n\r\n\r\nenum class SortAlgo {\r\n\theap,\r\n\tinsertion,\r\n\tbubble,\r\n\tselection,\r\n\tdouble_selection,\r\n\tmerge,\r\n\tmerge_p,\r\n\tmerge_and_insertion,\r\n\tquick\r\n};\r\n\r\n\r\nstd::ostream& operator<<(std::ostream& os, const Dtype& dtype); // Declaration\r\n\r\n\r\n// Overload the << operator for SortAlgo\r\nstd::ostream& operator<<(std::ostream& os, const SortAlgo& algo);\r\n\r\n\r\n// Declaration of the unordered map\r\nextern const unordered_map<Dtype, string> dtypeMap;\r\n\r\n\r\nenum class DateFormat {\r\n\tAUTO,\r\n\tYYYY_MM_DD,\r\n\tYYYY_DD_MM,\r\n\tDD_MM_YYYY,\r\n\tMM_DD_YYYY\r\n};\r\n\r\nstd::ostream& operator<<(std::ostream& os, const DateFormat& dtype); // Declaration\r\n\r\nenum StatFun {\r\n\tMEAN,\r\n\tMEDIAN,\r\n\tSTD,\r\n\tMODE,\r\n\tSUM,\r\n\tCOUNT\r\n};\r\nextern const unordered_map<StatFun, string> statfun_str;\r\n\r\n#endif", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1148, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b79facb4-e88c-4deb-a573-49167b824e36": {"__data__": {"id_": "b79facb4-e88c-4deb-a573-49167b824e36", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9480e5db-34ab-499b-98b7-8f28ba13925a", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "7becbb4e51816dc974a4b6e88ea4a8291779743eba6630c5cc4bd50621595730", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\n#include \"object.h\"\r\n\r\n\r\n\r\n// Constructors ///////////////////////////////////////\r\n\r\nObject::Object()\r\n{\r\n\tvalue = nullptr;\r\n\ttype = Dtype::NA;\r\n\tsecType = Dtype::NA;\r\n}\r\n\r\n\r\nObject::Object(String invalue, Dtype intype)\r\n{\r\n\tparseAndSetValue(invalue.get().c_str(), false, intype);\r\n}\r\n\r\nObject::Object(double invalue, Dtype intype)\r\n{\r\n\ttype = intype;\r\n\tsecType = get_sec_type(intype);\r\n\r\n\tswitch (type)\r\n\t{\r\n\tcase Dtype::INT8:\r\n\t{\r\n\t\tsetVal<int8_t>((int8_t)invalue);\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT16:\r\n\t{\r\n\t\tsetVal<int16_t>((int16_t)invalue);\r\n\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT32:\r\n\t{\r\n\t\tsetVal<int32_t>((int32_t)invalue);\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT64:\r\n\t{\r\n\t\tsetVal<int64_t>((int64_t)invalue);\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::FLOAT:\r\n\t{\r\n\t\tsetVal<float_t>((float_t)invalue);\r\n\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::DOUBLE:\r\n\t{\r\n\t\tsetVal<double>(invalue);\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::STRING:\r\n\t{\r\n\t\tsetVal<String>(std::to_string(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::NA:\r\n\t\tvalue = NULL;\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tif (secType == Dtype::DATE_ATTR) {\r\n\r\n\t\t\tsetVal<uint32_t>((uint32_t)invalue);\r\n\t\t}\r\n\t\telse value = NULL;\r\n\t\tbreak;\r\n\t}\r\n}\r\n\r\nObject::Object(const char invalue[])\r\n{\r\n\tparseAndSetValue(invalue, true);\r\n}\r\n\r\nObject::Object(string invalue)\r\n{\r\n\tparseAndSetValue(invalue.c_str(), true);\r\n}\r\n\r\nObject::Object(String invalue)\r\n{\r\n\tparseAndSetValue(invalue.get().c_str(), true);\r\n}\r\n\r\nObject::Object(double invalue)\r\n{\r\n\tif (static_cast<int>(invalue) == invalue) {\r\n\r\n\t\tsetVal<int32_t>(invalue);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1519, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b3f5061-20e2-4530-8cbd-c64bcdb2cc1f": {"__data__": {"id_": "1b3f5061-20e2-4530-8cbd-c64bcdb2cc1f", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fab7694f-f2a4-4fa6-88e3-33e93b725137", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e2d39e78b76f0ce8b96066e7cd05131a742e90385754513e32ba4df177f41c5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\n{\r\n\tif (static_cast<int>(invalue) == invalue) {\r\n\r\n\t\tsetVal<int32_t>(invalue);\r\n\t\ttype = Dtype::INT32;\r\n\t}\r\n\telse {\r\n\r\n\t\tsetVal<float>(invalue);\r\n\t\ttype = Dtype::FLOAT;\r\n\t}\r\n\tsecType = Dtype::NUMBER;\r\n}\r\n\r\nObject::Object(const Object& invalue)\r\n{\r\n\tcopyFrom(invalue);\r\n}\r\n\r\n\r\nObject::Object(Date date)\r\n{\r\n\tsetVal<Date>(date.copy());\r\n\ttype = Dtype::DATE;\r\n\tsecType = Dtype::DATE;\r\n}\r\n\r\nObject::Object(unsigned int year, unsigned char month, unsigned char day)\r\n{\r\n\t*this = Object(Date(year, month, day));\r\n}\r\n\r\nObject::Object(string datestr, DateFormat dateformat)\r\n{\r\n\t*this = Object(Date(datestr, dateformat));\r\n}\r\n\r\nObject::Object(Object datestr, DateFormat dateformat)\r\n{\r\n\t*this = Object(Date(datestr, dateformat));\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\npair<Dtype, Dtype> Object::getTypeFromStr(const string& str)\r\n{\r\n\t/* detect if an alpha letter or\r\n\t an not a digit and is not a \".\"\r\n\t so the type is a string\r\n\t else The type is a number.*/\r\n\r\n\tDtype type_ = Object::get_type(str);\r\n\r\n\tDtype secType = is_num(type_) ? Dtype::NUMBER : Dtype::STRING;\r\n\r\n\treturn pair<Dtype, Dtype>(type_, secType);\r\n}\r\n\r\n\r\ninline void Object::parseAndSetValue(\r\n\tconst char invalue[],\r\n\tbool parseInVal,\r\n\tDtype dtype)\r\n{\r\n\tauto types = parseInVal ? getTypeFromStr(invalue) : pair(dtype, get_sec_type(dtype));\r\n\ttype = types.first;\r\n\tsecType = types.second;\r\n\r\n\t// to parse it and put it in right place.\r\n\tswitch (type)\r\n\t{\r\n\r\n\tcase Dtype::INT8:\r\n\t{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1495, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ad96b11-e971-49c6-b3fa-af4e1bbc69e0": {"__data__": {"id_": "2ad96b11-e971-49c6-b3fa-af4e1bbc69e0", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cbb653e9-9993-4085-a896-350d25a77429", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "110fcf68cdee920ce64c8e690f02a939b6d4a4244607d06c90f9089f0250c8b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\n// to parse it and put it in right place.\r\n\tswitch (type)\r\n\t{\r\n\r\n\tcase Dtype::INT8:\r\n\t{\r\n\t\tsetVal<int8_t>(stoi(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT16:\r\n\t{\r\n\t\tsetVal<int16_t>(stoi(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT32:\r\n\t{\r\n\t\tsetVal<int32_t>(stoi(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT64:\r\n\t{\r\n\t\tsetVal<int64_t>(stol(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::FLOAT:\r\n\t{\r\n\t\tsetVal<float_t>(stof(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::DOUBLE:\r\n\t{\r\n\t\tsetVal<double>(stod(invalue));\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::STRING:\r\n\t{\r\n\t\tsetVal<String>(invalue);\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::NA:\r\n\t\tvalue = NULL;\r\n\t\tbreak;\r\n\tdefault:\r\n\r\n\t\tif (secType == Dtype::DATE_ATTR) {\r\n\r\n\t\t\tsetVal<uint32_t>(stoi(invalue));\r\n\t\t}\r\n\t\telse value = NULL;\r\n\t\tbreak;\r\n\t}\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 777, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8068c98a-a0bb-4740-b61f-96bf793c1229": {"__data__": {"id_": "8068c98a-a0bb-4740-b61f-96bf793c1229", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2bf72bfc-8d4e-41fc-a8a1-7d9312278018", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ee047d9391d551c7d7871383b2c47a6a2c44ded8da9956f132ea071525f6cd52", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nvoid Object::copyFrom(const Object& other)\r\n{\r\n\r\n\tif (this == &other) return;\r\n\r\n\ttype = other.type;\r\n\tsecType = other.secType;\r\n\r\n\tswitch (type) {\r\n\r\n\tcase Dtype::INT8:\r\n\t\tsetVal(other.get_val<int8_t>());\r\n\t\tbreak;\r\n\r\n\tcase Dtype::INT16:\r\n\t\tsetVal(other.get_val<int16_t>());\r\n\r\n\t\tbreak;\r\n\r\n\tcase Dtype::INT32:\r\n\t\tsetVal(other.get_val<int32_t>());\r\n\t\tbreak;\r\n\r\n\tcase Dtype::INT64:\r\n\t\tsetVal(other.get_val<int64_t>());\r\n\t\tbreak;\r\n\r\n\r\n\tcase Dtype::FLOAT:\r\n\t\tsetVal(other.get_val<float>());\r\n\t\tbreak;\r\n\r\n\tcase Dtype::DOUBLE:\r\n\t\tsetVal(other.get_val<double>());\r\n\r\n\t\tbreak;\r\n\r\n\tcase Dtype::STRING:\r\n\t\tsetVal(other.get_val<String>());\r\n\r\n\t\tbreak;\r\n\r\n\tcase Dtype::DATE:\r\n\t\tsetVal(other.get_val<Date>());\r\n\t\tbreak;\r\n\r\n\tcase Dtype::DATE_YEAR:\r\n\tcase Dtype::DATE_MONTH:\r\n\tcase Dtype::DATE_DAY:\r\n\t\tsetVal(other.get_val<uint32_t>());\r\n\t\tbreak;\r\n\r\n\tcase Dtype::NA:\r\n\t\tvalue = nullptr;\r\n\t\tbreak;\r\n\r\n\tdefault:\r\n\t\tbreak;\r\n\t}\r\n}\r\n\r\n\r\n// get methods ///////////////////////////////////////\r\n\r\ninline double Object::value_num() const\r\n{\r\n\r\n\tif (secType == Dtype::NUMBER) {\r\n\t\tswitch (type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:\r\n\t\t\treturn (double)get_val<int8_t>();\r\n\r\n\t\tcase Dtype::INT16:\r\n\t\t\treturn (double)get_val<int16_t>();\r\n\r\n\r\n\t\tcase Dtype::INT32:\r\n\t\t\treturn (double)get_val<int32_t>();\r\n\r\n\r\n\t\tcase Dtype::INT64:\r\n\t\t\treturn (double)get_val<int64_t>();\r\n\r\n\r\n\t\tcase Dtype::FLOAT:\r\n\t\t\treturn (double)get_val<float>();\r\n\r\n\r\n\t\tcase Dtype::DOUBLE:\r\n\t\t\treturn (double)get_val<double>();\r\n\r\n\t\t}\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "44230e33-84a0-404e-bd6a-19c0e0a9a3a7": {"__data__": {"id_": "44230e33-84a0-404e-bd6a-19c0e0a9a3a7", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fca68294-5e7b-4397-9c21-f957aaf0f440", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "460dc1a7acecc7f8465ba124db0db0d95cb810264eeaabe798d1982269e8cb43", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::DOUBLE:\r\n\t\t\treturn (double)get_val<double>();\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcout << \"ValueError:: You Are trying to get Value with Dtype Different Dtype the Object: \" << type << endl;\r\n\tassert(0);\r\n\r\n\treturn double();\r\n}\r\n\r\ninline string Object::get() const {\r\n\r\n\tif (value != nullptr) {\r\n\r\n\t\tswitch (type) {\r\n\r\n\t\tcase Dtype::INT8: {\r\n\t\t\treturn to_string(get_val<int8_t>());\r\n\t\t}\r\n\r\n\t\tcase Dtype::INT16: {\r\n\t\t\treturn to_string(get_val<int16_t>());\r\n\t\t}\r\n\r\n\t\tcase Dtype::INT32: {\r\n\t\t\treturn to_string(get_val<int32_t>());\r\n\t\t}\r\n\r\n\t\tcase Dtype::INT64: {\r\n\t\t\treturn to_string(get_val<int64_t>());\r\n\t\t}\r\n\r\n\t\tcase Dtype::FLOAT: {\r\n\t\t\treturn to_string(get_val<float>());\r\n\t\t}\r\n\r\n\t\tcase Dtype::DOUBLE: {\r\n\t\t\treturn to_string(get_val<double>());\r\n\t\t}\r\n\r\n\t\tcase Dtype::DATE: {\r\n\t\t\treturn\t(get_val<Date>()).get();\r\n\t\t}\r\n\t\t\r\n\t\tcase Dtype::STRING: {\r\n\t\t\treturn (get_val<String>()).get();\r\n\t\t}\r\n\t\t\t\r\n\t\tdefault:\r\n\r\n\t\t\tif (secType == Dtype::DATE_ATTR)\r\n\t\t\t\treturn  to_string(get_val<uint32_t>());\r\n\r\n\t\t\tassert(0 && \"The Value IS Not Can't be get\");\r\n\t\t\treturn \"NULL\";\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\treturn \"NULL\";\r\n\t}\r\n\treturn \"NULL\";\r\n}\r\n\r\n\r\ntemplate<typename T>\r\ninline T& Object::get_val() const\r\n{\r\n\tif (auto* typedValue = dynamic_cast<TypedValue<T>*>(value.get())) {\r\n\t\treturn typedValue->getValue();  // Use getValue() from TypedValue\r\n\t}\r\n\telse {\r\n\t\t//cout << \"ERROR: Object(\" << type << \")\" << \" and you trying to get \" << typeid(T).name() << end;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1463, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "396e7ac1-cbe8-4f15-bfb4-d39c2d22e061": {"__data__": {"id_": "396e7ac1-cbe8-4f15-bfb4-d39c2d22e061", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cf856626-99a7-4a6c-b0b8-bdb31d61403e", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b7bd71a6ad93cbf8a5d563cae3ff5cbd527d49ca9afd662d7c642ff660fe95f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nthrow std::runtime_error(\"Type mismatch or value is not set.\");\r\n\t}\r\n}\r\n\r\ntemplate<typename T>\r\ninline T* Object::get_ptr() const\r\n{\r\n\tif (auto* typedValue = dynamic_cast<TypedValue<T>*>(value.get())) {\r\n\r\n\t\treturn (T*)typedValue;  // Use getValue() from TypedValue\r\n\t}\r\n\telse {\r\n\t\tthrow std::runtime_error(\"Type mismatch or value is not set.\");\r\n\t}\r\n}\r\n\r\n\r\nObject Object::get_date_year()\r\n{\r\n\tif (type == Dtype::DATE_YEAR) return *this;\r\n\r\n\tif (type == Dtype::DATE) {\r\n\r\n\t\treturn get_val<Date>().get_year();\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"this Method (getYear) Valid only for DATE dtype.\");\r\n\r\n\treturn Object();\r\n}\r\n\r\nObject Object::get_date_month()\r\n{\r\n\tif (type == Dtype::DATE_MONTH) return *this;\r\n\r\n\tif (type == Dtype::DATE) {\r\n\r\n\t\treturn get_val<Date>().get_month();\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"this Method (getMonth) Valid only for DATE dtype.\");\r\n\treturn Object();\r\n}\r\n\r\nObject Object::get_date_day()\r\n{\r\n\tif (type == Dtype::DATE_DAY) return *this;\r\n\r\n\tif (type == Dtype::DATE) {\r\n\r\n\t\treturn get_val<Date>().get_day();\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (getDay) Valid only for DATE dtype.\");\r\n\r\n\treturn Object();\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n// string methods ////////////////////////////////////\r\n\r\nObject Object::up()\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn Object(get_val<String>().up(), Dtype::STRING);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (up) Valid only for STRING dtype.\");", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1503, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48283ef2-6b77-4b51-b244-a0f9d45d3640": {"__data__": {"id_": "48283ef2-6b77-4b51-b244-a0f9d45d3640", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "05100e91-71db-44cf-9b5e-8c18ce9755a3", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3014ecc0900492fa7306eba29f8a7fee87392e2bfeaa130b5a8e6e60086a3310", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\n}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (up) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\nObject Object::lw()\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn Object(get_val<String>().lw(), Dtype::STRING);\r\n\t}\r\n\tprint_info();\r\n\tassert(false && \"Method (lw) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\nObject Object::title()\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn Object(get_val<String>().title(), Dtype::STRING);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (title) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\n\r\n\r\nObject Object::stripl()\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().stripl();\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (stripl) Valid only for STRING dtype.\");\r\n\r\n\r\n\treturn Object();\r\n}\r\nObject Object::stripr()\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().stripr();\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (stripr) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\nObject Object::strip()\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().strip();\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (strip) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\n\r\n\r\nObject Object::replace(string from, string to)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn Object(get_val<String>().replace(from, to), Dtype::STRING);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (replace) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1471, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7eab3c44-c36f-4d97-9fd6-8dd08238f0bd": {"__data__": {"id_": "7eab3c44-c36f-4d97-9fd6-8dd08238f0bd", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3e66c6f2-3a07-4681-9126-2a52bb617fed", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "293c08af5d4abd45f79388cadf25772beca7884990f9a66ff69c225c4027eaa9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nassert(false && \"Method (replace) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\n\r\nObject Object::extract_pattern(const string& pattern)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().extract_pattern(pattern);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (stripl) Valid only for STRING dtype.\");\r\n\r\n\treturn Object();\r\n}\r\n\r\n\r\nsize_t Object::find(string target, int start)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().find(target, start);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (find) Valid only for STRING dtype.\");\r\n\treturn size_t();\r\n}\r\n\r\nbool Object::contains(string target)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().find(target) != -1;\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (contains) Valid only for STRING dtype.\");\r\n\treturn false;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 845, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90bf7916-92e3-4b06-9943-2fd0c44cebd6": {"__data__": {"id_": "90bf7916-92e3-4b06-9943-2fd0c44cebd6", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "87241ec6-977a-4b18-bbe3-7959d33c1453", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "eed8df9c7074db79718dc5589f6c4f9d75fc8ff923d927fa6028110fdee76e9d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nint Object::count(string target)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().count(target);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (count) Valid only for STRING dtype.\");\r\n\treturn 0;\r\n}\r\n\r\n\r\nObject Object::substr(int start, int end)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn Object(get_val<String>().substr(start, end), Dtype::STRING);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (substr) Valid only for STRING dtype.\");\r\n\treturn Object();\r\n}\r\n\r\nvector<Object> Object::split(string sep, bool enable_numbers)\r\n{\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn get_val<String>().split(sep, enable_numbers);\r\n\t}\r\n\r\n\tprint_info();\r\n\tassert(false && \"Method (split) Valid only for STRING dtype.\");\r\n\treturn vector<Object>();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "989b5652-ce50-4b94-82b6-f76b48e6f2cd": {"__data__": {"id_": "989b5652-ce50-4b94-82b6-f76b48e6f2cd", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c963056-63a8-41f7-9c33-3bdec3f8e993", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4aa8c0b5b2a43914f7a90f14f0c6354b5f7443960b02e716844041dc76c9f9b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nint Object::len() const\r\n{\r\n\tif (secType == Dtype::NUMBER) {\r\n\r\n\t\tstd::ostringstream oss;\r\n\t\toss << value_num();\r\n\t\treturn (int)(oss.str().length());\r\n\t}\r\n\r\n\treturn (int)(get().length());\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n// static generate random Objects /////////////////////\r\n\r\nObject Object::rand_num(int max, int min)\r\n{\r\n\tstd::random_device rd;\r\n\tstd::mt19937 gen(rd());\r\n\r\n\t// Define a uniform distribution for integers in the range [min, max]\r\n\tstd::uniform_int_distribution<int> dist(min, max);\r\n\r\n\treturn Object((float)dist(gen));\r\n}\r\n\r\nvector<Object> Object::rand_nums(int size, int max, int min, unsigned int seed)\r\n{\r\n\tvector<Object> values(size);\r\n\r\n\tstd::random_device rd;\r\n\tstd::mt19937 gen(seed == 0 ? rd() : seed);\r\n\r\n\t// Define a uniform distribution for integers in the range [min, max]\r\n\tstd::uniform_int_distribution<int> dist(min, max);\r\n\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tvalues[i] = dist(gen);\r\n\t}\r\n\r\n\treturn values;\r\n}\r\n\r\nDate Object::rand_date()\r\n{\r\n\tstd::random_device rd;\r\n\tstd::mt19937 gen(rd());\r\n\r\n\t// Define a uniform distribution for integers in the range [min, max]\r\n\tstd::uniform_int_distribution<int> dist(0, 10000);\r\n\r\n\r\n\tint year = 1900 + dist(gen) % 125;  // Random year between 1900 and 2024\r\n\tint month = 1 + dist(gen) % 12;   // Random month between 1 and 12\r\n\tint day = 1 + dist(gen) % 31;   // Random day between 1 and 31 (not handling leap years)\r\n\r\n\treturn Date(year, month, day);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "966bcd91-7087-40f9-b0de-9af7cad7c765": {"__data__": {"id_": "966bcd91-7087-40f9-b0de-9af7cad7c765", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "893a3a3b-787b-4967-a3bd-fc26e16e9509", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4f3e779e6269dd2d89471532886b3999f222f5797ce07be2f9d5db565bf5e9c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nreturn Date(year, month, day);\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n// converting Objects to another valid Objects Dtype //\r\n\r\n\r\ninline Object Object::to_type(const Dtype& new_type, const DateFormat dateformat)\r\n{\r\n\t\r\n\tif (new_type == this->type) return *this;\r\n\r\n\tif (new_type == Dtype::DATE) {\r\n\r\n\t\tassert(type == Dtype::STRING && \"Cant Convert this object to Date\");\r\n\r\n\t\treturn Object(Date(*this, dateformat));\r\n\t}\r\n\r\n\tswitch (type)\r\n\t{\r\n\tcase Dtype::INT8:   return Object(get_val<int8_t>() , new_type);\r\n\tcase Dtype::INT16:  return Object(get_val<int16_t>(), new_type);\r\n\tcase Dtype::INT32:  return Object(get_val<int32_t>(), new_type);\r\n\tcase Dtype::INT64:  return Object(get_val<int64_t>(), new_type);\r\n\tcase Dtype::FLOAT:  return Object(get_val<float>()  , new_type);\r\n\tcase Dtype::DOUBLE: return Object(get_val<double>() , new_type);\r\n\tcase Dtype::DATE: {\r\n\r\n\t\tif (Object::get_sec_type(new_type) == Dtype::DATE_ATTR) {\r\n\t\t\treturn get_val<Date>().get_attr(new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::STRING: {\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn Object(stoi(get_val<String>().get()), new_type);\r\n\t\t}\r\n\t\tcatch (const std::exception&)\r\n\t\t{\r\n\t\t\tprint_info();\r\n\t\t\tcout << \"Can't Converting The string to Dtype: \" << new_type << endl;\r\n\t\t\tassert(false);\r\n\t\t\treturn Object();\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::NA: return Object();\r\n\r\n\tdefault:\r\n\t\tif (secType == Dtype::DATE_ATTR) {\r\n\t\t\treturn Object(get_val<uint32_t>(), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\r\n\treturn Object();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c05a151-89d5-46ef-aa23-a1d1ae99c31d": {"__data__": {"id_": "3c05a151-89d5-46ef-aa23-a1d1ae99c31d", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df2bb496-c108-4107-b0e5-7b8113dc5706", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f5d911ea2bf9efffab096f3683e7949abcf28a79460d846f9223cf768f1b3aa0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nvoid Object::to_type(vector<Object>& values, Dtype new_type)\r\n{\r\n\tfor (Object& obj : values) {\r\n\t\tobj = obj.to_type(new_type);\r\n\t}\r\n}\r\n\r\ninline Object Object::to_str()\r\n{\r\n\treturn to_type(Dtype::STRING);\r\n}\r\n\r\nObject Object::to_int8 ()\r\n{\r\n\treturn to_type(Dtype::INT8);\r\n}\r\nObject Object::to_int16()\r\n{\r\n\treturn to_type(Dtype::INT16);\r\n}\r\nObject Object::to_int32()\r\n{\r\n\treturn to_type(Dtype::INT32);\r\n}\r\nObject Object::to_int64()\r\n{\r\n\treturn to_type(Dtype::INT64);\r\n}\r\n\r\nObject Object::to_float ()\r\n{\r\n\treturn to_type(Dtype::FLOAT);\r\n}\r\nObject Object::to_double()\r\n{\r\n\treturn to_type(Dtype::DOUBLE);\r\n}\r\n\r\nObject Object::to_date_year ()\r\n{\r\n\treturn to_type(Dtype::DATE_YEAR);\r\n}\r\nObject Object::to_date_month()\r\n{\r\n\treturn to_type(Dtype::DATE_MONTH);\r\n}\r\nObject Object::to_date_day  ()\r\n{\r\n\treturn to_type(Dtype::DATE_DAY);\r\n}\r\n\r\nObject Object::to_date(DateFormat dateformat)\r\n{\r\n\treturn to_type(Dtype::DATE, dateformat);\r\n}\r\n\r\nObject Object::optimize_mem()\r\n{\r\n\treturn to_type(get_optimized_type(*this));\r\n}\r\n\r\nDtype Object::optimize_mem(vector<Object>& values, bool with_mixed_type)\r\n{\r\n\tDtype highest_type = Dtype::NA;\r\n\r\n\tif (with_mixed_type) {\r\n\r\n\t\tfor (Object& obj : values) {\r\n\t\t\tobj = obj.optimize_mem();\r\n\t\t\tif (highest_type < obj.type) {\r\n\t\t\t\thighest_type = obj.type;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\thighest_type = get_highest_type(values);\r\n\t\tto_type(values, highest_type);\r\n\t}\r\n\r\n\treturn highest_type;\r\n}\r\n\r\nvector<Object> Object::from_vector_string(vector<string>& values)\r\n{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1508, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10fb71ae-c312-4672-bd16-966db5b97947": {"__data__": {"id_": "10fb71ae-c312-4672-bd16-966db5b97947", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "86f92053-3759-4a74-9ea5-1dc37329c667", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "64cd58fd9bf4a5e5f22a31aa01b23ab48f9b1b84644ea7df374b4ab03e48c48a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nreturn highest_type;\r\n}\r\n\r\nvector<Object> Object::from_vector_string(vector<string>& values)\r\n{\r\n\tCONVERT_VALUES_TO_OBJECTS(values, Dtype::STRING);\r\n}\r\nvector<Object> Object::from_vector_double(vector<double>& values)\r\n{\r\n\tCONVERT_VALUES_TO_OBJECTS(values, Dtype::DOUBLE);\r\n}\r\nvector<Object> Object::from_vector_int   (vector<int   >& values)\r\n{\r\n\tCONVERT_VALUES_TO_OBJECTS(values, Dtype::INT32);\r\n}\r\nvector<Object> Object::from_set_string   (set   <string>& values)\r\n{\r\n\tCONVERT_VALUES_TO_OBJECTS(values, Dtype::STRING);\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n// dealing with Object dtype //////////////////////////\r\n\r\n\r\nstring Object::type_str(Dtype type)\r\n{\r\n\treturn dtypeMap.at(type);\r\n}\r\n\r\nDtype Object::get_type(const std::string& str)\r\n{\r\n\tif (str.empty()) {\r\n\t\treturn Dtype::NA;\r\n\t}\r\n\r\n\tsize_t i = 0;\r\n\tbool hasDecimalPoint = false;\r\n\tbool isNumber = true;  // Flag to determine if it's a valid number\r\n\r\n\t// Check for a leading '+' or '-'\r\n\tif (str[0] == '+' || str[0] == '-') i++;\r\n\r\n\tfor (; i < str.size(); i++) {\r\n\t\tif (str[i] == '.') {\r\n\t\t\t// If there's more than one decimal point, it's invalid\r\n\t\t\tif (hasDecimalPoint) {\r\n\t\t\t\tisNumber = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\thasDecimalPoint = true;  // Mark that we've found a decimal point\r\n\t\t}\r\n\t\telse if (!std::isdigit(str[i])) {\r\n\t\t\t// If a non-digit character is found (not a decimal point), it's invalid\r\n\t\t\tisNumber = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!isNumber) {\r\n\t\treturn Dtype::STRING;\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1512, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c667a8d7-c163-436f-a621-23035e8ff85d": {"__data__": {"id_": "c667a8d7-c163-436f-a621-23035e8ff85d", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b38d3d99-4393-4aa0-be88-da83cc072937", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0df02fbb6dc8cc68a36f6cd57101c6a593c811cad72a7968155f72cf7086c4b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nisNumber = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!isNumber) {\r\n\t\treturn Dtype::STRING;\r\n\t}\r\n\telse if (hasDecimalPoint) {\r\n\t\treturn Dtype::FLOAT;\r\n\t}\r\n\telse {\r\n\t\treturn Dtype::INT32;\r\n\t}\r\n}\r\n\r\nDtype Object::get_sec_type(Dtype type)\r\n{\r\n\r\n\tif (\r\n\t\ttype == Dtype::INT8 ||\r\n\t\ttype == Dtype::INT16 ||\r\n\t\ttype == Dtype::INT32 ||\r\n\t\ttype == Dtype::INT64 ||\r\n\t\ttype == Dtype::FLOAT ||\r\n\t\ttype == Dtype::DOUBLE\r\n\t\t) {\r\n\t\treturn Dtype::NUMBER;\r\n\t}\r\n\r\n\tif (type == Dtype::STRING) {\r\n\t\treturn Dtype::STRING;\r\n\t}\r\n\r\n\tif (type == Dtype::DATE) {\r\n\t\treturn Dtype::DATE;\r\n\t}\r\n\r\n\tif (\r\n\t\ttype == Dtype::DATE_DAY ||\r\n\t\ttype == Dtype::DATE_YEAR ||\r\n\t\ttype == Dtype::DATE_MONTH\r\n\t\t) {\r\n\t\treturn Dtype::DATE_ATTR;\r\n\t}\r\n\r\n\treturn Dtype::NA;\r\n}\r\n\r\n\r\nbool Object::is_num(Dtype type)\r\n{\r\n\tif (\r\n\t\ttype == Dtype::INT8 ||\r\n\t\ttype == Dtype::INT16 ||\r\n\t\ttype == Dtype::INT32 ||\r\n\t\ttype == Dtype::INT64 ||\r\n\r\n\t\ttype == Dtype::FLOAT ||\r\n\t\ttype == Dtype::DOUBLE\r\n\t\t) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nbool Object::is_num() const\r\n{\r\n\treturn is_num(type);\r\n}\r\n\r\n\r\nDtype Object::get_optimized_type(const Object& invalue)\r\n{\r\n\tif (invalue.type == Dtype::NA) return Dtype::NA;\r\n\tdouble temp_val;\r\n\r\n\tif (invalue.type == Dtype::STRING) {\r\n\t\tstring temp_val_str = invalue.get_val<String>().get();\r\n\t\tDtype temp_val_type = Object::get_type(temp_val_str);\r\n\r\n\t\tif (temp_val_type == Dtype::STRING ||\r\n\t\t\tget_sec_type(temp_val_type) != Dtype::NUMBER) return Dtype::STRING;\r\n\r\n\t\ttemp_val = stod(temp_val_str);\r\n\t}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1501, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ccdd883c-97b8-4903-b57a-25f3115011e9": {"__data__": {"id_": "ccdd883c-97b8-4903-b57a-25f3115011e9", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c9b723b2-e9ab-49d7-94a5-72d1ea340fae", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e98a684601fd7ffa2ea95a4c644c1f6c40fc59208bc68e7c4c2e0621e988d52a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ntemp_val = stod(temp_val_str);\r\n\t}\r\n\r\n\telse if (invalue.secType == Dtype::NUMBER) {\r\n\t\ttemp_val = invalue.value_num();\r\n\t}\r\n\telse return invalue.type;\r\n\r\n\tbool is_int = (static_cast<int>(temp_val)) == temp_val;\r\n\r\n\tif (is_int)\r\n\t{\r\n\t\tif (temp_val >= INT8_MIN && temp_val <= INT8_MAX) {\r\n\t\t\treturn Dtype::INT8;\r\n\t\t}\r\n\t\telse if (temp_val >= INT16_MIN && temp_val <= INT16_MAX) {\r\n\t\t\treturn Dtype::INT16;\r\n\t\t}\r\n\t\telse if (temp_val >= INT32_MIN && temp_val <= INT32_MAX) {\r\n\t\t\treturn  Dtype::INT32;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn Dtype::INT64;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tif (temp_val >= FLT_MIN && temp_val <= FLT_MAX) {\r\n\t\t\treturn Dtype::FLOAT;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn Dtype::DOUBLE;\r\n\t\t}\r\n\t}\r\n\treturn Dtype::NA;\r\n}\r\n\r\nDtype Object::get_highest_type(vector<Object>& values)\r\n{\r\n\tDtype highest_type = Dtype::NA;\r\n\tfor (size_t i = 0; i < values.size(); i++)\r\n\t{\r\n\t\tDtype curr_type = Object::get_optimized_type(values[i]);\r\n\t\tif (highest_type < curr_type) {\r\n\t\t\thighest_type = curr_type;\r\n\t\t}\r\n\t}\r\n\treturn highest_type;\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n// memory size ////////////////////////////////////////\r\n\r\ninline size_t Object::get_dtype_mem_size(Dtype dtype) const\r\n{\r\n\tswitch (dtype)\r\n\t{\r\n\tcase Dtype::STRING: return 56;\r\n\r\n\tcase Dtype::DATE:\r\n\tcase Dtype::INT64:\r\n\tcase Dtype::DOUBLE: return 24;\r\n\r\n\tcase Dtype::FLOAT:\r\n\tcase Dtype::INT32:\r\n\tcase Dtype::DATE_YEAR:\r\n\tcase Dtype::DATE_MONTH:\r\n\tcase Dtype::DATE_DAY: return 20;\r\n\r\n\tcase Dtype::INT16: return 18;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1514, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2bc7efa5-d412-4620-b142-c652d59c310e": {"__data__": {"id_": "2bc7efa5-d412-4620-b142-c652d59c310e", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0cf1ecca-3e39-4295-ae0e-59af5b30cd7c", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "1adc0386537cb0590b3859bec0712623aa1386ad65680ae76e97fd6dcb9a1f11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::DATE_MONTH:\r\n\tcase Dtype::DATE_DAY: return 20;\r\n\r\n\tcase Dtype::INT16: return 18;\r\n\r\n\tcase Dtype::INT8: return 17;\r\n\r\n\tcase Dtype::NA: return 16;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nsize_t Object::get_mem_size() const\r\n{\r\n\treturn get_dtype_mem_size(this->type);\r\n}\r\n\r\nsize_t Object::get_mem_size(vector<Object> values)\r\n{\r\n\tsize_t total_size = sizeof(values);\r\n\tfor (size_t i = 0; i < values.size(); i++)\r\n\t{\r\n\t\ttotal_size += values[i].get_mem_size();\r\n\t}\r\n\r\n\treturn total_size;\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n// print methods /////////////////////////////////////", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 624, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7ffb6132-f7ab-45b8-8ca8-0547971c9e00": {"__data__": {"id_": "7ffb6132-f7ab-45b8-8ca8-0547971c9e00", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3171074d-aa39-4841-a466-3dc941727e4d", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0dfc96606b7c83036ec905b6e33f688e9404b3ffdb4aa0fd59c401c1ff3d957f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nvoid Object::print_info() const\r\n{\r\n\tstring str = get();\r\n\tif (str.length() > 30) {\r\n\r\n\t\tstr = str.substr(0, 30) + \"... (len:\" + to_string(str.length()) + \")\";\r\n\t}\r\n\r\n\tstr = (this->type == Dtype::STRING ? \"\\\"\" + str + \"\\\"\" : str);\r\n\r\n\tcout << endl;\r\n\tcout << \"Object {\" << endl;\r\n\tcout << \" value: \" << str << endl;\r\n\tcout << \" dtype: \" << type << endl;\r\n\tcout << \" sec dtype: \" << secType<< endl;\r\n\tcout << \" size : \" << get_mem_size() << \" B\" << endl;\r\n\tcout << \"}\" << endl;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 504, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70ebfc59-5122-4b0b-b308-da6c3942d1f5": {"__data__": {"id_": "70ebfc59-5122-4b0b-b308-da6c3942d1f5", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "44caa7aa-f85e-4670-80e4-051ed777d0c5", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "051c43e0f2630934005a80c188d2d14ff49627487016c9681de5891a482d706c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nvoid Object::print_infos(vector<Object> values)\r\n{\r\n\tfor (Object& obj : values) obj.print_info();\r\n}\r\n\r\nostream& operator<<(ostream& os, const Object& obj)\r\n{\r\n\tswitch (obj.type)\r\n\t{\r\n\tcase Dtype::INT8:\r\n\t{\r\n\t\tos << obj.get_val<int8_t>(); break;\r\n\t}\r\n\r\n\tcase Dtype::INT16:\r\n\t{\r\n\t\tos << obj.get_val<int16_t>(); break;\r\n\t}\r\n\r\n\tcase Dtype::INT32:\r\n\t{\r\n\t\tos << obj.get_val<int32_t>(); break;\r\n\t}\r\n\r\n\tcase Dtype::INT64:\r\n\t{\r\n\t\tos << obj.get_val<int64_t>(); break;\r\n\t}\r\n\r\n\tcase Dtype::FLOAT:\r\n\t{\r\n\t\tos << obj.get_val<float>(); break;\r\n\t}\r\n\r\n\tcase Dtype::DOUBLE:\r\n\t{\r\n\t\tos << obj.get_val<double>(); break;\r\n\t}\r\n\r\n\tcase Dtype::DATE:\r\n\t{\r\n\t\tos << obj.get_val<Date>(); break;\r\n\t}\r\n\r\n\tcase Dtype::STRING:\r\n\t{\r\n\t\tos << obj.get_val<String>().get(); break;\r\n\t}\r\n\tcase Dtype::NA: {\r\n\t\tos << \"NULL\"; break;\r\n\t}\r\n\r\n\tdefault:\r\n\t\tif (obj.secType == Dtype::DATE_ATTR) {\r\n\t\t\tos << obj.get_val<uint32_t>();\r\n\t\t}\r\n\t}\r\n\treturn os;\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n// Arithmetic Operators ////////////////////////////////\r\n\r\ntemplate<typename Func>\r\ninline Object Object::arithmetic_operation(\r\n\tconst Object& other, \r\n\tFunc operation, \r\n\tconst char operation_char) const\r\n{\r\n\tASSERT_TYPE_MISMATCH((*this), other, operation_char);\r\n\r\n\tDtype new_type = std::max(type, other.type);\r\n\r\n\tswitch (type)\r\n\t{\r\n\tcase Dtype::NA:\r\n\t\treturn Object();\r\n\t\tbreak;\r\n\tcase Dtype::STRING: {\r\n\r\n\t\tswitch (other.type)\r\n\t\t{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1435, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a596bbaa-6d05-44c8-98ee-83b1bddcc256": {"__data__": {"id_": "a596bbaa-6d05-44c8-98ee-83b1bddcc256", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "66edd299-9382-409e-b3ef-88672c0d7fe9", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "5fae743535eee3c3dee852bb38969da6f8fca10ff45758a111bad1288dfd5066", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nreturn Object();\r\n\t\tbreak;\r\n\tcase Dtype::STRING: {\r\n\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(get_val<String>(), other.get_val<String>()) ,new_type);\r\n\r\n\t\tcase Dtype::INT8:  return Object(operation(get_val<String>(), (const float)other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<String>(), (const float)other.get_val<int16_t>()), new_type);\r\n\t\tcase Dtype::INT32: return Object(operation(get_val<String>(), (const float)other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<String>(), (const float)other.get_val<int64_t>()), new_type);\r\n\t\tcase Dtype::FLOAT: return Object(operation(get_val<String>(), (const float)other.get_val<float>()  ), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<String>(), (const float)other.get_val<double>() ), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT8: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(other.get_val<String>(), (const float)get_val<int8_t>()), new_type);\r\n\r\n\t\tcase Dtype::INT8:  return Object(operation(get_val<int8_t>(), other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<int8_t>(), other.get_val<int16_t>()), new_type);\r\n\t\tcase Dtype::INT32: return Object(operation(get_val<int8_t>(), other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<int8_t>(), other.get_val<int64_t>()), new_type);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1503, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "019dd907-86ed-44d2-9ae2-ef2285c8bbb2": {"__data__": {"id_": "019dd907-86ed-44d2-9ae2-ef2285c8bbb2", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c1f7836-fba3-4b51-8453-bc485596495c", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "a257ca753cc92a965a233a916d7a1917c17f14d6519e92b914a700b5d6f6c831", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::FLOAT: return Object(operation(get_val<int8_t>(), other.get_val<float>  ()), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<int8_t>(), other.get_val<double> ()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT16: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(other.get_val<String>(), (const float)get_val<int16_t>()), new_type);\r\n\r\n\t\tcase Dtype::INT8:  return Object(operation(get_val<int16_t>(), other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<int16_t>(), other.get_val<int16_t>()), new_type);\r\n\t\tcase Dtype::INT32: return Object(operation(get_val<int16_t>(), other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<int16_t>(), other.get_val<int64_t>()), new_type);\r\n\t\tcase Dtype::FLOAT: return Object(operation(get_val<int16_t>(), other.get_val<float>  ()), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<int16_t>(), other.get_val<double> ()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\r\n\tcase Dtype::INT32: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(other.get_val<String>(), (const float)get_val<int32_t>()), new_type);\r\n\r\n\t\tcase Dtype::INT8:  return Object(operation(get_val<int32_t>(), other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<int32_t>(), other.get_val<int16_t>()), new_type);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1437, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "266815f1-e886-4fa7-986e-dc55bc4dc4fc": {"__data__": {"id_": "266815f1-e886-4fa7-986e-dc55bc4dc4fc", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1383af4d-462d-4f37-99a5-e123e5c91877", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b1fe96450b228bb7579b23cb6432f4cd439261703792e4c2d54eea1aac8ba465", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::INT32: return Object(operation(get_val<int32_t>(), other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<int32_t>(), other.get_val<int64_t>()), new_type);\r\n\t\tcase Dtype::FLOAT: return Object(operation(get_val<int32_t>(), other.get_val<float>  ()), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<int32_t>(), other.get_val<double> ()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT64: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(other.get_val<String>(), (const float)get_val<int64_t>()), new_type);\r\n\r\n\t\tcase Dtype::INT8:  return Object(operation(get_val<int64_t>(), other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<int64_t>(), other.get_val<int16_t>()), new_type);\r\n\t\tcase Dtype::INT32: return Object(operation(get_val<int64_t>(), other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<int64_t>(), other.get_val<int64_t>()), new_type);\r\n\t\tcase Dtype::FLOAT: return Object(operation(get_val<int64_t>(), other.get_val<float>  ()), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<int64_t>(), other.get_val<double> ()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::FLOAT: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(other.get_val<String>(), get_val<float>()), new_type);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1420, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b8777f8b-edb4-4687-ae51-640f3061dff5": {"__data__": {"id_": "b8777f8b-edb4-4687-ae51-640f3061dff5", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c23e6e4a-da16-4d12-95fd-8a5073f4a610", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "09ec8595e2f282c3e77c171b01031fdc8674391087a3016340ea3d2d32bd85e2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::INT8:  return Object(operation(get_val<float>(), other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<float>(), other.get_val<int16_t>()), new_type);\r\n\t\tcase Dtype::INT32: return Object(operation(get_val<float>(), other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<float>(), other.get_val<int64_t>()), new_type);\r\n\t\tcase Dtype::FLOAT: return Object(operation(get_val<float>(), other.get_val<float>  ()), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<float>(), other.get_val<double> ()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::DOUBLE: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::STRING:return Object(operation(other.get_val<String>(), (const float)get_val<double>()), new_type);\r\n\r\n\t\tcase Dtype::INT8:  return Object(operation(get_val<double>(), other.get_val<int8_t> ()), new_type);\r\n\t\tcase Dtype::INT16: return Object(operation(get_val<double>(), other.get_val<int16_t>()), new_type);\r\n\t\tcase Dtype::INT32: return Object(operation(get_val<double>(), other.get_val<int32_t>()), new_type);\r\n\t\tcase Dtype::INT64: return Object(operation(get_val<double>(), other.get_val<int64_t>()), new_type);\r\n\t\tcase Dtype::FLOAT: return Object(operation(get_val<double>(), other.get_val<float>  ()), new_type);\r\n\t\tcase Dtype::DOUBLE:return Object(operation(get_val<double>(), other.get_val<double> ()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\r\n\tcase Dtype::DATE:{", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1481, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a78318e1-51f4-46c0-9f2a-ef1e25548a70": {"__data__": {"id_": "a78318e1-51f4-46c0-9f2a-ef1e25548a70", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "02630518-88b9-433b-b555-39f191d2131a", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8e5edabe72a7fa2d6ba88dec039b9da0d3254666d76d555a0e905e6c92ba2649", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\n}\r\n\t\tbreak;\r\n\t}\r\n\r\n\tcase Dtype::DATE:{\r\n\t\tassert(false && \"The Date Object Not Handled\");\r\n\t\tbreak;\r\n\t}\r\n\tdefault: {\r\n\t\tif (secType == Dtype::DATE_ATTR) {\r\n\t\t\treturn  Object(operation(get_val<uint32_t>(), other.get_val<uint32_t>()), new_type);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\r\n\t}\r\n\treturn Object();\r\n}\r\n\r\n\r\nObject Object::operator +(const Object& other) const\r\n{\r\n\treturn arithmetic_operation(other, std::plus<>{}, '+');\r\n}\r\nObject Object::operator -(const Object& other) const\r\n{\r\n\treturn arithmetic_operation(other, std::minus<>{}, '-');\r\n}\r\nObject Object::operator /(const Object& other) const\r\n{\r\n\treturn arithmetic_operation(other, std::divides<>{}, '/');\r\n}\r\nObject Object::operator *(const Object& other) const\r\n{\r\n\treturn arithmetic_operation(other, std::multiplies<>{}, '*');\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 801, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c372f544-7b04-4558-be0c-f3ff7b80987c": {"__data__": {"id_": "c372f544-7b04-4558-be0c-f3ff7b80987c", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6b15f92e-ee3e-421c-9008-f8684d2007dc", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "5280ca91a1d94ef2705f32bd6ed9264b3a87a70e3723ad37b062772dba5a2573", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nvoid Object::operator +=(const Object& other)\r\n{\r\n\t*this = arithmetic_operation(other, std::plus<>{}, '+');\r\n}\r\nvoid Object::operator -=(const Object& other)\r\n{\r\n\t*this = arithmetic_operation(other, std::minus<>{}, '-');\r\n}\r\nvoid Object::operator /=(const Object& other)\r\n{\r\n\t*this = arithmetic_operation(other, std::divides<>{}, '/');\r\n}\r\nvoid Object::operator *=(const Object& other)\r\n{\r\n\t*this = arithmetic_operation(other, std::multiplies<>{}, '*');\r\n}\r\n\r\n\r\nObject Object::operator +(const double& other) const\r\n{\r\n\treturn arithmetic_operation(Object(other, Dtype::DOUBLE), std::plus<>{}, '+');\r\n}\r\nObject Object::operator -(const double& other) const\r\n{\r\n\treturn arithmetic_operation(Object(other, Dtype::DOUBLE), std::minus<>{}, '-');\r\n\r\n}\r\nObject Object::operator /(const double& other) const\r\n{\r\n\treturn arithmetic_operation(Object(other, Dtype::DOUBLE), std::divides<>{}, '/');\r\n}\r\nObject Object::operator *(const double& other) const\r\n{\r\n\treturn arithmetic_operation(Object(other), std::multiplies<>{}, '*');\r\n}\r\n\r\n\r\nvoid Object::operator +=(const double& other)\r\n{\r\n\t*this = arithmetic_operation(Object(other, Dtype::DOUBLE), std::plus<>{}, '+');\r\n}\r\nvoid Object::operator -=(const double& other)\r\n{\r\n\t*this = arithmetic_operation(Object(other, Dtype::DOUBLE), std::minus<>{}, '-');\r\n}\r\nvoid Object::operator /=(const double& other)\r\n{\r\n\t*this = arithmetic_operation(Object(other, Dtype::DOUBLE), std::divides<>{}, '/');\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1459, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "49b138b3-0fb1-4192-b014-271b730318ce": {"__data__": {"id_": "49b138b3-0fb1-4192-b014-271b730318ce", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1199e8c0-5275-4c26-b4a5-18b4cd3cf963", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3f92b3c48b7e9f0577747f24626e492a121240b5a157a7ef22df9969c2e5d052", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nvoid Object::operator *=(const double& other) {\r\n\t*this = arithmetic_operation(Object(other, Dtype::DOUBLE), std::multiplies<>{}, '*');\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\n// Comparisons Operators ///////////////////////////////\r\n\r\n\r\ninline int16_t Object::compareTo(const Object& other) const\r\n{\r\n\r\n\tif      (this->type == Dtype::NA && other.type != Dtype::NA) return -1;\r\n\telse if (this->type != Dtype::NA && other.type == Dtype::NA) return  1;\r\n\telse if (this->type == Dtype::NA && other.type == Dtype::NA) return  0;\r\n\r\n\tbool date_case = (secType == Dtype::DATE_ATTR || secType == Dtype::DATE)\r\n\t\t&& (other.secType == Dtype::DATE_ATTR || other.secType == Dtype::DATE);\r\n\r\n\tbool valid_comparison = (secType == other.secType) || date_case;\r\n\r\n\tif (!valid_comparison) {\r\n\r\n\t\tcout << \"Warning Comparing: \"\r\n\t\t\t<< \"Compare \"\r\n\t\t\t<< type << \"(\" << *this << \")\"\r\n\t\t\t<< \" to \"\r\n\t\t\t<< other.type << \"(\" << other << \")\" << endl;\r\n\t\tassert(0);\r\n\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\r\n\tswitch (type)\r\n\t{\r\n\tcase Dtype::STRING: COMPARE_OBJECTS(this, other, String, String);\r\n\t\r\n\tcase Dtype::INT8: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\t\tcase Dtype::INT8  : COMPARE_OBJECTS(this, other, int8_t, int8_t);\r\n\t\t\tcase Dtype::INT16 : COMPARE_OBJECTS(this, other, int8_t, int16_t);\r\n\t\t\tcase Dtype::INT32 : COMPARE_OBJECTS(this, other, int8_t, int32_t);\r\n\t\t\tcase Dtype::INT64 : COMPARE_OBJECTS(this, other, int8_t, int64_t);\r\n\t\t\tcase Dtype::FLOAT :\tCOMPARE_OBJECTS(this, other, int8_t, float);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1510, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1dee8f15-872c-434e-adc0-82a4910831b3": {"__data__": {"id_": "1dee8f15-872c-434e-adc0-82a4910831b3", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d7400ea9-dffb-4461-b598-6ef466a6290c", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "10abea927f8e155f0e194c16673965a5733a08136fdd68f6cd35998b52c972e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::FLOAT :\tCOMPARE_OBJECTS(this, other, int8_t, float);\r\n\t\t\tcase Dtype::DOUBLE: COMPARE_OBJECTS(this, other, int8_t, double);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT16: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:   COMPARE_OBJECTS(this, other, int16_t, int8_t);\r\n\t\tcase Dtype::INT16:  COMPARE_OBJECTS(this, other, int16_t, int16_t);\r\n\t\tcase Dtype::INT32:  COMPARE_OBJECTS(this, other, int16_t, int32_t);\r\n\t\tcase Dtype::INT64:  COMPARE_OBJECTS(this, other, int16_t, int64_t);\r\n\t\tcase Dtype::FLOAT:\tCOMPARE_OBJECTS(this, other, int16_t, float);\r\n\t\tcase Dtype::DOUBLE: COMPARE_OBJECTS(this, other, int16_t, double);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT32: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:   COMPARE_OBJECTS(this, other, int32_t, int8_t);\r\n\t\tcase Dtype::INT16:  COMPARE_OBJECTS(this, other, int32_t, int16_t);\r\n\t\tcase Dtype::INT32:  COMPARE_OBJECTS(this, other, int32_t, int32_t);\r\n\t\tcase Dtype::INT64:  COMPARE_OBJECTS(this, other, int32_t, int64_t);\r\n\t\tcase Dtype::FLOAT:\tCOMPARE_OBJECTS(this, other, int32_t, float);\r\n\t\tcase Dtype::DOUBLE: COMPARE_OBJECTS(this, other, int32_t, double);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::INT64: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:   COMPARE_OBJECTS(this, other, int64_t, int8_t);\r\n\t\tcase Dtype::INT16:  COMPARE_OBJECTS(this, other, int64_t, int16_t);\r\n\t\tcase Dtype::INT32:  COMPARE_OBJECTS(this, other, int64_t, int32_t);\r\n\t\tcase Dtype::INT64:  COMPARE_OBJECTS(this, other, int64_t, int64_t);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "471f2674-39ca-45b9-b4a9-b00b0a4331dd": {"__data__": {"id_": "471f2674-39ca-45b9-b4a9-b00b0a4331dd", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1cee0a90-8243-4b89-b13b-d83205a235ce", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e8ba015ace7aae0e9a679869e15b6a4dfdbb3c9742bd46ff1ee124ee8803333f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ncase Dtype::INT64:  COMPARE_OBJECTS(this, other, int64_t, int64_t);\r\n\t\tcase Dtype::FLOAT:\tCOMPARE_OBJECTS(this, other, int64_t, float);\r\n\t\tcase Dtype::DOUBLE: COMPARE_OBJECTS(this, other, int64_t, double);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::FLOAT: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:   COMPARE_OBJECTS(this, other, float, int8_t);\r\n\t\tcase Dtype::INT16:  COMPARE_OBJECTS(this, other, float, int16_t);\r\n\t\tcase Dtype::INT32:  COMPARE_OBJECTS(this, other, float, int32_t);\r\n\t\tcase Dtype::INT64:  COMPARE_OBJECTS(this, other, float, int64_t);\r\n\t\tcase Dtype::FLOAT:\tCOMPARE_OBJECTS(this, other, float, float);\r\n\t\tcase Dtype::DOUBLE: COMPARE_OBJECTS(this, other, float, double);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::DOUBLE: {\r\n\t\tswitch (other.type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:   COMPARE_OBJECTS(this, other, double, int8_t);\r\n\t\tcase Dtype::INT16:  COMPARE_OBJECTS(this, other, double, int16_t);\r\n\t\tcase Dtype::INT32:  COMPARE_OBJECTS(this, other, double, int32_t);\r\n\t\tcase Dtype::INT64:  COMPARE_OBJECTS(this, other, double, int64_t);\r\n\t\tcase Dtype::FLOAT:\tCOMPARE_OBJECTS(this, other, double, float);\r\n\t\tcase Dtype::DOUBLE: COMPARE_OBJECTS(this, other, double, double);\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\tcase Dtype::DATE: {\r\n\r\n\t\tCOMPARE_OBJECTS(this, other, Date, Date);\r\n\t}\r\n\r\n\tdefault:\r\n\t\tif (secType == Dtype::DATE_ATTR && other.secType == Dtype::DATE) {\r\n\r\n\t\t\tauto* thisvalue = &get_val<uint32_t>();\r\n\t\t\tuint32_t othervalue = other.get_val<Date>().get_attr_num(this->type);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1490, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "734bbd82-a65d-4ea5-8156-66cc0dd593ea": {"__data__": {"id_": "734bbd82-a65d-4ea5-8156-66cc0dd593ea", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4a01965c-fc68-4b04-9c8e-9248b4f51bea", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "b81913d8e8162f9673406e23eea239d43ee338fe92cf6ed1b45f2efcce4901a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nuint32_t othervalue = other.get_val<Date>().get_attr_num(this->type);\r\n\r\n\t\t\treturn *thisvalue < othervalue ? -1 : *thisvalue > othervalue ? 1 : 0;\r\n\t\t}\r\n\t\tif (secType == other.secType || secType == Dtype::DATE_ATTR) {\r\n\r\n\t\t\tCOMPARE_OBJECTS(this, other, uint32_t, uint32_t);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\treturn 0;\r\n}\r\n\r\nbool Object::operator <  (const Object& other) const\r\n{\r\n\treturn compareTo(other) == -1;\r\n}\r\nbool Object::operator >  (const Object& other) const\r\n{\r\n\treturn compareTo(other) == 1;\r\n}\r\nbool Object::operator <= (const Object& other) const\r\n{\r\n\tif (type == Dtype::NA) {\r\n\t\treturn other.type == Dtype::NA;\r\n\t}\r\n\telse if (other.type == Dtype::NA) {\r\n\t\treturn type == Dtype::NA;\r\n\t}\r\n\r\n\tint8_t compare_res = compareTo(other);\r\n\treturn compare_res == 0 || compare_res == -1;\r\n}\r\nbool Object::operator >= (const Object& other) const\r\n{\r\n\r\n\tif (type == Dtype::NA) {\r\n\t\treturn other.type == Dtype::NA;\r\n\t}\r\n\telse if (other.type == Dtype::NA) {\r\n\t\treturn type == Dtype::NA;\r\n\t}\r\n\r\n\tint8_t compare_res = compareTo(other);\r\n\r\n\treturn compare_res == 0 || compare_res == 1;\r\n}\r\nbool Object::operator == (const Object& other) const\r\n{\r\n\treturn compareTo(other) == 0;\r\n}\r\nbool Object::operator != (const Object& other) const\r\n{\r\n\tif (type == Dtype::NA) {\r\n\t\treturn other.type != Dtype::NA;\r\n\t}\r\n\telse if (other.type == Dtype::NA) {\r\n\t\treturn type != Dtype::NA;\r\n\t}\r\n\r\n\treturn compareTo(other) != 0;\r\n}\r\n\r\nObject Object::operator%(const Object& other) const {\r\n\t// Handle NA cases", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd93fbf1-6f32-49c2-8542-41e590d5f90a": {"__data__": {"id_": "bd93fbf1-6f32-49c2-8542-41e590d5f90a", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "072bcc58-db06-4157-a639-3357a2c45127", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d028813ab40273309298a97da87204feaa19a761c195e9d2a6faa997ba269eb3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\n}\r\n\r\nObject Object::operator%(const Object& other) const {\r\n\t// Handle NA cases\r\n\tif (type == Dtype::NA || other.type == Dtype::NA) {\r\n\t\treturn Object(); // Return NA Object\r\n\t}\r\n\r\n\t// Check if types are numeric\r\n\tif (!this->is_num() || !other.is_num()) {\r\n\t\tthrow std::invalid_argument(\"Modulo operation only supported for numeric types\");\r\n\t}\r\n\r\n\t// Prevent division by zero\r\n\tif (other.value_num() == 0) {\r\n\t\tthrow std::domain_error(\"Modulo by zero\");\r\n\t}\r\n\r\n\tObject result;\r\n\t// Handle different numeric types\r\n\tswitch (type) {\r\n\tcase Dtype::INT8:\r\n\tcase Dtype::INT16:\r\n\tcase Dtype::INT32:\r\n\tcase Dtype::INT64: {\r\n\r\n\t\tObject result;\r\n\t\t// Convert both operands to the larger type\r\n\t\tint64_t lhs = (int64_t)value_num();\r\n\t\tint64_t rhs = (int64_t)other.value_num();\r\n\r\n\t\tresult.type = std::max(type, other.type);\r\n\t\tresult.secType = Object::get_sec_type(result.type);\r\n\r\n\t\tswitch (result.type) {\r\n\t\tcase Dtype::INT8:   result.setVal(static_cast<int8_t>(lhs % rhs)); break;\r\n\t\tcase Dtype::INT16:  result.setVal(static_cast<int16_t>(lhs % rhs)); break;\r\n\t\tcase Dtype::INT32:  result.setVal(static_cast<int32_t>(lhs % rhs)); break;\r\n\t\tcase Dtype::INT64:  result.setVal(lhs % rhs); break;\r\n\t\tdefault: break;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tcase Dtype::FLOAT:\r\n\tcase Dtype::DOUBLE: {\r\n\t\tObject result;\r\n\t\t// Convert both operands to double for floating-point modulo\r\n\t\tdouble lhs = value_num();\r\n\t\tdouble rhs = other.value_num();\r\n\r\n\t\tresult.type = std::max(type, other.type);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1497, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8ee0270-f9bc-4489-a3f0-5aa3b60956fd": {"__data__": {"id_": "d8ee0270-f9bc-4489-a3f0-5aa3b60956fd", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df030065-bd2a-4db5-b4e5-384d0274029d", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9a35e30fb4791483920a38792b00355ef9c5a9f5250e4cf900975167db13828e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\ndouble rhs = other.value_num();\r\n\r\n\t\tresult.type = std::max(type, other.type);\r\n\t\tresult.secType = Object::get_sec_type(result.type);\r\n\r\n\t\tdouble mod = std::fmod(lhs, rhs);\r\n\r\n\t\tif (result.type == Dtype::FLOAT) {\r\n\t\t\tresult.setVal(static_cast<float>(mod));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult.setVal(mod);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdefault:\r\n\t\tthrow std::invalid_argument(\"Unsupported type for modulo operation\");\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n\r\nObject& Object::operator =(const Object& other)\r\n{\r\n\tif (this->type != other.type) {\r\n\t\tcopyFrom(other);\r\n\t}\r\n\telse {\r\n\t\tswitch (type)\r\n\t\t{\r\n\t\tcase Dtype::INT8:\r\n\t\t\tget_val<int8_t>() = other.get_val<int8_t>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::INT16:\r\n\t\t\tget_val<int16_t>() = other.get_val<int16_t>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::INT32:\r\n\t\t\tget_val<int32_t>() = other.get_val<int32_t>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::INT64:\r\n\t\t\tget_val<int64_t>() = other.get_val<int64_t>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::FLOAT:\r\n\t\t\tget_val<float>() = other.get_val<float>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::DOUBLE:\r\n\t\t\tget_val<double>() = other.get_val<double>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::DATE:\r\n\t\t\tget_val<Date>() = other.get_val<Date>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::DATE_YEAR:\r\n\t\tcase Dtype::DATE_MONTH:\r\n\t\tcase Dtype::DATE_DAY:\r\n\t\t\tget_val<uint32_t>() = other.get_val<uint32_t>();\r\n\t\t\tbreak;\r\n\r\n\t\tcase Dtype::STRING:\r\n\t\t\tget_val<String>() = other.get_val<String>();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn *this;\r\n}\r\n\r\n// 1909", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1518, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e64d711-674e-4e9d-9151-aac0cdb352b5": {"__data__": {"id_": "9e64d711-674e-4e9d-9151-aac0cdb352b5", "embedding": null, "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a5d67529-eddd-4a48-92ae-e2d8deba9cc9", "node_type": "4", "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "80c79c553761c5e8f42d19ee97e07555c76958513c4e5202a21361233dda0b87", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.cpp\nbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn *this;\r\n}\r\n\r\n// 1909\r\n// 1923 -> +52%\r\n// 4043\r\n// 4537\r\n// 4870", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 116, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6533bce3-4fb4-4e52-b368-535a87ba102f": {"__data__": {"id_": "6533bce3-4fb4-4e52-b368-535a87ba102f", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65726522-4667-43fe-88a2-ea5f80ad8500", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "48d1ce8879736a0cac2d8feacb660fd94002c0a33e666046997a92dedae98950", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\n#pragma once\r\n\r\n#ifndef Object_CLS\r\n#define Object_CLS\r\n\r\n#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n#include <set>\r\n#include <random>\r\n#include <functional> \r\n\r\n#include \"StringDs/String.h\"\r\n#include \"DateDs/Date.h\"\r\n\r\n#include \"enums/enums.h\"\r\n\r\n\r\n\r\nusing namespace std;\r\n\r\n#pragma warning(disable : 4244)\r\n\r\n// Base class for all types\r\nclass BaseValue {\r\npublic:\r\n\tvirtual ~BaseValue() = default;\r\n\tvirtual void print() const = 0;  // Pure virtual function for printing value\r\n\tvirtual size_t size() const = 0; // Pure virtual function to get size of the value\r\n};\r\n\r\n// Templated derived class for storing values of different types\r\ntemplate<typename T>\r\nclass TypedValue : public BaseValue {\r\npublic:\r\n\tT value;\r\n\r\n\tTypedValue(T val) : value(val) {}\r\n\r\n\tvoid print() const override {\r\n\t\tstd::cout << value << std::endl;\r\n\t}\r\n\r\n\t// Method to retrieve the stored value\r\n\tT& getValue() {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Method to get the size of the value\r\n\tsize_t size() const override {\r\n\t\treturn sizeof(value);\r\n\t}\r\n\r\n\t~TypedValue() {}\r\n};", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1080, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84b2d8ab-3904-4681-b668-7c471ad6042c": {"__data__": {"id_": "84b2d8ab-3904-4681-b668-7c471ad6042c", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b888147-e092-4335-a5e7-698a9157726b", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "04d7fd07141688a93b44b07721b7b9e1815c5803f34608a48049d3680b132795", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nclass Object\r\n{\r\n\r\n\tpair<Dtype, Dtype> getTypeFromStr(const string& str);\r\n\r\n\r\n\ttemplate<typename T>\r\n\tvoid setVal(const T& otherValue) {\r\n\t\tvalue = std::make_unique<TypedValue<T>>(otherValue);\r\n\t}\r\n\r\n\tvoid copyFrom(const Object& other);\r\n\r\n\r\n\t// Contact the arithmetic operation between this object and Other Object\r\n\t// based on the operation function like\r\n\t// plus operation  -> std::plus<>{}\r\n\t// minus operation -> std::minus<>{}\r\n\ttemplate<typename operationFunc>\r\n\tObject arithmetic_operation(\r\n\t\tconst Object& other, \r\n\t\toperationFunc operation, \r\n\t\tconst char operation_char) const;\r\n\r\n\tinline void parseAndSetValue(\r\n\t\tconst char invalue[], \r\n\t\tbool parseInVal, \r\n\t\tDtype dtype = Dtype::NA);\r\n\r\n\r\n\r\npublic:\r\n\r\n\tstd::unique_ptr<BaseValue> value; \r\n\r\n\tDtype type;\r\n\tDtype secType;\r\n\r\n\t\r\n\t// Constructors ///////////////////////////////////////\r\n\r\n\t// default one, with NA dtype.\r\n\tObject();\r\n\r\n\t// the value and it's dtype, valid for all dtyps.\r\n\tObject(String invalue, Dtype intype);\r\n\r\n\t// the value and it's dtype, valid for only for numbers.\r\n\tObject(double invalue, Dtype intype);\r\n\r\n\t// the value, automatic extract it's type. valid for all dtype.\r\n\tObject(const char invalue[]);\r\n\tObject(string invalue);\r\n\tObject(String invalue);\r\n\r\n\t// number value, automatic number dtype extract if it int or double\r\n\tObject(double invalue);\r\n\r\n\t// copy constructor of Date dtype.\r\n\tObject(Date date);\r\n\r\n\t// build date constructor from numbers.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1471, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d81ba57c-ae53-44f9-8726-5584acfdb050": {"__data__": {"id_": "d81ba57c-ae53-44f9-8726-5584acfdb050", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "11f652e0-7ae4-42e0-bd79-c3ff258cdd6d", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8712d01f395b395c883746d527b41e463ee886d759b2e772c7331c146bd011ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nObject(Date date);\r\n\r\n\t// build date constructor from numbers.\r\n\tObject(unsigned int year, unsigned char month, unsigned char day);\r\n\r\n\t// build date constructor from string and it's DateFormat.\r\n\t// if date format is Auto, it will detect it's format automatically \r\n\t// from it's string and convert to it.\r\n\tObject(string datestr, DateFormat dateformat);\r\n\tObject(Object datestr, DateFormat dateformat);\r\n\r\n\t// copy constructor\r\n\tObject(const Object& invalue);\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\t// get methods ///////////////////////////////////////\r\n\r\n\t// get the value number if the Object is a number only.\r\n\tinline double value_num() const;\r\n\r\n\t// get the representing string of the Object value of the Object.\r\n\tinline string get() const;\r\n\r\n\t// get actual Object value with respect of it's type, to show it or edit it.\r\n\ttemplate<typename T>\r\n\tT& get_val() const;\r\n\r\n\t// get actual pointer of value with respect of it's type, to show it or edit it.\r\n\ttemplate<typename T>\r\n\tT* get_ptr() const;\r\n\r\n\r\n\t// get date attributes, valid for Date type only.\r\n\tObject get_date_year();\r\n\tObject get_date_month();\r\n\tObject get_date_day();\r\n\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\t// string methods ////////////////////////////////////\r\n\t// NOET:: This methods are Valid only for Objects that it's dtype = Dtype::STRING.\r\n\r\n\t// transform the string to ////////\r\n\tObject up   (); // make it upper;\r\n\tObject lw   (); // make it lower;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1509, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "977539cc-394b-4726-9e0d-f8a3e689d5ea": {"__data__": {"id_": "977539cc-394b-4726-9e0d-f8a3e689d5ea", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ddc2fdf9-401e-41a6-a3e6-d6f14dee498a", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2e1278b5d725290977b11475d294ae3980f218286bfb6c5a331eae8f28bc65d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nObject up   (); // make it upper;\r\n\tObject lw   (); // make it lower;\r\n\tObject title();\t// make it in title format (first letter Uppercase and the rest in lowercase);\r\n\r\n\r\n\tObject stripl(); // strip left\r\n\tObject stripr(); // strip right\r\n\tObject strip (); // strip for all (left and right)\r\n\r\n\t// replace word/substring in the value to another word/substring.\r\n\tObject replace(string from, string to);\r\n\t///////////////////////////////////\r\n\r\n\t// search in string ///////////////\r\n\r\n\t// given Regx pattern, get the first string with this pattern if exists in the string. \r\n\tObject extract_pattern(const string& pattern);\r\n\r\n\t// trying to find a target in string with respect to \r\n\t// the position to start with, and if not found send -1.\r\n\tsize_t find(string target, int start = 0);\r\n\r\n\t// check if this string target in string->(true) or not->(false).\r\n\tbool contains(string target);\r\n\r\n\t// count how many the target string in this string value.\r\n\tint count(string target);\r\n\r\n\t///////////////////////////////////\r\n\t\r\n\t// get substring of the string with start and end index. \r\n\tObject substr(int start, int end=-1);\r\n\r\n\t// split the string with respect to the separator.\r\n\t// and can handle parsing numbers after spiting and put the results in vector of Objects.\r\n\tvector<Object> split(string sep=\"\", bool enable_numbers = false);\r\n\r\n\t// get the length of the string.\r\n\tint len() const;\r\n\t///////////////////////////////////////////////////////", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1470, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a0eb1e52-f3a9-4b34-b200-38ddcbe89a31": {"__data__": {"id_": "a0eb1e52-f3a9-4b34-b200-38ddcbe89a31", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f738f2a1-f7a6-4f6f-a363-2dcbcd75de61", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f5ec1c50c19cccca659da817267d1dda29c68d3dda1b3e577cfd8b8ef90daff8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nint len() const;\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\t// static generate random Objects /////////////////////\r\n\r\n\t// generate random number between the max and min limits.\r\n\tstatic Object rand_num(int max = 1000, int min = 0);\r\n\r\n\t// generate one or many random numbers.\r\n\tstatic vector<Object> rand_nums(int size, int max, int min = 0, unsigned int seed = 0);\r\n\r\n\t// generate random Date with random year and valid month and day.\r\n\tstatic Date rand_date();\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\t// converting Objects to another valid Objects Dtype //\r\n\r\n\t// general method to convert to any type.\r\n\tinline Object to_type(const Dtype& new_type, const DateFormat dateformat = DateFormat::AUTO);\r\n\r\n\t// convert all values of the vector to the new dtype;\r\n\tstatic void to_type(vector<Object>& values, Dtype new_type);\r\n\r\n\t// convert the Object value to String Representation\r\n\t// and make the dtype = Dtype::STRING\r\n\t// Example:\r\n\t// (float) 1.2 -> (String)\"1.2\"\r\n\tinline Object to_str();\r\n\r\n\t// convert only valid Objects(valid Strings or Anything but Date or NA value) to number int_x \r\n\tObject to_int8 (); // 1 -byte\r\n\tObject to_int16(); // 2 -bytes\r\n\tObject to_int32(); // 4 -bytes\r\n\tObject to_int64(); // 16-bytes\r\n\r\n\t// same as above but convert them to floating point value.\r\n\tObject to_float (); // 4-bytes\r\n\tObject to_double(); // 8-bytes\r\n\r\n\t// convert the string or number to number to make an date attribute,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1493, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08bcd2e4-544d-4fe4-b052-1826d42cb0eb": {"__data__": {"id_": "08bcd2e4-544d-4fe4-b052-1826d42cb0eb", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a2661a6a-24df-4584-a455-f5fe8588e904", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "efbefb1185f596abb8745b67f85a5f094a00198d47f66f7b30a0bb2c9097d7ef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\n// convert the string or number to number to make an date attribute,\r\n\t// or get the attribute from the date. \r\n\tObject to_date_year (); // to Dtype::DATE_YEAR\r\n\tObject to_date_month(); // to Dtype::DATE_MONTH\r\n\tObject to_date_day  (); // to Dtype::DATE_DAY\r\n\r\n\t// convert the string to date with respect to the date format,\r\n\t// and if the date format is AUTO the system should extract the format automatically/\r\n\tObject to_date(DateFormat dateformat= DateFormat::AUTO);\r\n\r\n\r\n\t// convert the Object to the most Suitable Format with respect of The Memory.\r\n\tObject optimize_mem();\r\n\r\n\t// same as above, \r\n\t// but when with_mixed_type = false convert all values to the Max Dtype of the all items.\r\n\t// but when with_mixed_type = true convert each item with respect it's optimized dtype.\r\n\tstatic Dtype optimize_mem(vector<Object>& values, bool with_mixed_type = true);\r\n\r\n\t\r\n\t// convert value from string vector to Object(STING) vector\r\n\tstatic vector<Object> from_vector_string(vector<string>& values);\r\n\r\n\t// convert value from double vector to Object(DOUBLE) vector\r\n\tstatic vector<Object> from_vector_double(vector<double>& values);\r\n\r\n\t// convert value from int vector to Object(INT32) vector\r\n\tstatic vector<Object> from_vector_int(vector<int>& values);\r\n\r\n\t// convert value from string set to Object(STRING) vector\r\n\tstatic vector<Object> from_set_string(set<string>& values);\r\n\r\n\t///////////////////////////////////////////////////////", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1465, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f7870f3-b832-4ee1-b602-454ee1b21df1": {"__data__": {"id_": "3f7870f3-b832-4ee1-b602-454ee1b21df1", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6996ff1c-6afa-4d30-8d41-d778b7a2879d", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "089917a1ec3c5d29c54537b4c78439dea2a0b348678756d3b71ccc9afda54158", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\n///////////////////////////////////////////////////////\r\n\r\n\r\n\t// dealing with Object dtype //////////////////////////\r\n\r\n\r\n\t// get dtype in string format.\r\n\tstatic string type_str(Dtype type);\r\n\r\n\t// Extract the Input String dtype\r\n\t// Examples:\r\n\t// 1. \"1.5\"  -> Dtype::FLOAT\r\n\t// 2. \"1\"    -> Dtype::INT32\r\n\t// 3. \"hima\" -> Dtype::STRING\r\n\tstatic Dtype get_type(const std::string& str);\r\n\r\n\t// get the second dtype of the object\r\n\t// Examples:\r\n\t// 1. Dtype::INT32 -> Dtype::NUMBER\r\n\t// 2. Dtype::FLOAT -> Dtype::NUMBER\r\n\t// 3. Dtype::STRING -> Dtype::STRING\r\n\tstatic Dtype get_sec_type(Dtype type);\r\n\r\n\t// check if this Object is number.\r\n\tstatic bool is_num(Dtype type);\r\n\tbool is_num() const;\r\n\r\n\t// get the most (minimum in memory size) suitable dtype can hold the Object value.\r\n\tstatic inline Dtype get_optimized_type(const Object& invalue);\r\n\r\n\t// Same as Above but for all values of input vector, \r\n\t// but get the max of Results of optimized items in the vector.\r\n\tstatic Dtype get_highest_type(vector<Object>& values);\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\t// memory size ////////////////////////////////////////\r\n\r\n\t// get pre-calculated memory size for each Object Dtype while in runtime.\r\n\t// that include the Object \r\n\t// 1. value pointer\r\n\t// 2. actual value\r\n\t// 3. dtype (the real Date Type of the value like int16 or int8 or String)\r\n\t// 4. secType (general Data Type of the value like number or string or date or date_attrs)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7d715ac-40a4-4150-b157-d41905bdc010": {"__data__": {"id_": "a7d715ac-40a4-4150-b157-d41905bdc010", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1f3f9551-eb9a-47c2-a529-e07375d3e176", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9f6d253b11f2394e6903b36999d5018da9f18abefd0442bf2b2b14ae47815b98", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\n// 4. secType (general Data Type of the value like number or string or date or date_attrs)\r\n\tinline size_t get_dtype_mem_size(Dtype dtype) const;\r\n\r\n\t// call above method with this->dtype\r\n\tsize_t get_mem_size() const;\r\n\r\n\t// get total memory size that vector take in runtime. \r\n\tstatic size_t get_mem_size(vector<Object> values);\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\t// print methods /////////////////////////////////////\r\n\r\n\t// print the Object's value, dtype, size in runtime.\r\n\tvoid print_info() const;\r\n\r\n\t// print all Items Object's Info in the vector\r\n\tstatic void print_infos(vector<Object> values);\r\n\r\n\t// print the Object's value with respect to it's type.\r\n\tfriend ostream& operator <<(ostream& os, const Object& obj);\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\t// Arithmetic Operators ////////////////////////////////\r\n\r\n\tObject operator +(const Object& other) const;\r\n\tObject operator -(const Object& other) const;\r\n\tObject operator /(const Object& other) const;\r\n\tObject operator *(const Object& other) const;\r\n\r\n\tObject operator +(const double& other) const;\r\n\tObject operator -(const double& other) const;\r\n\tObject operator /(const double& other) const;\r\n\tObject operator *(const double& other) const;\r\n\r\n\tvoid operator +=(const Object& other);\r\n\tvoid operator -=(const Object& other);\r\n\tvoid operator /=(const Object& other);\r\n\tvoid operator *=(const Object& other);\r\n\r\n\tvoid operator +=(const double& other);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1499, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "30eff0a4-ecbd-4e16-908c-790c228027ca": {"__data__": {"id_": "30eff0a4-ecbd-4e16-908c-790c228027ca", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "01d805f7-357c-4d69-855c-2772e4f4b38d", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "af25a19a759149c78fec10b12e90179c58a1269ea79c74e7030fea2c78fc8281", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nvoid operator *=(const Object& other);\r\n\r\n\tvoid operator +=(const double& other);\r\n\tvoid operator -=(const double& other);\r\n\tvoid operator /=(const double& other);\r\n\tvoid operator *=(const double& other);\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\t// Comparisons Operators ///////////////////////////////\r\n\r\n\r\n\t// compare this object with another input one,\r\n\t// return -1 if this Object value is smaller than the another \r\n\t// return  1 if this Object value is bigger  than the another \r\n\t// return  0 if this Object value is equal   to   the another \r\n\tinline int16_t compareTo(const Object& other) const;\r\n\r\n\tbool operator < (const Object& other) const;\r\n\tbool operator > (const Object& other) const;\r\n\r\n\tbool operator <=(const Object& other) const;\r\n\tbool operator >=(const Object& other) const;\r\n\r\n\tbool operator ==(const Object& other) const;\r\n\tbool operator !=(const Object& other) const;\r\n\r\n\t// Operator overloading for modulo\r\n\tObject operator%(const Object& other) const;\r\n\r\n\t///////////////////////////////////////////////////////\r\n\r\n\r\n\tObject& operator = (const Object& other);\r\n\r\n};\r\n\r\n#define HASH_VALUE(TYPE, obj) return std::hash<TYPE>()(obj.get_val<TYPE>())\r\n\r\nnamespace std {\r\n\r\n\t// hash value of the (Object) based on it's type\r\n\ttemplate <>\r\n\tstruct hash<Object> {\r\n\t\tstd::size_t operator()(const Object& obj) const {\r\n\t\t\tif (obj.type == Dtype::NA) return 0;\r\n\r\n\r\n\t\t\tswitch (obj.type) {\r\n\t\t\tcase Dtype::STRING:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c73ad51-3a53-4a58-9448-c44d22a2c0a9": {"__data__": {"id_": "4c73ad51-3a53-4a58-9448-c44d22a2c0a9", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "271c89f7-cfbd-47f3-971d-174d5b914a47", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0bbf85ee222410a903bfecca8551e72d58e74b2fbb2978a2fd753f39cf6ddba1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nif (obj.type == Dtype::NA) return 0;\r\n\r\n\r\n\t\t\tswitch (obj.type) {\r\n\t\t\tcase Dtype::STRING:\r\n\t\t\t\treturn std::hash<std::string>()((obj.get_val<String>()).get());\r\n\r\n\t\t\tcase Dtype::DATE: HASH_VALUE(Date, obj);\r\n\r\n\t\t\tcase Dtype::DATE_DAY:\r\n\t\t\tcase Dtype::DATE_MONTH:\r\n\t\t\tcase Dtype::DATE_YEAR: HASH_VALUE(uint32_t, obj);\r\n\r\n\t\t\tcase Dtype::INT8:   HASH_VALUE(int8_t , obj);\r\n\t\t\tcase Dtype::INT16:  HASH_VALUE(int16_t, obj);\r\n\t\t\tcase Dtype::INT32:  HASH_VALUE(int32_t, obj);\r\n\t\t\tcase Dtype::INT64:  HASH_VALUE(int64_t, obj);\r\n\t\t\tcase Dtype::FLOAT:  HASH_VALUE(float  , obj);\r\n\t\t\tcase Dtype::DOUBLE: HASH_VALUE(double , obj);\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t};\r\n\r\n\t// hash value of the (vector<Object>) based on it's type\r\n\ttemplate <>\r\n\tstruct hash<std::vector<Object>> {\r\n\t\tstd::size_t operator()(const std::vector<Object>& vec) const {\r\n\t\t\tstd::size_t seed = 0;\r\n\t\t\tfor (const auto& obj : vec) {\r\n\t\t\t\tseed ^= std::hash<Object>()(obj) + 0x9e3779b9 + (seed << 1); // Mix seed\r\n\t\t\t}\r\n\t\t\treturn seed;\r\n\t\t}\r\n\t};\r\n\r\n\t// hash value of the (vector<const Object*>) based on it's type\r\n\ttemplate <>\r\n\tstruct hash<std::vector<const Object*>> {\r\n\t\tstd::size_t operator()(const std::vector<const Object*>& vec) const {\r\n\t\t\tstd::size_t seed = 0;\r\n\t\t\tfor (const auto& obj : vec) {\r\n\t\t\t\tseed ^= std::hash<Object>()(*obj) + 0x9e3779b9 + (seed << 1); // Mix seed\r\n\t\t\t}\r\n\t\t\treturn seed;\r\n\t\t}\r\n\t};\r\n\r\n}\r\n\r\n\r\n#endif // !Object_CLS\r\n\r\n\r\nstruct ObjectPtrVectorEqual {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1460, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "92680dc4-807f-4bf5-834a-3477f32af536": {"__data__": {"id_": "92680dc4-807f-4bf5-834a-3477f32af536", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c50656dd-cef0-473e-a1a1-a3c97047be6e", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4955972c07a8ced7b2dbdccedbc2a150f6ce1cf886d4da69766b711d10e987ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\n}\r\n\t\t\treturn seed;\r\n\t\t}\r\n\t};\r\n\r\n}\r\n\r\n\r\n#endif // !Object_CLS\r\n\r\n\r\nstruct ObjectPtrVectorEqual {\r\n\tbool operator()(const std::vector<const Object*>& lhs, const std::vector<const Object*>& rhs) const {\r\n\t\tif (lhs.size() != rhs.size()) return false;\r\n\t\tfor (size_t i = 0; i < lhs.size(); ++i) {\r\n\t\t\tif (*lhs[i] != *rhs[i]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\n\r\n\r\n#define ASSERT_TYPE_MISMATCH(ob1, ob2, op) \\\r\n    switch(op) { \\\r\n        case '+': \\\r\n        case '-': \\\r\n            /* Check type mismatch and secType mismatch for NUMBER types */ \\\r\n            if (ob1.type != ob2.type && \\\r\n                ob1.secType != ob2.secType && ob1.secType == Dtype::NUMBER) { \\\r\n                std::cout << \"Calculation Error:: \" << ob1.type << \"(\" << ob1 << \")\" \\\r\n                          << \" \" #op \" \" << ob2.type << \"(\" << ob2 << \")\" << std::endl; \\\r\n                assert(0); \\\r\n            } \\\r\n            break; \\\r\n        case '/': \\\r\n            /* Check for type mismatch OR invalid STRING/DATE division */ \\\r\n            if ((ob1.type != ob2.type && \\\r\n                 ob1.secType != ob2.secType && ob1.secType == Dtype::NUMBER) || \\\r\n                (ob1.type == Dtype::STRING && ob2.type == Dtype::STRING) || \\\r\n                (ob1.type == Dtype::DATE && ob2.type == Dtype::DATE)) { \\\r\n                std::cout << \"Calculation Error:: can't handle / with incompatible types\" << std::endl; \\\r\n                assert(0); \\\r\n            } \\\r\n            break; \\", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e118d42a-d6aa-4826-a839-e5bb5320a4c0": {"__data__": {"id_": "e118d42a-d6aa-4826-a839-e5bb5320a4c0", "embedding": null, "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4de0799b-ae5b-4cae-989d-2478ac087634", "node_type": "4", "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "657bcd4eb686b615bc0ebe2f06277dd1326b5a08543f1052618f590f866a0dcc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: object.h\nassert(0); \\\r\n            } \\\r\n            break; \\\r\n        case '*': { \\\r\n            /* Check if operation is valid for STRING/NUMBER combinations or NUMBER types */ \\\r\n            bool is_str_op = (ob1.secType == Dtype::STRING && ob2.secType == Dtype::NUMBER) || \\\r\n                             (ob1.secType == Dtype::NUMBER && ob2.secType == Dtype::STRING); \\\r\n            bool valid_operation = is_str_op || (ob1.secType == ob2.secType && ob1.secType == Dtype::NUMBER); \\\r\n            if (ob1.type != ob2.type && !valid_operation) { \\\r\n                std::cout << \"Calculation Error:: invalid types for * operation\" << std::endl; \\\r\n                assert(0); \\\r\n            } \\\r\n            break; \\\r\n        } \\\r\n        default: \\\r\n            std::cout << \"Unsupported operation\" << std::endl; \\\r\n            assert(0); \\\r\n    }\r\n\r\n#define COMPARE_OBJECTS(OBJ1, OBJ2, TYPE1, TYPE2) \\\r\n{ \\\r\n    auto* value1 = &(OBJ1->get_val<TYPE1>()); \\\r\n    auto* value2 = &(OBJ2.get_val<TYPE2>()); \\\r\n\treturn *value1 < *value2? -1: *value1 > *value2? 1: 0; \\\r\n}\r\n\r\n\r\n#define CONVERT_VALUES_TO_OBJECTS(values, targetType) \\\r\n    std::vector<Object> converted_items; \\\r\n    converted_items.reserve(values.size()); \\\r\n    for (const auto& value : values) { \\\r\n        converted_items.emplace_back(Object(value, targetType)); \\\r\n    } \\\r\n    return converted_items;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1381, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03ac0a5b-b229-4361-8c5b-787ed2e30fda": {"__data__": {"id_": "03ac0a5b-b229-4361-8c5b-787ed2e30fda", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2f496a99-7295-4c19-9526-6b015a74cd5f", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6f35adb295527c0661b233561f0fea084287fcb2d3b95a05ac6fd415427f53f1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\n#include \"String.h\"\r\n#include \"../object.h\"\r\n\r\nString::String() {}\r\nString::String(string value) {\r\n\tthis->value = value;\r\n}\r\nString::String(const char value[])\r\n{\r\n\tthis->value = value;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 214, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6aeb8075-ff72-4214-8429-6393f7a0ae70": {"__data__": {"id_": "6aeb8075-ff72-4214-8429-6393f7a0ae70", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2567bef6-04b3-4db6-a2da-6e3fc7f18df8", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6512ea6e2d109ca6aba27f5a6ea22b32f7726147a1090a7fe845e62a1b311915", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\nint String::count(string target)\r\n{\r\n\tsize_t target_len = target.length();\r\n\tint counter = 0;\r\n\r\n\tsize_t end = this->len() - target_len + 1;\r\n\tfor (size_t i = 0; i < end; i++)\r\n\t{\r\n\t\tif (value.substr(i, target_len) == target)\r\n\t\t\t++counter;\r\n\t}\r\n\r\n\treturn counter;\r\n}\r\n\r\nString String::stripl()\r\n{\r\n\tauto start_index = value.find_first_not_of(' ');\r\n\tif (start_index == std::string::npos) return *this;\r\n\treturn String(value.substr((int)start_index, value.length()));\r\n}\r\nString String::stripr()\r\n{\r\n\tauto end_index = value.find_last_not_of(' ');\r\n\tif (end_index == std::string::npos) return *this;\r\n\treturn String(value.substr(0, (int)end_index + 1));\r\n}\r\nString String::strip() {\r\n\treturn stripl().stripr();\r\n}\r\n\r\nString String::substr(int start, int end)\r\n{\r\n\tif (end == -1) {\r\n\t\tend = len();\r\n\t}\r\n\treturn String(value.substr(start, end));\r\n}\r\n\r\nsize_t String::find(string target, int start)\r\n{\r\n\tsize_t index = value.find(target, start);\r\n\tif (index == string::npos) return -1;\r\n\treturn index;\r\n}\r\n\r\nbool String::contains(string target)\r\n{\r\n\treturn this->find(target) != -1;\r\n}\r\n\r\nvector<size_t> String::get_min_find(\r\n\tstring value,\r\n\tvector<string> from,\r\n\tsize_t start_pos) {\r\n\r\n\tsize_t index = string::npos;\r\n\tsize_t from_index = 0;\r\n\r\n\tfor (int i = 0; i < from.size(); i++)\r\n\t{\r\n\t\tauto curr_index = value.find(from[i], start_pos);\r\n\t\tif (curr_index < index) {\r\n\t\t\tindex = curr_index;\r\n\t\t\tfrom_index = i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { index, from_index };\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1483, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c0e67d7-0493-4d8f-9796-32e27cc0aadf": {"__data__": {"id_": "3c0e67d7-0493-4d8f-9796-32e27cc0aadf", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d56e06d-4e02-4fc4-bdf1-48340e40cbca", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "fdd07c4aa2a33aca06ff26cb8f05d3119b7642c9384a9a53a43b6acf0fbf4ffb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\nindex = curr_index;\r\n\t\t\tfrom_index = i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { index, from_index };\r\n}\r\n\r\nString String::replace(string from, string to)\r\n{\r\n\tstring str = value;\r\n\r\n\tsize_t to_len = to.length();\r\n\r\n\tvector<Object> froms_ = String(from).split(\"|\");\r\n\r\n\tvector<string> froms(froms_.size());\r\n\tvector<size_t> froms_len(froms_.size());\r\n\r\n\tvector<size_t> start_pos_and_froms_index = { 0, 0 };\r\n\r\n\tfor (size_t i = 0; i < froms_.size(); i++)\r\n\t{\r\n\t\tfroms[i] = froms_[i].get();\r\n\t\tfroms_len[i] = froms_[i].len();\r\n\t}\r\n\r\n\r\n\twhile (1) {\r\n\r\n\t\tstart_pos_and_froms_index = get_min_find(\r\n\t\t\tstr,\r\n\t\t\tfroms,\r\n\t\t\tstart_pos_and_froms_index[0]\r\n\t\t);\r\n\r\n\t\tif (start_pos_and_froms_index[0] == string::npos) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tstr = str.replace(\r\n\t\t\tstart_pos_and_froms_index[0],\r\n\t\t\tfroms_len[start_pos_and_froms_index[1]],\r\n\t\t\tto);\r\n\r\n\t\tstart_pos_and_froms_index[0] += (int)to_len;\r\n\t}\r\n\r\n\treturn String(str);\r\n}\r\n\r\nvector<Object> String::split(string sep, bool parsing_numbers)\r\n{\r\n\r\n\tstring value_str = value;\r\n\r\n\tif (sep == \"\") {\r\n\t\tsize_t size = value.length();\r\n\t\tvector<Object> res_vec(size);\r\n\t\tfor (size_t i = 0; i < size; i++)\r\n\t\t{\r\n\t\t\tres_vec[i] = parsing_numbers ?\r\n\t\t\t\tObject(string(1, value_str[i])) :\r\n\t\t\t\tObject(string(1, value_str[i]), Dtype::STRING);\r\n\t\t}\r\n\t\treturn res_vec;\r\n\t}\r\n\r\n\tint vec_size = this->count(sep);\r\n\tvector<Object> res_vec(vec_size + 1);\r\n\r\n\tsize_t start = 0;\r\n\tsize_t end = 0;\r\n\r\n\tint sep_len = (int)sep.length();\r\n\tint idx = 0;\r\n\tstring temp_str;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "651eec0b-0e83-48d3-86aa-f017795242fa": {"__data__": {"id_": "651eec0b-0e83-48d3-86aa-f017795242fa", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "58b91fe9-cbe9-46e9-b4f7-59562db32b9e", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "7af7d78a516fc73f9c7f127bdbd7a0828c1c4ca3f5f4dede06f083fc3a824e1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\nsize_t end = 0;\r\n\r\n\tint sep_len = (int)sep.length();\r\n\tint idx = 0;\r\n\tstring temp_str;\r\n\r\n\twhile ((end = value_str.find(sep, start)) != std::string::npos) {\r\n\r\n\t\ttemp_str = value_str.substr(start, end - start);\r\n\r\n\t\tif (temp_str.empty() == false) {\r\n\r\n\t\t\tres_vec[idx] = parsing_numbers ?\r\n\t\t\t\tObject(temp_str) :\r\n\t\t\t\tObject(temp_str, Dtype::STRING);\r\n\t\t}\r\n\r\n\t\t++idx;\r\n\t\tstart = end + sep_len;\r\n\t}\r\n\r\n\ttemp_str = value_str.substr(start);\r\n\r\n\tif (temp_str.empty() == false) {\r\n\t\tres_vec[idx] = temp_str;\r\n\t}\r\n\r\n\treturn res_vec;\r\n}\r\n\r\n\r\n\r\n\r\nString String::up()\r\n{\r\n\tstd::string result = value;\r\n\tfor (char& c : result) {\r\n\t\tc = std::toupper(c);\r\n\t}\r\n\treturn String(result);\r\n}\r\nString String::lw()\r\n{\r\n\tstd::string result = value;\r\n\tfor (char& c : result) {\r\n\t\tc = std::tolower(c);\r\n\t}\r\n\treturn String(result);\r\n}\r\nString String::title()\r\n{\r\n\tstd::string result = value;\r\n\tsize_t size = this->len();\r\n\r\n\tif (std::isalpha(result[0])) {\r\n\t\tresult[0] = std::toupper(result[0]);\r\n\t}\r\n\r\n\tfor (size_t i = 1; i < size; i++)\r\n\t{\r\n\t\tif (std::isalpha(result[i]) && std::isspace(result[i - 1])) {\r\n\t\t\tresult[i] = std::toupper(result[i]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult[i] = std::tolower(result[i]);\r\n\t\t}\r\n\t}\r\n\treturn String(result);\r\n}\r\n\r\nObject String::extract_pattern(const std::string& pattern)\r\n{\r\n\r\n\tstd::regex regex_pattern(pattern);\r\n\tstd::smatch match; // For storing the matched result\r\n\r\n\t// If a match is found, extract the first occurrence", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1457, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ec63facb-80e6-4697-818b-8fe3c40947d6": {"__data__": {"id_": "ec63facb-80e6-4697-818b-8fe3c40947d6", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "14cf4ea0-32df-43c1-9118-a97cdcc14136", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "215fad85926d25fe17535fc3652456f91b1cd99a3886a04672c5dc74d82cbfb2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\n// If a match is found, extract the first occurrence\r\n\tif (std::regex_search(value, match, regex_pattern) && !match.empty()) {\r\n\t\treturn Object(match.str(0));\r\n\t}\r\n\treturn Object();\r\n}\r\n\r\nvector<Object> String::extract_pattern(\r\n\tconst vector<Object>& values, const string& pattern)\r\n{\r\n\t// Create a regex object from the given pattern\r\n\tstd::regex regex_pattern(pattern);\r\n\r\n\t// Vector to store the results\r\n\tvector<Object> extracted_values;\r\n\textracted_values.reserve(values.size());\r\n\r\n\t// Iterate through each string in the input vector\r\n\tfor (const auto& str_value : values) {\r\n\t\tif (str_value.type != Dtype::STRING) {\r\n\t\t\textracted_values.emplace_back(Object());\r\n\t\t}\r\n\r\n\t\tstd::smatch match; // For storing the matched result\r\n\r\n\t\t// If a match is found, extract the first occurrence\r\n\t\tconst string curr_str = str_value.get_val<String>().get();\r\n\r\n\t\tif (std::regex_search(curr_str, match, regex_pattern) && !match.empty()) {\r\n\r\n\t\t\textracted_values.emplace_back(\r\n\t\t\t\tObject(match.str(0))\r\n\t\t\t); // Store the matched string\r\n\t\t}\r\n\t\telse {\r\n\t\t\textracted_values.emplace_back(Object());\r\n\t\t}\r\n\t}\r\n\r\n\treturn extracted_values;\r\n}\r\n\r\n\r\nString String::join(string sep, vector<Object> arr)\r\n{\r\n\r\n\tsize_t arr_size = arr.size() - 1;\r\n\tstring results = \"\";\r\n\tint i = 0;\r\n\r\n\twhile (i < arr_size)\r\n\t{\r\n\t\tresults += arr[i].get();\r\n\t\tresults += sep;\r\n\t\t++i;\r\n\t}\r\n\tresults += arr[i].get();\r\n\r\n\treturn String(results);\r\n}\r\n\r\nString String::operator + (const String& other) const {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "85ea9e60-4555-40ef-a009-d187b78f5889": {"__data__": {"id_": "85ea9e60-4555-40ef-a009-d187b78f5889", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "096313e7-9ff4-43d3-af9a-384fbfe09319", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "4cf4e8ee831e58a4f955e5916a2fde02ccae0fc48da0ac3c90cb322ca6e3c7cc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\nreturn String(results);\r\n}\r\n\r\nString String::operator + (const String& other) const {\r\n\treturn String(value + other.value);\r\n}\r\n\r\nString String::operator - (const String& other) {\r\n\r\n\tint value_len = (int)value.length(), other_value_len = other.len();\r\n\r\n\tif (value_len < other_value_len) {\r\n\r\n\t\tcout << \"\\nOperation: \" << value << \" - \" << other.value << endl;\r\n\t\tcout << \"Unsupported operation: can't make subtract big str from small one.\" << endl;\r\n\t\tassert(false);\r\n\t}\r\n\r\n\treturn this->replace(other.value, \" \");\r\n}\r\n\r\nString String::operator * (const float& other) const {\r\n\r\n\tif (other == 1) return *this;\r\n\r\n\tstring temp_value = this->value;\r\n\tif (other < 0) {\r\n\t\tstd::reverse(temp_value.begin(), temp_value.end());\r\n\t}\r\n\r\n\tstring temp_str = \"\";\r\n\tint s_int = (int)other;\r\n\tfloat s_float = other - (int)other;\r\n\tint part_of = (int)(s_float * (int)value.length());\r\n\r\n\tfor (int i = 0; i < s_int; i++)\r\n\t{\r\n\t\ttemp_str += value;\r\n\t}\r\n\tfor (int i = 0; i < part_of; i++)\r\n\t{\r\n\t\ttemp_str += value[i];\r\n\t}\r\n\treturn String(temp_str);\r\n}\r\n\r\nString String::operator + (const float& other) const\r\n{\r\n\tassert(0 && \"Invalid Operation: you trying to add number to a String.\");\r\n\treturn String();\r\n}\r\n\r\nString String::operator - (const float& other) const\r\n{\r\n\tassert(0 && \"Invalid Operation: you trying to subtract number to a String.\");\r\n\r\n\treturn String();\r\n}\r\n\r\nString String::operator / (const float& other) const\r\n{\r\n\tassert(0 && \"Invalid Operation: you trying to divide the String by number.\");", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1518, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "12e8ee0a-ffa9-4424-ae2d-ec6a9e666eb2": {"__data__": {"id_": "12e8ee0a-ffa9-4424-ae2d-ec6a9e666eb2", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b02d13c5-4446-4352-94fa-25f2cb6d6525", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0cb9565765207764357d6d68998c26fdf32220261489b13e20644066d5c9695d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\n{\r\n\tassert(0 && \"Invalid Operation: you trying to divide the String by number.\");\r\n\r\n\treturn String();\r\n}\r\n\r\nString String::operator / (const String& other) const\r\n{\r\n\tassert(0 && \"Invalid Operation: you trying to divide the String by another String.\");\r\n\treturn String();\r\n}\r\n\r\nString String::operator * (const String& other) const\r\n{\r\n\tassert(0 && \"Invalid Operation: you trying to multiply the String by String.\");\r\n\treturn String();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 464, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fac555f-5d56-4013-9d80-ef4264c6790d": {"__data__": {"id_": "8fac555f-5d56-4013-9d80-ef4264c6790d", "embedding": null, "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1a9b820d-105d-45c7-bc65-edd7de3b0020", "node_type": "4", "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "aefb51a7fea6b798509ef5cd5ad39bdce33bbab4711873b30a82dabaa7454882", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.cpp\nvoid String::operator += (const String& other)\r\n{\r\n\t*this = *this + other;\r\n}\r\nvoid String::operator -= (const String& other)\r\n{\r\n\t*this = *this - other;\r\n}\r\nvoid String::operator *= (const float&  other) {\r\n\r\n\t*this = *this * other;\r\n}\r\n\r\n\r\nbool String::operator < (const String& other) const {\r\n\treturn value < other.value;\r\n}\r\nbool String::operator > (const String& other) const\r\n{\r\n\treturn value > other.value;\r\n}\r\nbool String::operator <=(const String& other) const\r\n{\r\n\treturn value <= other.value;\r\n}\r\nbool String::operator >=(const String& other) const\r\n{\r\n\treturn value >= other.value;\r\n}\r\nbool String::operator ==(const String& other) const\r\n{\r\n\treturn value == other.value;\r\n}\r\nbool String::operator !=(const String& other) const\r\n{\r\n\treturn value != other.value;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 802, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "38e1bc5a-88bb-48cd-b832-200566476dde": {"__data__": {"id_": "38e1bc5a-88bb-48cd-b832-200566476dde", "embedding": null, "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3265d7bb-a72a-4c28-80a7-5648f691abb9", "node_type": "4", "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "cc0710bf5e3c11ca858c873930a738e22d249004c97604f214eef7cfb1302d62", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.h\n#pragma once\r\n\r\n#ifndef STRING_cls\r\n#define STRING_cls\r\n\r\n#include <string>\r\n#include <iostream>\r\n#include <cassert>\r\n#include <sstream>\r\n#include <cctype>\r\n#include <regex>    \r\n#include \"../enums/enums.h\"\r\n\r\nclass Object;\r\n\r\nusing namespace std;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 270, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "75326aee-991e-4156-b379-1bea4a54f4a1": {"__data__": {"id_": "75326aee-991e-4156-b379-1bea4a54f4a1", "embedding": null, "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "442c8162-2354-402c-8ecd-004677d707ee", "node_type": "4", "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "afbae6d57b20f8aa855fa8694b20531b2a3afe7300d090a2276a8873a09e404a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.h\nclass String {\r\n\r\n\tstring value;\r\n\r\n\tvector<size_t> get_min_find(string value, vector<string> from, size_t start_pos);\r\n\r\npublic:\r\n\r\n\tString();\r\n\tString(string value);\r\n\tString(const char value[]);\r\n\r\n\tstring get() const { return value; }\r\n\r\n\tString stripl();\r\n\tString stripr();\r\n\tString strip ();\r\n\r\n\tint len() const { return (int)value.length(); };\r\n\r\n\tint count(string target);\r\n\r\n\tString\t\t   substr  (int start,     int end=-1);\r\n\tsize_t         find    (string target, int start=0);\r\n\tbool\t\t   contains(string target);\r\n\tString         replace (string from, string to);\r\n\tvector<Object> split   (string sep=\"\", bool parsing_numbers=false);\r\n\tString static  join    (string sep, vector<Object> arr);\r\n\r\n\tString up();\r\n\tString lw();\r\n\tString title();\r\n\r\n\tObject extract_pattern(const std::string& pattern);\r\n\r\n\tstatic vector<Object> extract_pattern(\r\n\t\tconst vector<Object>& values, \r\n\t\tconst string& pattern\r\n\t);\r\n\r\n\tString operator + (const String& other) const;\r\n\tString operator - (const String& other);\r\n\tString operator * (const float& other) const;\r\n\r\n\tString operator + (const float& other) const;\r\n\tString operator - (const float& other) const;\r\n\tString operator / (const float& other) const;\r\n\r\n\tString operator / (const String& other) const;\r\n\tString operator * (const String& other) const;\r\n\r\n\r\n\tvoid operator += (const String& other);\r\n\tvoid operator -= (const String& other);\r\n\tvoid operator *= (const float& other);\r\n\r\n\t// Comparison operators String", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1491, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5495a44-a122-4130-a222-a58922d5a9e0": {"__data__": {"id_": "e5495a44-a122-4130-a222-a58922d5a9e0", "embedding": null, "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9a6ba5c7-a0ce-4089-90ed-f18a8adfc595", "node_type": "4", "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9af0a6ef3ab652af691442ed49483f14cfd635bc14b7cc89fd36890456be43ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: String.h\nvoid operator *= (const float& other);\r\n\r\n\t// Comparison operators String\r\n\tbool operator < (const String& other) const;\r\n\tbool operator > (const String& other) const;\r\n\tbool operator <=(const String& other) const;\r\n\tbool operator >=(const String& other) const;\r\n\tbool operator ==(const String& other) const;\r\n\tbool operator !=(const String& other) const;\r\n\r\n\r\n\tString& operator=(const String& onther) {\r\n\t\t\r\n\t\tvalue = onther.value;\r\n\t\treturn *this;\r\n\t}\r\n\r\n\tfriend std::ostream& operator<<(std::ostream& os, const String& obj) {\r\n\t\tos << obj.value;\r\n\t\treturn os;\r\n\t}\r\n\r\n\t// Hash function for Object\r\n\tstruct Hash {\r\n\t\tstd::size_t operator()(const String& str) const {\r\n\t\t\tstd::size_t hash_value = 0;\r\n\r\n\t\t\thash_value ^= std::hash<std::string>{}(str.value);\r\n\r\n\t\t\treturn hash_value;\r\n\t\t}\r\n\t};\r\n\r\n};\r\n\r\nnamespace std {\r\n\ttemplate <>\r\n\tstruct hash<String> {\r\n\t\tstd::size_t operator()(const String& str) const {\r\n\t\t\treturn String::Hash{}(str);\r\n\t\t}\r\n\t};\r\n}\r\n\r\n#endif // !STRING", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 996, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce742108-bf67-427f-938f-bf5d08807e8d": {"__data__": {"id_": "ce742108-bf67-427f-938f-bf5d08807e8d", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "23a6a665-6497-4513-b2e6-b0d4b42e146b", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "1b975c7f9784d570ac15ff90333c0975880c4be4749f614d4c8e062a54c51db5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\n#include \"Sort.h\"\r\n\r\n\r\nstd::vector<IndexedValue> Sort::_arr; // Define the static member here\r\n\r\nSort::Sort(){}\r\n\r\n\r\nvoid Sort::indexed_values(vector<Object>& arr, vector<IndexedValue>& indexedValues)\r\n{\r\n    int arr_size = (int)arr.size();\r\n    indexedValues = vector<IndexedValue>(arr_size);\r\n\r\n    for (int i = 0; i < arr_size; i++) {\r\n        indexedValues[i] = { i, &arr[i] };\r\n    }\r\n\r\n    Sort::_arr = indexedValues;\r\n}\r\n\r\nvoid Sort::indexed_values(vector<Object>& arr)\r\n{\r\n    int arr_size = (int)arr.size();\r\n    Sort::_arr = vector<IndexedValue>(arr_size);\r\n\r\n    for (int i = 0; i < arr_size; i++) {\r\n        Sort::_arr[i] = { i, &arr[i] };\r\n    }\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 684, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69ad0a99-6553-42f7-82c2-c44d11760455": {"__data__": {"id_": "69ad0a99-6553-42f7-82c2-c44d11760455", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0e0847a3-cfc5-4b24-9196-8de96131ff80", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "ba420a1405de184e7d3da86ce33c03825573bf2719fb2f2f7fa1427b2d5a1a64", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nvoid Sort::get_final_idx_values(vector<int>& final_ids, vector<Object>& final_arr)\r\n{\r\n    final_ids.reserve(Sort::_arr.size());\r\n    final_arr.reserve(Sort::_arr.size());\r\n\r\n    for (const auto& indexed_value : Sort::_arr) {\r\n        final_ids.emplace_back(indexed_value.idx);\r\n        final_arr.emplace_back(*indexed_value.value);\r\n    }\r\n}\r\n\r\n\r\n#define GET_FINAL_VALUES(arr, reverse)    \\\r\n    if(reverse) std::reverse(Sort::_arr.begin(), Sort::_arr.end()); \\\r\n    std::vector<int> final_idx;                          \\\r\n    std::vector<Object> final_arr;                       \\\r\n    get_final_idx_values(final_idx, final_arr); \\\r\n    arr = final_arr;                                     \\\r\n    return final_idx;\r\n\r\ninline void Sort::insertion(int start, int end)\r\n{\r\n\r\n    IndexedValue key;\r\n    int i;\r\n\r\n    for (int j = 1; j <= end; j++)\r\n    {\r\n\r\n        key = Sort::_arr[j];\r\n\r\n        i = j - 1;\r\n\r\n        while (i >= start && Sort::_arr[i] > key) {\r\n\r\n            Sort::_arr[i + 1] = Sort::_arr[i];\r\n            --i;\r\n        }\r\n\r\n        Sort::_arr[++i] = key;\r\n    }\r\n}\r\n\r\n\r\nint Sort::arg_min(int start, int end)\r\n{\r\n    int min_idx = start;\r\n\r\n    for (int i = start + 1; i < end; i++) {\r\n        if (Sort::_arr[i] < Sort::_arr[min_idx]) {\r\n            min_idx = i;\r\n        }\r\n    }\r\n\r\n    return min_idx;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1348, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "630562f6-e80c-4584-aa59-e20b54aa9970": {"__data__": {"id_": "630562f6-e80c-4584-aa59-e20b54aa9970", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3cb468df-4593-4f8c-a247-bd568346fe36", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "fc4f62ed5d81e92314176d800c36ee02e0e7001628838120bcd630df2412a31d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nvoid Sort::arg_min_max(int& start, int& end, int& min_index, int& max_index)\r\n{\r\n\r\n    min_index = start;\r\n    max_index = start;\r\n\r\n    auto min_val = Sort::_arr[start];\r\n    auto max_val = Sort::_arr[start];\r\n\r\n    for (int i = start + 1; i <= end; ++i) {\r\n        auto temp = Sort::_arr[i];\r\n\r\n        if (temp < min_val) {\r\n            min_val = temp;\r\n            min_index = i;\r\n        }\r\n\r\n        else if (temp > max_val) {\r\n            max_val = temp;\r\n            max_index = i;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nvoid Sort::heapify(\r\n    int n,\r\n    int i)\r\n{\r\n    int largest = i;\r\n    int left = 2 * i + 1;\r\n    int right = 2 * i + 2;\r\n\r\n    if (left  < n && Sort::_arr[left]  > Sort::_arr[largest]) {\r\n        largest = left;\r\n    }\r\n\r\n    if (right < n && Sort::_arr[right] > Sort::_arr[largest]) {\r\n        largest = right;\r\n    }\r\n\r\n    if (largest != i) {\r\n\r\n        std::swap(Sort::_arr[i], Sort::_arr[largest]);\r\n\r\n        heapify(n, largest);\r\n    }\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 988, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d72b01c2-5f1d-4dfa-806d-1cd38d715131": {"__data__": {"id_": "d72b01c2-5f1d-4dfa-806d-1cd38d715131", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b5cf5cbd-25ac-43ed-8c17-fde0be0a1248", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e56026eb6d611066dfcab31111917d151b910371a121c30a0e069d8cf8bce9bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nvoid Sort::merge(\r\n    int start, int mid, int end)\r\n{\r\n\r\n    int left_items_size = mid - start + 1;\r\n    vector<IndexedValue> left_items(left_items_size);\r\n\r\n    for (int i = 0; i < left_items_size; i++)\r\n    {\r\n        left_items[i] = Sort::_arr[start + i];\r\n    }\r\n\r\n    int left = 0;\r\n    int right = mid + 1;\r\n    int current_i = start;\r\n\r\n    while (left < left_items_size && right <= end)\r\n    {\r\n        if (left_items[left] <= Sort::_arr[right])\r\n        {\r\n            Sort::_arr[current_i] = left_items[left];\r\n            ++left;\r\n        }\r\n        else\r\n        {\r\n            Sort::_arr[current_i] = Sort::_arr[right];\r\n            ++right;\r\n        }\r\n        ++current_i;\r\n    }\r\n\r\n    while (left < left_items_size)\r\n    {\r\n        Sort::_arr[current_i] = left_items[left];\r\n        ++left;\r\n        ++current_i;\r\n    }\r\n\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 865, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8773f87b-70c4-473d-a3ac-760d075ce006": {"__data__": {"id_": "8773f87b-70c4-473d-a3ac-760d075ce006", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a68f987e-bab1-4b18-8922-b0ee3a2fccc8", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6830841da543402132e200a0e30f6b6bbfd455ab8524b29acc4b2182fd430ca9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nvoid Sort::merge_sort(\r\n    int start, int end)\r\n{\r\n    if (start < end) {\r\n\r\n        int mid = start + (end - start) / 2;\r\n\r\n        merge_sort(start, mid);\r\n        merge_sort(mid + 1, end);\r\n\r\n        merge(start, mid, end);\r\n    }\r\n\r\n}\r\n\r\n\r\nint Sort::partitionV3(int start, int end)\r\n{\r\n\r\n    IndexedValue pivot = Sort::_arr[start];\r\n\r\n    int left = start + 1;\r\n    int right = end;\r\n\r\n    while (left <= right) {\r\n\r\n        while (left <= right && Sort::_arr[left ] <= pivot) ++left;\r\n\r\n        while (left <= right && Sort::_arr[right] >= pivot) --right;\r\n\r\n        if (left < right) {\r\n            std::swap(Sort::_arr[left], Sort::_arr[right]);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n\r\n    std::swap(Sort::_arr[start], Sort::_arr[right]);\r\n    return right;\r\n}\r\n\r\nint Sort::partitionV4(int start, int end)\r\n{\r\n\r\n    int random_pivot_index = start + rand() % (end - start + 1);\r\n    std::swap(Sort::_arr[random_pivot_index], Sort::_arr[start]);\r\n\r\n    return partitionV3(start, end);\r\n}\r\n\r\n\r\nvoid Sort::quick_sort(int start, int end)\r\n{\r\n    if (start >= end) return;\r\n\r\n    int pivot_idx = partitionV4(start, end);\r\n\r\n    quick_sort(start, pivot_idx - 1);\r\n    quick_sort(pivot_idx + 1, end);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1250, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "782d38ad-deb0-4a21-bedd-0eed6a3e69ee": {"__data__": {"id_": "782d38ad-deb0-4a21-bedd-0eed6a3e69ee", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3545da3a-97b1-4156-82e0-499abe3f989f", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2b30695fd42553167a3d80e4a245b9987ac554f864d95a93a4c4b588fd0ac1fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nvoid Sort::merge_insertion_sort(int start, int end)\r\n{\r\n    if ((end - start) <= 30) {\r\n\r\n        insertion(start, end);\r\n    }\r\n    else {\r\n\r\n        int mid = start + (end - start) / 2;\r\n\r\n        merge_insertion_sort(start, mid);\r\n        merge_insertion_sort(mid + 1, end);\r\n\r\n        merge(start, mid, end);\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nvector<int> Sort::insertion (vector<Object>& arr, bool reverse)\r\n{\r\n\r\n    int size = (int)arr.size();\r\n\r\n    indexed_values(arr);\r\n\r\n    insertion(0, size - 1);\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\nvector<int> Sort::bubble    (vector<Object>& arr, bool reverse)\r\n{\r\n    int size = (int)arr.size();\r\n    indexed_values(arr);\r\n\r\n    bool swapped;\r\n\r\n    for (int i = 0; i < size; i++)\r\n    {\r\n        swapped = 0;\r\n\r\n        for (int e = 0; e < size-1-i; e++)\r\n        {\r\n            if (Sort::_arr[e] > Sort::_arr[e+1]) {\r\n\r\n                if(swapped == 0) swapped = 1;\r\n                std::swap(Sort::_arr[e + 1], Sort::_arr[e]);\r\n            }\r\n        }\r\n        if (swapped == 0) break;\r\n    }\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\nvector<int> Sort::selection (vector<Object>& arr, bool reverse)\r\n{\r\n    int size = (int)arr.size();\r\n\r\n    indexed_values(arr);\r\n\r\n\r\n    int arg_min_idx;\r\n\r\n    for (int i = 0; i < size-1; i++)\r\n    {\r\n        arg_min_idx = arg_min(i+1, size);\r\n\r\n        if (Sort::_arr[arg_min_idx] < Sort::_arr[i]) {\r\n\r\n            std::swap(Sort::_arr[arg_min_idx], Sort::_arr[i]);\r\n        }\r\n    }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7d0e0a8-9133-44fd-b478-5cc3cc0f169f": {"__data__": {"id_": "a7d0e0a8-9133-44fd-b478-5cc3cc0f169f", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2fe53206-f5ce-40f2-9ea9-ddb7c6effcfe", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f3222e544a23e8e8bff212af5db18c902a31ccccda399e3e8ccc72df16c7fb98", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nstd::swap(Sort::_arr[arg_min_idx], Sort::_arr[i]);\r\n        }\r\n    }\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\n\r\nvector<int> Sort::double_selection(vector<Object>& arr, bool reverse)\r\n{\r\n    int size = static_cast<int>(arr.size());\r\n\r\n    indexed_values(arr);  \r\n\r\n    int lft = 0, rit = size - 1;\r\n    int arg_min, arg_max;\r\n\r\n    while (lft < rit) \r\n    {\r\n        arg_min_max(lft, rit, arg_min, arg_max); \r\n\r\n        if (Sort::_arr[arg_min] < Sort::_arr[lft]) {\r\n            std::swap(Sort::_arr[arg_min], Sort::_arr[lft]);\r\n        }\r\n\r\n        if (arg_max == lft) {\r\n            arg_max = arg_min;\r\n        }\r\n\r\n        if (Sort::_arr[arg_max] > Sort::_arr[rit]) {\r\n            std::swap(Sort::_arr[arg_max], Sort::_arr[rit]);\r\n        }\r\n\r\n        ++lft; \r\n        --rit; \r\n    }\r\n\r\n   \r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\n\r\nvector<int> Sort::heap(vector<Object>& arr, bool reverse)\r\n{\r\n    int n = (int)arr.size();\r\n\r\n    indexed_values(arr);\r\n\r\n    for (int i = n / 2 + 1; i >= 0; --i)\r\n    {\r\n        heapify(n, i);\r\n    }\r\n\r\n    for (int i = n - 1; i > 0; --i)\r\n    {\r\n        std::swap(Sort::_arr[0], Sort::_arr[i]);\r\n\r\n        heapify(i, 0);\r\n    }\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n\r\n}\r\n\r\nvector<int> Sort::merge_sort(vector<Object>& arr, bool reverse)\r\n{\r\n    int size = (int)arr.size();\r\n\r\n    indexed_values(arr);\r\n\r\n    merge_sort(0, size-1);\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\nvector<int> Sort::quick_sort(vector<Object>& arr, bool reverse)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1507, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41a77ab5-41bc-41fe-a7e7-862cd2524528": {"__data__": {"id_": "41a77ab5-41bc-41fe-a7e7-862cd2524528", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6f700830-3cc8-47c3-9478-ce95941a5aa4", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6e624744d5fb469d1f9b49e1dbf291200c28816d63c697d3148d4587df8beffd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\n}\r\n\r\nvector<int> Sort::quick_sort(vector<Object>& arr, bool reverse)\r\n{\r\n    int size = (int)arr.size();\r\n\r\n    indexed_values(arr);\r\n\r\n    quick_sort(0, size - 1);\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\nvector<int> Sort::merge_insertion_sort(vector<Object>& arr, bool reverse)\r\n{\r\n    int size = (int)arr.size();\r\n\r\n    indexed_values(arr);\r\n\r\n    merge_insertion_sort(0, size - 1);\r\n\r\n    GET_FINAL_VALUES(arr, reverse);\r\n}\r\n\r\n\r\nvector<Object> Sort::gen_random_nums(int n, int to, int from)\r\n{\r\n\r\n    vector<Object> arr(n);\r\n    std::random_device rd;\r\n    std::mt19937 gen(rd());\r\n\r\n    std::uniform_int_distribution<int> dis(from, to);\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        arr[i] = Object(dis(gen));\r\n    }\r\n    return arr;\r\n}\r\n\r\nbool Sort::is_sorted(const vector<Object>& arr, bool reverse)\r\n{\r\n    int arr_size = (int)arr.size();\r\n\r\n    for(int i = 1; i < arr_size; i++) {\r\n\r\n        if ( (reverse && arr[i - 1] < arr[i]) || \r\n            (!reverse && arr[i - 1] > arr[i])) return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nbool Sort::test_sort_algo(vector<Object> arr, SortAlgo algo, bool reverse, bool& is_passed, float& time_tooken)\r\n{\r\n    // Start timing\r\n    auto start_time = std::chrono::high_resolution_clock::now();\r\n\r\n    // Run the selected algorithm with timing and verbose output\r\n    switch (algo) {\r\n    case SortAlgo::heap:\r\n        std::cout << \"Running Heap Sort... \";\r\n        heap(arr, reverse);\r\n        break;\r\n    case SortAlgo::insertion:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1507, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5c982704-ac17-471f-986b-60d15704fd90": {"__data__": {"id_": "5c982704-ac17-471f-986b-60d15704fd90", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ac1b1127-55d6-4d4d-93e8-2fc18af77ca2", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "450313d2de7318545370f8f4d97a12f8e636263fac04a50565ac625d17e78661", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nheap(arr, reverse);\r\n        break;\r\n    case SortAlgo::insertion:\r\n        std::cout << \"Running Insertion Sort... \";\r\n        insertion(arr, reverse);\r\n        break;\r\n    case SortAlgo::bubble:\r\n        std::cout << \"Running Bubble Sort... \";\r\n        bubble(arr, reverse);\r\n        break;\r\n    case SortAlgo::selection:\r\n        std::cout << \"Running Selection Sort... \";\r\n        selection(arr, reverse);\r\n        break;\r\n    case SortAlgo::double_selection:\r\n        std::cout << \"Running Double Selection Sort... \";\r\n        double_selection(arr, reverse);\r\n        break;\r\n    case SortAlgo::merge:\r\n        std::cout << \"Running Merge Sort... \";\r\n        merge_sort(arr, reverse);\r\n        break;\r\n    case SortAlgo::merge_and_insertion:\r\n        std::cout << \"Running Merge-Insertion Sort... \";\r\n        merge_insertion_sort(arr, reverse);\r\n        break;\r\n    case SortAlgo::quick:\r\n        std::cout << \"Running Quick Sort... \";\r\n        quick_sort(arr, reverse);\r\n        break;\r\n    default:\r\n        std::cout << \"This Algorithm Does Not Exist\\n\";\r\n        assert(0);\r\n        return false;\r\n    }\r\n\r\n    // End timing\r\n    auto end_time = std::chrono::high_resolution_clock::now();\r\n    std::chrono::duration<double> elapsed = end_time - start_time;\r\n\r\n    // ANSI escape codes for colors\r\n    const string red   = \"\\033[31m\";\r\n    const string green = \"\\033[32m\";\r\n    const string reset = \"\\033[0m\";\r\n\r\n    // Check if sorted and print the result", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1487, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7cfd9106-9448-43d7-993f-4c833a2b01c6": {"__data__": {"id_": "7cfd9106-9448-43d7-993f-4c833a2b01c6", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f578ce7c-c145-478e-a5a9-9aeeac0c5170", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "cf965e5e9cc3487fff93f5d3406e531ee8994fef6789e9c12708d44d180a06e9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nconst string reset = \"\\033[0m\";\r\n\r\n    // Check if sorted and print the result\r\n    is_passed = is_sorted(arr, reverse);\r\n    if (is_passed) {\r\n        cout << green << \"PASSED\" << reset << \" \";\r\n    }\r\n    else {\r\n        cout << red << \"FAILED\" << reset << \" \";\r\n    }\r\n\r\n\r\n    time_tooken = std::chrono::duration_cast<std::chrono::milliseconds>(elapsed).count();\r\n\r\n    std::cout << \" in \" << time_tooken << \" ms\\n\";\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 445, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "980b17c8-2489-49ae-b864-c76519823006": {"__data__": {"id_": "980b17c8-2489-49ae-b864-c76519823006", "embedding": null, "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7641c1be-4547-4f93-ad89-1559f198a4e5", "node_type": "4", "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "e393a4eabdd64aa363d1fc1bc164f5570ce5fd066eccbd0cee3b498d44c60013", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.cpp\nvoid Sort::test(int arr_size, vector<SortAlgo> algos, bool make_times_pct)\r\n{\r\n    if (algos.empty()) {\r\n        cout << \"Must Test On ALGO !!!!!!\";\r\n        assert(0);\r\n    }\r\n\r\n    vector<Object> arr = gen_random_nums(arr_size, 1000, -1000);\r\n\r\n    int test_num = (int)algos.size();\r\n    int test_passed = 0;\r\n\r\n    float total_times = 0.0;\r\n    map<SortAlgo, float> algos_times;\r\n\r\n    \r\n    for (size_t i = 0; i < test_num; i++)\r\n    {\r\n        cout << \"Test Case (\" << i + 1 << \"): \";\r\n        bool is_passed;\r\n        float time_tooken;\r\n\r\n        test_sort_algo(arr, algos[i], false, is_passed, time_tooken);\r\n\r\n        if (is_passed) ++test_passed;\r\n\r\n        algos_times[algos[i]] = time_tooken;\r\n        total_times += time_tooken;\r\n    }\r\n\r\n\r\n    cout << \"Score: \" << std::round(test_passed / (float)(test_num) *100) << \" %\\n\\n\";\r\n\r\n    if (make_times_pct) {\r\n\r\n        for (auto& pair : algos_times) {\r\n            pair.second /= total_times;\r\n        }\r\n\r\n        for (int i = 0; i < test_num; i++)\r\n        {\r\n            cout << \"Test Case (\" << i + 1 << \") time pct: \" << round(algos_times[algos[i]] * 100) << \" %\\n\";\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// 610", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1193, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4bd04741-9780-43e6-8934-c0e91e07cab1": {"__data__": {"id_": "4bd04741-9780-43e6-8934-c0e91e07cab1", "embedding": null, "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3309a702-c80e-4231-80b5-2c721aae4b0c", "node_type": "4", "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0e35b4c752d3e864b112af651b5b5c6ff96423cf979f9463369e5ad73e88bc41", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.h\n#ifndef SORT_H\r\n#define SORT_H\r\n\r\n#include \"../ObjectDs/Object.h\"\r\n#include <random>\r\n#include <thread>\r\n#include <tuple>\r\n#include <map>\r\n#include <cmath>\r\n\r\n\r\n\r\nclass RandomGenerator {\r\nprivate:\r\n\t// Random number generator and distribution\r\n\tstatic std::random_device rd;\r\n\tstatic std::mt19937 gen;\r\n\r\npublic:\r\n\t// Static method to generate a random number between min and max\r\n\tstatic int getRandomNumber(int min, int max) {\r\n\t\tstd::uniform_int_distribution<int> dis(min, max);\r\n\t\treturn dis(gen);\r\n\t}\r\n};\r\n\r\n\r\n\r\nstruct IndexedValue {\r\n\tint idx;\r\n\tObject* value;\r\n\r\n\t// Overload comparison operators for IndexValue\r\n\tbool operator< (const IndexedValue& other) const { return *value < *other.value; }\r\n\tbool operator> (const IndexedValue& other) const { return *value > *other.value; }\r\n\r\n\tbool operator==(const IndexedValue& other) const { return *value == *other.value; }\r\n\tbool operator!=(const IndexedValue& other) const { return *value != *other.value; }\r\n\r\n\tbool operator <=(const IndexedValue& other) const { return *value <= *other.value; }\r\n\tbool operator >=(const IndexedValue& other) const { return *value >= *other.value; }\r\n};", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1163, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33c6950a-0ab8-41bf-b2e9-aabd46728f91": {"__data__": {"id_": "33c6950a-0ab8-41bf-b2e9-aabd46728f91", "embedding": null, "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65d5062c-6de6-4096-9e9b-07703ae8f0d9", "node_type": "4", "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "46688666a7d35b30cfefc6b268cf87b6c445b629e6c41a4791ff15a0c9970ba9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.h\nclass Sort\r\n{\r\n\r\n\tstatic void indexed_values(vector<Object>& arr, vector<IndexedValue>& indexedValues);\r\n\tstatic void indexed_values(vector<Object>& arr);\r\n\r\n\tstatic void get_final_idx_values(\r\n\t\tvector<int>& final_ids,\r\n\t\tvector<Object>& final_arr\r\n\t);\r\n\r\n\r\n\t// helpers for Insertion\r\n\tstatic inline void insertion(int start, int end);\r\n\r\n\t// helpers for Selection\r\n\tstatic int  arg_min    (int start, int end);\r\n\tstatic void arg_min_max(int& start, int& end, int& min_index, int& max_index);\r\n\r\n\t// helpers for Heap\r\n\tstatic void heapify(int n, int i);\r\n\r\n\r\n\tstatic void merge(int start, int mid, int end);\r\n\tstatic void merge_sort(int start, int end);\r\n\r\n\r\n\t// helpers for Quick\r\n\tstatic int partitionV3(int start, int end);\r\n\tstatic int partitionV4(int start, int end);\r\n\r\n\tstatic void quick_sort(int start, int end);\r\n\r\n\t// helpers for Merge Insertion\r\n\tstatic void merge_insertion_sort(int start, int end);\r\n\r\n\tstatic vector<IndexedValue> _arr;\r\n\r\n\r\npublic:\r\n\r\n\tSort();\r\n\tstatic vector<int> insertion(vector<Object>& arr, bool reverse = false);\r\n\tstatic vector<int> bubble\t(vector<Object>& arr, bool reverse = false);\r\n\tstatic vector<int> selection(vector<Object>& arr, bool reverse = false);\r\n\tstatic vector<int> double_selection(vector<Object>& arr, bool reverse = false);\r\n\r\n\tstatic vector<int> heap\t     (vector<Object>& arr, bool reverse = false);\r\n\tstatic vector<int> merge_sort(vector<Object>& arr, bool reverse = false);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1455, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "412e617a-edc3-4793-9a90-158c357928c7": {"__data__": {"id_": "412e617a-edc3-4793-9a90-158c357928c7", "embedding": null, "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fa29b057-a196-44e1-bfe7-9c3d81b4e1d4", "node_type": "4", "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "5c7fc5606641b69865ced26e3b89a94bc6ecc006475279e5a8383bdb96add7b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Sort.h\nstatic vector<int> merge_sort(vector<Object>& arr, bool reverse = false);\r\n\tstatic vector<int> quick_sort(vector<Object>& arr, bool reverse = false);\r\n\r\n\tstatic vector<int> merge_insertion_sort(vector<Object>& arr, bool reverse = false);\r\n\r\n\r\n\t// Testing The User Sorting Algorithm\r\n\tstatic vector<Object> gen_random_nums(int n, int to = 10, int from = 0);\r\n\tstatic bool is_sorted(const vector<Object>& arr, bool reverse = false);\r\n\tstatic bool test_sort_algo(vector<Object> arr, SortAlgo algo, bool reverse, bool& is_passed, float& time_tooken);\r\n\tstatic void test(int arr_size, vector<SortAlgo> algos, bool make_times_pct);\r\n\r\n};\r\n\r\n\r\n#endif // SORT_H", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 674, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "27379631-44c9-4d66-afdb-a3a5e0c9c235": {"__data__": {"id_": "27379631-44c9-4d66-afdb-a3a5e0c9c235", "embedding": null, "metadata": {"source": "Table.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/tableclass/Table.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e28d8a45-f621-491e-806b-a94ef966c589", "node_type": "4", "metadata": {"source": "Table.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/tableclass/Table.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "fe71fe36be3450ee9c9277bb7ac96e353d6afec91e7577a4377a9fea71df4bc7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Table.cpp\n#include \"Table.h\"\r\n\r\nTable::Table(vector<column> colsinput) {\r\n\r\n\tcolumnsobj = colsinput;\r\n\tfor (column& col : columnsobj) {\r\n\t\tcol.calc_max_str_val_len();\r\n\t}\r\n}\r\n\r\nvoid Table::printBorder() {\r\n\r\n\tcout << \"+\";\r\n\tfor (column col : columnsobj)\r\n\t\tcout << \" \" << setfill('-') << setw(col.maxLenStr + 2) << \" +\";\r\n\r\n\tcout << \"\\n\";\r\n}\r\n\r\nvoid Table::printHeader() {\r\n\tcout << \"\\n\";\r\n\tprintBorder();\r\n\r\n\tcout << \"+\";\r\n\tfor (auto col : columnsobj) col.printAt(-1);\r\n\r\n\tcout << \"\\n\";\r\n\tprintBorder();\r\n}\r\n\r\nvoid Table::printRow(int idx) {\r\n\r\n\tcout << \"|\";\r\n\tfor (auto col : columnsobj) {\r\n\t\tcol.printAt(idx);\r\n\t}\r\n\tcout << \"\\n\";\r\n}\r\n\r\nvoid Table::print(int from, int to) {\r\n\r\n\tint size = columnsobj[0].size;\r\n\r\n\tprintHeader();\r\n\r\n\tif (to == -1 && from != -1) {\r\n\t\tprintRow(from);\r\n\t}\r\n\r\n\telse if (from == -1 && to == -1)\r\n\t\tfor (int idx = 0; idx < size; idx++)  printRow(idx);\r\n\r\n\telse\r\n\t\tfor (int idx = from; idx < to; idx++) printRow(idx);\r\n\r\n\tprintBorder();\r\n\tcout << \"\\n\";\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 997, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b0eea57a-0a30-4e64-ab52-45bf3aaf3242": {"__data__": {"id_": "b0eea57a-0a30-4e64-ab52-45bf3aaf3242", "embedding": null, "metadata": {"source": "Table.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/tableclass/Table.h", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "db8d30b2-5b96-4e25-8195-fe5912d150dc", "node_type": "4", "metadata": {"source": "Table.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/tableclass/Table.h", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "5fa0648f497dc4ee3a447a3593f5dd2cb17197f097fcc2b39e4cb141daa971f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: Table.h\n#pragma once\r\n#include \"../columnDs/column.h\"\r\nclass Table\r\n{\r\n\r\npublic:\r\n\tvector<column> columnsobj;\r\n\tTable(vector<column> cols);\r\n\r\n\tvoid printBorder();\r\n\tvoid printHeader();\r\n\r\n\tvoid printRow(int idx);\r\n\r\n\tvoid print(int from=-1, int to=-1);\r\n\r\n};", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 273, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cc30d45-cc3e-433c-891d-4aa0f1eb6a69": {"__data__": {"id_": "5cc30d45-cc3e-433c-891d-4aa0f1eb6a69", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f081ca32-5cbb-490a-adee-34f3028ec7c7", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "f4211d96d98a8eeb350b512bde337a00e7f2d33291081a2bc4c696afc09fc925", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n# Pandascpp: A C++ DataFrame Library\r\n\r\n![C++](https://img.shields.io/badge/C%2B%2B-17-blue.svg)\r\n![Build Status](https://img.shields.io/badge/build-passing-brightgreen.svg)\r\n[![LinkedIn](https://img.shields.io/badge/LinkedIn-Profile-blue?logo=linkedin)](https://www.linkedin.com/in/ibrahim-awny/)\r\n[![Gmail](https://img.shields.io/badge/Gmail-Email-red?logo=gmail)](mailto:hima12awny@gmail.com)\r\n\r\n\r\n\r\n**Pandascpp** is a lightweight, high-performance C++ library that emulates the functionality of Python's Pandas library, \r\nproviding two core data structures: `column` and `dataFrame`. This project aims to bring data manipulation and analysis capabilities to C++ developers,\r\nwith support for mixed data types with [Object](https://github.com/hima12-awny/cpp-dynamic-object) Data Structure, statistical operations, and parallel processing.\r\n\r\n## Table of Contents\r\n- [Overview](#overview)\r\n- [Features](#features)\r\n  - [Column](#column)\r\n  - [DataFrame](#dataframe)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n  - [Column Examples](#column-examples)\r\n  - [DataFrame Examples](#dataframe-examples)\r\n- [API Documentation](#api-documentation)\r\n  - [Column API](#column-api)\r\n  - [DataFrame API](#dataframe-api)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2bc4df5f-32f1-48f3-8d0d-dcf5f87cc658": {"__data__": {"id_": "2bc4df5f-32f1-48f3-8d0d-dcf5f87cc658", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f29801ec-360d-41fc-9b4b-f56d2e9fe896", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "857b629e88bc9a3857bb0bcaf19b1c0bdf7ebdfd3d98a77f252b0ae7481bb546", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n## Overview\r\n\r\nPandascpp introduces two primary classes:\r\n- **`column`**: A versatile, type-safe vector container for a single column of data, supporting mixed data types (numbers, strings, dates, for more details see [Object](https://github.com/hima12-awny/cpp-dynamic-object)) and operations like filtering, sorting, and statistical analysis.\r\n- **`dataFrame`**: A 2D tabular structure built on `column` objects, offering Pandas-like functionality such as merging, grouping, ordering, and applying functions.\r\n\r\nThis library is tailored for C++ developers who need to manipulate and analyze data with the same ease and flexibility as Python's Pandas, all within a native C++ environment without requiring Python or additional external dependencies beyond the C++ Standard Library.\r\n## Features\r\n\r\n### Column\r\n- **Mixed Data Types**: Store integers, doubles, strings, or dates in a single column using the `Object` wrapper.\r\n- **Statistical Operations**: Compute mean, median, standard deviation, and more for numeric data.\r\n- **String Manipulations**: Transform strings (e.g., to uppercase, strip whitespace) and extract patterns.\r\n- **Outlier Detection**: Identify and remove outliers based on z-scores.\r\n- **Sorting and Filtering**: Sort values and filter based on conditions.\r\n\r\nSee more in [column.h](https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/master/pandascpp/columnDs/column.h)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1425, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "763d5ab7-3aae-4bf2-b8cf-0a08ce4f2928": {"__data__": {"id_": "763d5ab7-3aae-4bf2-b8cf-0a08ce4f2928", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "db2c7133-6dad-4797-bd45-082adeaf188b", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "874bfb71b0072e0b13d3dfd15cffc074cc62c3736ea054ef6d644956652a33b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n### DataFrame\r\n- **Tabular Structure**: Organize data in rows and columns, with named access to columns.\r\n- **Data Access**: Subset by column names, indexes, or ranges; access rows via `iloc`.\r\n- **Exploratory Analysis**: Group by columns, order by values, merge with other DataFrames, and compute correlations.\r\n- **Memory Optimization**: Reduce memory usage with `optimiz_mem` automatically.\r\n- **Parallel Processing**: Apply functions to columns in parallel using `papply`.\r\n\r\nSee more in [dataFrame.h](https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/master/pandascpp/dataFrameDs/dataFrame.h)\r\n\r\n## Installation\r\n\r\n1. **Clone the Repository**:\r\n   ```bash\r\n   git clone https://github.com/hima12-awny/read-csv-dataframe-cpp\r\n   cd read-csv-dataframe-cpp\r\n   ```\r\n\r\n2. **Prerequisites**:\r\n   - C++17-compliant compiler (e.g., GCC 7+, MSVC 2017+)\r\n   - Optional: OpenMP for parallel features in\r\n      - open project Properties and go to C/C++ -> Langues -> Open MP support make it ```Yes```.  \r\n      - Then in C/C++ -> Langue -> in Command Line write ```-openmp:llvm ```\r\n\r\n\r\n## Column Examples\r\n\r\n#### Basic Column Creation and Printing\r\n```cpp\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    column col(\"Numbers\", {1, 2.5, Object(), 100});\r\n    cout << \"Column: \";\r\n    cout << col; // Output: [1, 2.5, NA, 100]\r\n    return 0;\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1408, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6a23e8f7-020f-456a-bbeb-3afad8a03c69": {"__data__": {"id_": "6a23e8f7-020f-456a-bbeb-3afad8a03c69", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a7497795-2a37-43ae-b794-f4899c0e47fd", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "a67e5002a15c94261baebda8678fef1c4251b054c2f431d781a4b18f9c2d5ab6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n#### Statistical Analysis\r\n```cpp\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    column col(\"Values\", {10, 20, 30, 40, 50});\r\n    cout << \"Mean: \"    << col.mean()   << \"\\n\";   // Output: 30\r\n    cout << \"Median: \"  << col.median() << \"\\n\";   // Output: 30\r\n    cout << \"Std Dev: \" << col.std()    << \"\\n\";   // Output: ~15.81\r\n    return 0;\r\n}\r\n```\r\n\r\n#### String Manipulation\r\n```cpp\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    column col(\"Names\", {\" alice \", \"BOB\", \"Charlie\"});\r\n    column upper = col.to_up();\r\n    cout << upper; // Output: [ALICE, BOB, CHARLIE]\r\n    \r\n    column stripped = col.strip();\r\n    cout << stripped;\r\n    return 0;\r\n}\r\n```\r\n\r\n#### Filtering and Sorting\r\n```cpp\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    column col(\"Scores\", {85, 95, 60, 75, 90});\r\n    column filtered = col[col > 80];\r\n    cout << filtered; // Output: [85, 95, 90]\r\n\r\n    column sorted = col.sortAndGetCol(true); // Descending\r\n    cout << sorted; // Output: [95, 90, 85, 75, 60]\r\n    return 0;\r\n}\r\n```\r\n\r\n#### Outlier Removal\r\n```cpp\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    column col(\"Data\", {1, 2, 3, 1000, 4});\r\n    column cleaned = col.remove_outliers(2.0, false);\r\n    cout << cleaned; // Output: [1, 2, 3, 4]\r\n    return 0;\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1417, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4b3e6958-6da6-4557-a9b4-f62ebde33500": {"__data__": {"id_": "4b3e6958-6da6-4557-a9b4-f62ebde33500", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "14ec726c-fe7e-4fc0-a897-4684d110ebf9", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6b442339a79ce36340fe45f3c817cb14bfbc6a259d229ae23a2a728f902edcac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n#### Handling Missing Data and Outliers\r\n```cpp\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    column col(\"Values\", {1, Object(), 3, 1000, 5});\r\n    col.dropna(true);\r\n    col.p(); \r\n\r\n    column cleaned = col.remove_outliers(2.0, false);\r\n    cleaned.p();\r\n    return 0;\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 338, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9485bed8-1e74-49a1-92b6-5c1a48bab12e": {"__data__": {"id_": "9485bed8-1e74-49a1-92b6-5c1a48bab12e", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f5469d10-1454-40ff-ba3f-adce46ca9e22", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3441c1dfb79b7b30edacd0e8f2cf45bc3ebb5661f4178e4e0db71fd919f23ef0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n### Example Using User-Defined Sorting Algorithms with column\r\n```cpp\r\n\r\n#include \"pandascpp/columnDs/column.h\"\r\n#include \"pandascpp/sort_cls/Sort.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    // Step 1: Create a column with sales data\r\n    column sales(\"Sales\", Object::rand_nums(10, 1000, 0, 0));\r\n\r\n    // Step 2: Sort using different algorithms from Sort class\r\n    cout << \"Original Sales Data:\\n\";\r\n    cout << sales << endl; \r\n\r\n    // Heap Sort (ascending)\r\n    column heapSorted = sales.sortAndGetCol(false , SortAlgo::heap);\r\n    heapSorted.set_name(\"HeapSorted\");\r\n\r\n    cout << \"\\nHeap Sort (Ascending):\\n\";\r\n    cout << heapSorted << endl;\r\n\r\n    // Quick Sort (ascending)\r\n    column quickSorted = sales.sortAndGetCol(false, SortAlgo::quick);\r\n    quickSorted.set_name(\"QuickSorted\");\r\n    cout << \"\\nQuick Sort (Descending):\\n\";\r\n    cout << quickSorted << endl;\r\n\r\n    // Merge Insertion Sort (ascending)\r\n    column mergeInsertSorted = sales.sortAndGetCol(false, SortAlgo::merge_and_insertion);\r\n    mergeInsertSorted.set_name(\"MergeInsertSorted\");\r\n    cout << \"\\nMergeInsertSorted Sort (Descending):\\n\";\r\n    cout << mergeInsertSorted << endl;\r\n\r\n\r\n    // Step 3: Test sorting efficiency with Sort::test\r\n    cout << \"\\nTesting Sorting Algorithms Efficiency:\\n\";\r\n    vector<SortAlgo> algos = { \r\n        SortAlgo::heap, \r\n        SortAlgo::quick, \r\n        SortAlgo::merge_and_insertion \r\n    };\r\n\r\n    bool is_passed;\r\n    float time_taken;\r\n    for (SortAlgo algo : algos) {", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1519, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "77f8c0bc-308b-4a84-9dc1-6190d3b549e5": {"__data__": {"id_": "77f8c0bc-308b-4a84-9dc1-6190d3b549e5", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3334dad8-3af3-4c81-8b00-97d64cbd2612", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0a05e1003218cac6b10dcb565e591959670871f16cc2da0700400342a99a3178", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n};\r\n\r\n    bool is_passed;\r\n    float time_taken;\r\n    for (SortAlgo algo : algos) {\r\n        Sort::test_sort_algo(sales.values, algo, false, is_passed, time_taken);\r\n    }\r\n\r\n    return 0;\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 220, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7e6cd876-e0ce-4a2e-b654-85ad79464994": {"__data__": {"id_": "7e6cd876-e0ce-4a2e-b654-85ad79464994", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "af4a47fd-2734-44ae-b615-2fb1dc09d12e", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9a2ba8fe1b4ddcf2889dbb777d4f36b601fc2861376a934bbe849c53678321f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n### DataFrame Examples\r\n\r\n#### Creating and Displaying a DataFrame\r\n```cpp\r\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    dataFrame df({\r\n        {\"ID\", column(\"ID\", {1, 2, 3})},\r\n        {\"Value\", column(\"Value\", {10.5, 20.0, 15.0})}\r\n    });\r\n    df.p(); // Output: Table with ID and Value columns\r\n    return 0;\r\n}\r\n```\r\n\r\n#### Subsetting and Accessing Data\r\n```cpp\r\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    dataFrame df({\r\n        {\"Name\", column(\"Name\", {\"Alice\", \"Bob\", \"Charlie\"})},\r\n        {\"Age\",  column(\"Age\",  {25, 30, 28})}\r\n    });\r\n    dataFrame subset = df[{\"Name\"}];\r\n    cout << subset; // Output: Table with only Name column\r\n\r\n    auto row = df.iloc(1);\r\n    cout << \"Row 1: Name=\" << row[\"Name\"] << \", Age=\" << row[\"Age\"] << \"\\n\";\r\n    // Output: Row 1: Name=Bob, Age=30\r\n    return 0;\r\n}\r\n```\r\n\r\n#### Grouping and Aggregating\r\n```cpp\r\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    dataFrame df({\r\n        {\"Category\", column(\"Category\", {\"A\", \"B\", \"A\", \"B\"})},\r\n        {\"Sales\",    column(\"Sales\",    {100, 200, 150, 300})}\r\n    });\r\n    dataFrame grouped = df.groupBy({\"Category\"}, \"Sales\", StatFun::SUM);\r\n    cout << grouped; // Output: A: 250, B: 500\r\n    return 0;\r\n}\r\n```", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1353, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69869ac0-4530-473a-a9fc-817a8eb7d3ab": {"__data__": {"id_": "69869ac0-4530-473a-a9fc-817a8eb7d3ab", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "80c65bc8-1996-4d07-8554-7273979a970f", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "0e7aaa77e40807727980e394a58581241e3c395a76700beb5df392ea434c711b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n#### Merging DataFrames\r\n```cpp\r\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    dataFrame df1({\r\n        {\"ID\",    column(\"ID\",    {1,  2,  3})},\r\n        {\"Value\", column(\"Value\", {10, 20, 30})}\r\n    });\r\n\r\n    dataFrame df2({\r\n        {\"ID\",    column(\"ID\",    {1, 2,  4})},\r\n        {\"Price\", column(\"Price\", {5, 10, 15})}\r\n    });\r\n    dataFrame merged = df1.merge(df2, \"ID\", \"outer\");\r\n    cout << merged; // Output: Table with ID, Value, Price (includes NA)\r\n    return 0;\r\n}\r\n```\r\n\r\n#### Applying Functions in Parallel\r\n```cpp\r\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\n\r\nint main() {\r\n    dataFrame df({\r\n        {\"Numbers\", column(\"Numbers\", {1, 2, 3, 4, 5})}\r\n    });\r\n    auto doubleFunc = [](const Object& o) { return o * 2; };\r\n    df.papply({{\"Numbers\", doubleFunc}});\r\n    cout << df;\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n## API Documentation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 937, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "379493ad-c5f6-4904-a3f8-17e55938de36": {"__data__": {"id_": "379493ad-c5f6-4904-a3f8-17e55938de36", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1caa0533-cd48-4531-b983-dd8c174f0b06", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "be7b957124cfb516a3cc81c6aa9fb78f4a561d7e259b1041104572715cf29444", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n## API Documentation\r\n\r\n### Column API\r\n| Method/Property | Description | Example |\r\n|-----------------|----------------|---------|\r\n| `column(name, values, mixed_type)` | Constructor with name and initial values | `column(\"A\", {1, 2, 3})` |\r\n| `operator[](int idx)` | Access value at index | `col[0]` |\r\n| `mean()` | Compute mean of numeric values | `col.mean()` |\r\n| `sortAndGetCol(bool reverse)` | Sort and return new column | `col.sortAndGetCol(true)` |\r\n| `fillna(Object val, bool inplace)` | Fill NA values | `col.fillna(0, true)` |\r\n| `apply(func)` | Apply function to all values | `col.apply([](const Object& o) { return o * 2; })` |\r\n| `get_outliers_idxs(double m)` | Get indices of outliers | `col.get_outliers_idxs(2.0)` |", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 757, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "02eea05d-ecad-4e3a-97d5-9108e1ddfe27": {"__data__": {"id_": "02eea05d-ecad-4e3a-97d5-9108e1ddfe27", "embedding": null, "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e51fca2f-0e04-47f3-85bf-215116efeaea", "node_type": "4", "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "bb5fa3246c79f4a26592b54f7611f950c8530a97ad0831ed6fd51f78874fc906", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: README.md\n### DataFrame API\r\n| Method/Property | Description | Example |\r\n|-----------------|----------------|---------|\r\n| `dataFrame(map<string, column>)` | Constructor from column map | `dataFrame({{\"A\", col1}, {\"B\", col2}})` |\r\n| `operator[](string col)` | Access column by name | `df[\"A\"]` |\r\n| `iloc(int row)` | Get row as map | `df.iloc(1)` |\r\n| `groupBy(by, target, func)` | Group by columns and aggregate | `df.groupBy({\"A\"}, \"B\", StatFun::COUNT)` |\r\n| `merge(other, on, how)` | Merge with another DataFrame | `df.merge(df2, \"ID\", \"inner\")` |\r\n| `orderBy(cols, reverse)` | Sort by columns | `df.orderBy({\"A\"}, {true})` |\r\n| `papply(col_functions)` | Parallel apply to columns | `df.papply({{\"A\", func}})` |\r\n| `optimiz_mem(bool mixed)` | Optimize memory usage | `df.optimiz_mem(true)` |\r\n\r\nFor full details, see more in [column.h](https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/master/pandascpp/columnDs/column.h)\r\n and [dataFrame.h](https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/master/pandascpp/dataFrameDs/dataFrame.h)\r\n\r\n\r\n# Made by ***Ibrahim Awny*** Feel free to contact me.\r\n[![LinkedIn](https://img.shields.io/badge/LinkedIn-Profile-blue?logo=linkedin)](https://www.linkedin.com/in/ibrahim-awny/)\r\n[![Gmail](https://img.shields.io/badge/Gmail-Email-red?logo=gmail)](mailto:hima12awny@gmail.com)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1350, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08393434-25e6-4d7d-a420-017b8e4e6f3c": {"__data__": {"id_": "08393434-25e6-4d7d-a420-017b8e4e6f3c", "embedding": null, "metadata": {"source": "simple_usage_example.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/simple_usage_example.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90aa792f-0c60-4c61-bcfd-7e2c2b0e791d", "node_type": "4", "metadata": {"source": "simple_usage_example.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/simple_usage_example.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "59244c8871c812a356a9b62dc5e96081ed2ec35d32a899323010bb43a223bd07", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: simple_usage_example.cpp\n// Simple Usage Example\r\n\r\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\nint main()\r\n{\r\n    string FILE_PATH = \"./data/housing.csv\";\r\n\r\n    dataFrame df(FILE_PATH);\r\n\r\n    // this print the first 5 rows.\r\n    df.phead();\r\n\r\n    // this print the info about the dataframe.\r\n    df.info();\r\n\r\n    // this print the dataframe of description of the data.\r\n    df.describe().p();\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 437, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2a3cbe39-a3f9-43de-84a6-7a1972d4a036": {"__data__": {"id_": "2a3cbe39-a3f9-43de-84a6-7a1972d4a036", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "56fd5320-e23b-4e91-9f45-b2b033f9b12c", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "66a86539945939e77ab117f9779d29eaf6de2728d4dc5b9376a17c5a1c936fa9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\n#include \"pandascpp/dataFrameDs/dataFrame.h\"\r\n#include <iostream>\r\n#include <iomanip> // For setw, setfill\r\n#include <ctype.h>\r\n#include <random>\r\n\r\nusing namespace std;\r\n\r\nvoid printTestResult(const string& testName, bool passed, int& passedCount, int& totalCount) {\r\n    const int WIDTH = 50;\r\n\r\n    // ANSI color codes\r\n    const string RED = \"\\033[1;31m\";     // Bright Red\r\n    const string GREEN = \"\\033[1;32m\";   // Bright Green\r\n    const string RESET = \"\\033[0m\";      // Reset to default color\r\n\r\n    cout << left << setw(WIDTH) << setfill('.') << testName << \": \";\r\n\r\n    if (passed) {\r\n        cout << GREEN << \"PASSED\" << RESET << endl;\r\n        passedCount++;\r\n    }\r\n    else {\r\n        cout << RED << \"FAILED\" << RESET << endl;\r\n    }\r\n\r\n    totalCount++;\r\n}\r\n\r\n// Helper function to print section headers\r\nvoid printSectionHeader(const string& header) {\r\n    cout << \"\\n\" << string(60, '=') << \"\\n\"\r\n        << setw(60) << setfill(' ') << left << header << \"\\n\"\r\n        << string(60, '=') << endl;\r\n}\r\n\r\n// Helper function to print summary\r\nvoid printSummary(int passedCount, int totalCount) {\r\n    cout << string(60, '-') << \"\\n\"\r\n        << \"Summary: \" << passedCount << \" / \" << totalCount << \" tests passed (\"\r\n        << fixed << setprecision(2) << (totalCount ? (passedCount * 100.0 / totalCount) : 0.0) << \"%)\\n\"\r\n        << string(60, '-') << endl;\r\n}\r\n\r\n// Test Functions (unchanged logic, just formatted output)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1463, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9afdec57-68b5-48ac-b702-e1258bfbb881": {"__data__": {"id_": "9afdec57-68b5-48ac-b702-e1258bfbb881", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b0335f09-1db9-4a17-865f-65912e97017b", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d399adeec78b9324c2c99ea4f8cbfb0cc7c36d9ee7f3c6c2262a372cb94f3b47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testConstruction(int& passedCount, int& totalCount) {\r\n    dataFrame df1;\r\n    printTestResult(\"Empty Constructor\", df1.size == 0 && df1.columns.empty(), passedCount, totalCount);\r\n\r\n    unordered_map<string, column> data = { {\"A\", column(\"A\", {1, 2, 3})}, {\"B\", column(\"B\", {4, 5, 6})} };\r\n    dataFrame df2(data);\r\n    printTestResult(\"Map Constructor\", df2.size == 3 && df2.columns.size() == 2 && df2[\"A\"][0] == 1, passedCount, totalCount);\r\n\r\n    vector<column> cols = { column(\"A\", {1, 2, 3}), column(\"B\", {4, 5, 6}) };\r\n    dataFrame df3(cols);\r\n    printTestResult(\"Vector Constructor\", df3.size == 3 && df3[\"B\"][2] == 6, passedCount, totalCount);\r\n}\r\n\r\nvoid testDataAccessing(int& passedCount, int& totalCount) {\r\n    dataFrame df({ {\"A\", column(\"A\", {1, 2, 3})}, {\"B\", column(\"B\", {4, 5, 6})} });\r\n    column& colA = df[\"A\"];\r\n    printTestResult(\"Column Access\", colA[1] == 2, passedCount, totalCount);\r\n\r\n    dataFrame subset = df[{\"A\"}];\r\n    printTestResult(\"Subset by Column Names\", subset.columns.size() == 1 && subset[\"A\"][0] == 1, passedCount, totalCount);\r\n\r\n    dataFrame idxSubset = df[{0, 2}];\r\n    printTestResult(\"Subset by Indexes\", idxSubset.size == 2 && idxSubset[\"B\"][1] == 6, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1261, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51b88adb-7317-4d2e-b855-5dfce388c169": {"__data__": {"id_": "51b88adb-7317-4d2e-b855-5dfce388c169", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6861a104-64a5-4300-bcd8-e9193c817d3c", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "6135eebbebef83900f3fd42b788cac4837762c8d0b62b37136028abe4a70bb1f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testGettersSetters(int& passedCount, int& totalCount) {\r\n    dataFrame df({ {\"A\", column(\"A\", {1, 2, 3})}, {\"B\", column(\"B\", {4, 5, 6})} });\r\n    dataFrame headDf = df.head(2);\r\n    printTestResult(\"Head\", headDf.size == 2 && headDf[\"A\"][1] == 2, passedCount, totalCount);\r\n\r\n    dataFrame tailDf = df.tail(2);\r\n    printTestResult(\"Tail\", tailDf.size == 2 && tailDf[\"B\"][0] == 5, passedCount, totalCount);\r\n\r\n    column newCol(\"C\", { 7, 8, 9 });\r\n    dataFrame newDf = df.add_col(newCol, false);\r\n    printTestResult(\"Add Column\", newDf.columns.size() == 3 && newDf[\"C\"][2] == 9, passedCount, totalCount);\r\n\r\n    auto record = df.iloc(1);\r\n    printTestResult(\"iloc Record\", record[\"A\"] == 2 && record[\"B\"] == 5, passedCount, totalCount);\r\n}\r\n\r\nvoid testInformation(int& passedCount, int& totalCount) {\r\n    dataFrame df({ {\"A\", column(\"A\", {1, 2, 3})}, {\"B\", column(\"B\", {4, 5, 6})} });\r\n    vector<int> shape = df.shape();\r\n    printTestResult(\"Shape\", shape[0] == 3 && shape[1] == 2, passedCount, totalCount);\r\n\r\n    dataFrame desc = df.describe(Dtype::NUMBER);\r\n    printTestResult(\"Describe\", (desc[\"A\"][desc[\"index\"] == \"mean\"])[0] == 2.0, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1204, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "88d458b6-3469-47f6-939c-70b51fdd5d27": {"__data__": {"id_": "88d458b6-3469-47f6-939c-70b51fdd5d27", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "77bc0a45-c852-44b0-a809-f2225d5046dc", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "212a1284c72cb808d22a10f8a2c4fa925767160cfc8d505ec1ab393f97feac15", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testBadData(int& passedCount, int& totalCount) {\r\n    vector<Object> mixedData = { Object(1), Object(), Object(3) };\r\n    dataFrame df({ {\"A\", column(\"A\", mixedData)} });\r\n    set<int> naIdxs = df.naidxs();\r\n    printTestResult(\"NA Indexes\", naIdxs.size() == 1 && naIdxs.count(1), passedCount, totalCount);\r\n\r\n    df.drop_na();\r\n    printTestResult(\"Drop NA\", df.size == 2 && df[\"A\"][1] == 3, passedCount, totalCount);\r\n}\r\n\r\nvoid testFiltration(int& passedCount, int& totalCount) {\r\n    dataFrame df({ {\"A\", column(\"A\", {1, 2, 3})}, {\"B\", column(\"B\", {4, 5, 6})} });\r\n    auto condition = [](const Object& obj) { return obj > 2; };\r\n    dataFrame filtered = df.filter_by_condition({ \"A\" }, { condition });\r\n    printTestResult(\"Filter by Condition\", filtered.size == 1 && filtered[\"A\"][0] == 3, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 852, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fab3d3ef-733b-4849-8d2f-90db390273d9": {"__data__": {"id_": "fab3d3ef-733b-4849-8d2f-90db390273d9", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "495b272f-0364-426c-89a2-3fc9e75972d2", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "c51451462e01e74357bc95b40c290e0a20834fb7d3d84fe3cf7595f94bbeb81d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testExploratory(int& passedCount, int& totalCount) {\r\n    dataFrame df({ {\"A\", column(\"A\", {1, 2, 2})}, {\"B\", column(\"B\", {4, 5, 6})} });\r\n    dataFrame grouped = df.groupBy({ \"A\" }, \"B\", StatFun::COUNT);\r\n    printTestResult(\"Group By\", grouped[\"B\"][1] == 2, passedCount, totalCount);\r\n\r\n    dataFrame ordered = df.orderBy({ \"A\" }, { true });\r\n    printTestResult(\"Order By\", ordered[\"A\"][0] == 2, passedCount, totalCount);\r\n}\r\n\r\n// Advanced Tests\r\nvector<Object> generateRandomNumbers(int size, int min, int max, unsigned int seed) {\r\n    mt19937 gen(seed);\r\n    uniform_int_distribution<> dis(min, max);\r\n    vector<Object> data(size);\r\n    for (int i = 0; i < size; ++i) data[i] = Object(dis(gen));\r\n    return data;\r\n}\r\n\r\nvector<Object> generateRandomStrings(int size, unsigned int seed, int length = 5) {\r\n    mt19937 gen(seed);\r\n    uniform_int_distribution<> dis(0, 25);\r\n    vector<Object> data(size);\r\n    string alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    for (int i = 0; i < size; ++i) {\r\n        string s;\r\n        for (int j = 0; j < length; ++j) s += alphabet[dis(gen)];\r\n        data[i] = Object(s);\r\n    }\r\n    return data;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1174, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1cb149a-38f5-492c-9d50-4fd392a9b4f4": {"__data__": {"id_": "a1cb149a-38f5-492c-9d50-4fd392a9b4f4", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8499f1ae-8e87-4da1-a904-eb96b280da0e", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "663cda23bd303326f241c13c3b010fac0ab830e7fe2dd0310033d7f9b67953a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testLargeConstructionAndOptimization(int& passedCount, int& totalCount) {\r\n    const int SIZE = 10000;\r\n    unordered_map<string, vector<Object>> input_data = {\r\n        {\"ID\", generateRandomNumbers(SIZE, 1, 1000, 42)},\r\n        {\"Value\", generateRandomNumbers(SIZE, 0, 100, 43)},\r\n        {\"Category\", generateRandomStrings(SIZE, 44)}\r\n    };\r\n    dataFrame df(input_data);\r\n    printTestResult(\"Large DataFrame Construction\", df.size == SIZE && df.columns.size() == 3, passedCount, totalCount);\r\n\r\n    size_t beforeSize = df.get_mem_size();\r\n    df.optimiz_mem(true);\r\n    size_t afterSize = df.get_mem_size();\r\n    printTestResult(\"Memory Optimization\", afterSize <= beforeSize, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 739, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54d8a03e-71bc-4d3c-97f9-6032517abb13": {"__data__": {"id_": "54d8a03e-71bc-4d3c-97f9-6032517abb13", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6c9ba705-414b-48d9-8dd2-1f998b1bcd1f", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "55f782100b5c828a4ceb9a230c7d3f94b66f893a216fac591964eda1d64e254d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testComplexMerge(int& passedCount, int& totalCount) {\r\n    unordered_map<string, vector<Object>> sales_data = {\r\n        {\"ProductID\", {1, 2, 3, 4}}, {\"Sales\", {100, 200, 150, 300}}, {\"Region\", {\"North\", \"South\", \"East\", \"West\"}}\r\n    };\r\n    dataFrame df1(sales_data);\r\n\r\n    unordered_map<string, vector<Object>> product_data = {\r\n        {\"ProductID\", {1, 2, 3, 5}}, {\"Price\", {10, 20, 15, 25}}, {\"Category\", {\"Electronics\", \"Clothing\", \"Books\", \"Toys\"}}\r\n    };\r\n    dataFrame df2(product_data);\r\n\r\n    dataFrame innerMerged = df1.merge(df2, \"ProductID\", \"inner\");\r\n    printTestResult(\"Inner Merge\", innerMerged.size == 3 && innerMerged[\"Sales\"][0] == 100 && innerMerged[\"Price\"][0] == 10, passedCount, totalCount);\r\n\r\n    dataFrame outerMerged = df1.merge(df2, \"ProductID\", \"outer\");\r\n    printTestResult(\"Outer Merge\", outerMerged.size == 5 && outerMerged[\"ProductID\"][4] == 5 && outerMerged[\"Sales\"][4].type == Dtype::NA, passedCount, totalCount);\r\n\r\n    dataFrame leftMerged = df1.merge(df2, \"ProductID\", \"left\");\r\n    printTestResult(\"Left Merge\", leftMerged.size == 4 && leftMerged[\"Price\"][3].type == Dtype::NA, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1181, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9549986c-2149-446a-8acf-1595d72019ce": {"__data__": {"id_": "9549986c-2149-446a-8acf-1595d72019ce", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b1eabd8a-9f35-4cc1-a79e-bf251822ba96", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "7f0fdacccd8b4dc67afc0683c5c3e6bc500a12eeaa19c1a187af6be454fd8cef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testAdvancedGroupBy(int& passedCount, int& totalCount) {\r\n    const int SIZE = 1000;\r\n    unordered_map<string, vector<Object>> data = {\r\n        {\"Region\", generateRandomStrings(SIZE, 45)}, {\"Product\", generateRandomStrings(SIZE, 46)}, {\"Sales\", generateRandomNumbers(SIZE, 10, 500, 47)}\r\n    };\r\n    dataFrame df(data);\r\n\r\n    dataFrame grouped = df.groupBy({ \"Region\", \"Product\" }, \"Sales\", StatFun::COUNT);\r\n    printTestResult(\"GroupBy Count\", grouped.columns.size() == 3, passedCount, totalCount);\r\n\r\n    dataFrame summed = df.groupBy({ \"Region\" }, \"Sales\", StatFun::SUM);\r\n    Object totalSales = 0.0;\r\n    for (int i = 0; i < df.size; ++i) totalSales += df[\"Sales\"][i];\r\n    Object groupedTotal = 0.0;\r\n    for (int i = 0; i < summed.size; ++i) groupedTotal += summed[\"Sales\"][i];\r\n    printTestResult(\"GroupBy Sum Consistency\", abs((totalSales - groupedTotal).value_num()) < 1e-6, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 947, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7eee9c6d-7832-483e-8c6d-fbc4f6eb0b43": {"__data__": {"id_": "7eee9c6d-7832-483e-8c6d-fbc4f6eb0b43", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "09520978-bcb2-4821-88ac-c75c5ae156c5", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "9c91963b63aa59c05b14f7e8545510190f4fa148dc4746cb66724e6838655f81", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testMultiColumnOrderBy(int& passedCount, int& totalCount) {\r\n    unordered_map<string, vector<Object>> data = {\r\n        {\"Name\", {\"Alice\", \"Bob\", \"Alice\", \"Charlie\"}}, {\"Age\", {25, 30, 22, 28}}, {\"Score\", {95.5, 88.0, 92.0, 85.5}}\r\n    };\r\n    dataFrame df(data);\r\n\r\n    dataFrame ordered = df.orderBy({ \"Name\", \"Age\" }, { false, true });\r\n    printTestResult(\"Multi-Column OrderBy\", ordered[\"Name\"][0] == Object(\"Alice\") && ordered[\"Age\"][0] == 25 && ordered[\"Age\"][1] == 22, passedCount, totalCount);\r\n\r\n    dataFrame scoreOrdered = df.orderBy({ \"Score\" }, { true });\r\n    printTestResult(\"Single Column OrderBy Desc\", scoreOrdered[\"Score\"][0] == 95.5 && scoreOrdered[\"Score\"][3] == 85.5, passedCount, totalCount);\r\n}\r\n\r\nvoid testEdgeCases(int& passedCount, int& totalCount) {\r\n    vector<Object> values = { 1, 2, Object(), 1000, 3 };\r\n    dataFrame df({ {\"Values\", column(\"Values\", values)} });\r\n\r\n    dataFrame noNA = df.copy();\r\n    noNA.drop_na();\r\n    printTestResult(\"Drop NA\", noNA.size == 4 && noNA[\"Values\"][2] == 1000, passedCount, totalCount);\r\n\r\n    dataFrame noOutliers = df.drop_outliers({ \"Values\" }, 2.0, false);\r\n    printTestResult(\"Drop Outliers\", noOutliers.size == 4 && noOutliers[\"Values\"].max() == 3.0, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1286, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6151898b-a971-460a-a578-f8f17aef06d0": {"__data__": {"id_": "6151898b-a971-460a-a578-f8f17aef06d0", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f494070-f51e-4846-becb-5493770c9c93", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "58546cd49a3b5754629df672c48b77ee0e3a3e290b241278866b75eb3105cf69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testPerformanceApply(int& passedCount, int& totalCount) {\r\n    const int SIZE = 5000;\r\n    dataFrame df({ {\"Numbers\", column(\"Numbers\", generateRandomNumbers(SIZE, 0, 100, 48))} });\r\n\r\n    auto doubleFunc = [](const Object& obj) { return obj * 2; };\r\n    map<const string, std::function<Object(const Object&)>> col_function = { {\"Numbers\", doubleFunc} };\r\n    dataFrame applied = df.apply(col_function, false);\r\n    printTestResult(\"Apply Function\", applied[\"Numbers\"][0] == (df[\"Numbers\"][0] * 2), passedCount, totalCount);\r\n\r\n    df.papply({ {\"Numbers\", doubleFunc} });\r\n    printTestResult(\"Parallel Apply\", df[\"Numbers\"][0] == applied[\"Numbers\"][0], passedCount, totalCount);\r\n}\r\n\r\n\r\n// Level 3 Advanced Tests", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 742, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c917888-e8ba-4c02-beb8-9b5f5d8cfc4e": {"__data__": {"id_": "3c917888-e8ba-4c02-beb8-9b5f5d8cfc4e", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1e710377-ed3e-4433-94f6-b87914936025", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "32d00368fb38474b7cdb076a1293c5f13f1cd78290207abe474718868b9d0b58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testMassiveDataFrameScalability(int& passedCount, int& totalCount) {\r\n    const int SIZE = 100000; // 100K rows\r\n    unordered_map<string, vector<Object>> input_data = {\r\n        {\"UserID\", generateRandomNumbers(SIZE, 1, 10000, 101)},\r\n        {\"Revenue\", generateRandomNumbers(SIZE, 0.0, 1000.0, 102)},\r\n        {\"Dept\", generateRandomStrings(SIZE, 103, 3)}\r\n    };\r\n    auto start = chrono::high_resolution_clock::now();\r\n    dataFrame df(input_data);\r\n    auto end = chrono::high_resolution_clock::now();\r\n    chrono::duration<double> elapsed = end - start;\r\n\r\n    bool passed = (df.size == SIZE && df.columns.size() == 3 && elapsed.count() < 5.0); // Expect creation < 5s\r\n    printTestResult(\"Massive DataFrame Creation\", passed, passedCount, totalCount);\r\n\r\n    size_t memSize = df.get_mem_size();\r\n    df.optimiz_mem(true);\r\n    passed = (df.get_mem_size() <= memSize && df[\"Revenue\"][SIZE - 1].type != Dtype::NA);\r\n    printTestResult(\"Massive DataFrame Optimization\", passed, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1042, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "09ce0f38-5a19-4edb-9815-553f5eff5341": {"__data__": {"id_": "09ce0f38-5a19-4edb-9815-553f5eff5341", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ef119e38-5712-4f9f-b8db-34172d462117", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "2f060642f421178fb2e56d85b15f9aa60560ebf5728616942f0a7875d9699852", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testNestedGroupByMerge(int& passedCount, int& totalCount) {\r\n    unordered_map<string, vector<Object>> sales = {\r\n        {\"StoreID\", {1, 1, 2, 2, 3}}, {\"Product\", {\"A\", \"B\", \"A\", \"C\", \"A\"}}, {\"Sales\", {100, 200, 150, 300, 50}}\r\n    };\r\n    dataFrame dfSales(sales);\r\n\r\n    unordered_map<string, vector<Object>> stores = {\r\n        {\"StoreID\", {1, 2, 3}}, {\"Location\", {\"NY\", \"CA\", \"TX\"}}\r\n    };\r\n    dataFrame dfStores(stores);\r\n\r\n    dataFrame grouped = dfSales.groupBy({ \"StoreID\" }, \"Sales\", StatFun::SUM);\r\n    dataFrame merged = grouped.merge(dfStores, \"StoreID\", \"inner\");\r\n\r\n    bool passed = (merged.size == 3 && merged[\"Sales\"][0] == 300 && merged[\"Location\"][0] == Object(\"NY\"));\r\n    printTestResult(\"Nested GroupBy and Merge\", passed, passedCount, totalCount);\r\n\r\n    dataFrame multiGrouped = dfSales.groupBy({ \"StoreID\", \"Product\" }, \"Sales\", StatFun::MEAN);\r\n    passed = (multiGrouped[\"Sales\"][multiGrouped[\"Product\"] == \"A\"][0].value_num() == 100); // Mean of \"A\" in StoreID 1\r\n    printTestResult(\"Multi-Column GroupBy Mean\", passed, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1110, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "74fda538-b38f-4ae8-a8e4-564b2d45d14d": {"__data__": {"id_": "74fda538-b38f-4ae8-a8e4-564b2d45d14d", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "586e70af-8bf2-45ff-a3f5-28c88e4cd990", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8dbbcf7317337282599d06a7293dc28c37a528e5cc4cba8097c73fb6794b26dd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testComplexOrderByWithNA(int& passedCount, int& totalCount) {\r\n    unordered_map<string, vector<Object>> data = {\r\n        {\"ID\",    {1,           2,        3,    4,    5}},\r\n        {\"Score\", {95.5, Object(),     88.0, 92.0, 85.5}}, // NA in Score\r\n        {\"Time\",  {10  ,       20, Object(),   15,   25}}  // NA in Time\r\n    };\r\n    dataFrame df(data);\r\n\r\n    dataFrame ordered = df.orderBy({ \"Score\", \"Time\" }, { true, false });\r\n    bool passed = (ordered[\"Score\"][0] == 95.5 && ordered[\"Score\"][4].type == Dtype::NA);\r\n    printTestResult(\"OrderBy with NA (Score Desc, Time Asc)\", passed, passedCount, totalCount);\r\n\r\n    dataFrame filteredOrdered = df.filter_by_condition({ \"Score\" }, { [](const Object& o) { return o > 90; } })\r\n        .orderBy({ \"Time\" }, { true });\r\n\r\n    passed = (filteredOrdered.size == 2 && filteredOrdered[\"Score\"][0] == 92.0);\r\n    printTestResult(\"Filter then OrderBy with NA\", passed, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "26d7ad24-f630-4098-ba63-7c5df3bfb82a": {"__data__": {"id_": "26d7ad24-f630-4098-ba63-7c5df3bfb82a", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fc4bce1e-40a5-40da-bdae-8049037790fe", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "d42f530ec5b17903b576c4c246f94cd73c638e7e557624a4e1c739b83296e600", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testParallelApplyOnLargeData(int& passedCount, int& totalCount) {\r\n    const int SIZE = 50000;\r\n    dataFrame df({ {\"Values\", column(\"Values\", generateRandomNumbers(SIZE, 0.0, 1000.0, 104))} });\r\n\r\n    auto squareFunc = [](const Object& obj) { return obj * obj; };\r\n    map<const string, std::function<Object(const Object&)>> colFunc = { {\"Values\", squareFunc} };\r\n\r\n    auto startSerial = chrono::high_resolution_clock::now();\r\n    dataFrame serialResult = df.apply(colFunc, false);\r\n    auto endSerial = chrono::high_resolution_clock::now();\r\n    chrono::duration<double> serialTime = endSerial - startSerial;\r\n\r\n    auto startParallel = chrono::high_resolution_clock::now();\r\n    df.papply(colFunc);\r\n    auto endParallel = chrono::high_resolution_clock::now();\r\n    chrono::duration<double> parallelTime = endParallel - startParallel;\r\n\r\n    bool passed = (df[\"Values\"][0] == serialResult[\"Values\"][0] && parallelTime < serialTime * 1.5); // Parallel should be faster or close\r\n    printTestResult(\"Parallel vs Serial Apply Consistency\", passed, passedCount, totalCount);\r\n\r\n    passed = (serialResult[\"Values\"][SIZE - 1].value_num() > 0); // Ensure no data corruption\r\n    printTestResult(\"Large Data Apply Integrity\", passed, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1289, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b50ac332-bb2d-4e7f-8a12-c858f8fc93f7": {"__data__": {"id_": "b50ac332-bb2d-4e7f-8a12-c858f8fc93f7", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b16247c3-2168-49a6-8e58-7e8838911cce", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "3b14e9e4cccfdbcdd48ac36eec09e9e781f61b5a556ba5da50f4dd7954f3d0b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testOutlierDetectionAndRemoval(int& passedCount, int& totalCount) {\r\n    vector<Object> data = { 1, 2, 3, 1000, 4, 5, Object(), 2000, 6 }; // Outliers: 1000, 2000\r\n    dataFrame df({ {\"Data\", column(\"Data\", data)} });\r\n\r\n    set<int> outliers = df.outliers_idx({ \"Data\" }, 1);\r\n\r\n    bool passed = (outliers.size() == 2 && outliers.count(3) && outliers.count(7));\r\n    printTestResult(\"Outlier Detection\", passed, passedCount, totalCount);\r\n\r\n    dataFrame cleaned = df.drop_outliers({ \"Data\" }, 1, false);\r\n    passed = (cleaned.size == 7 && cleaned[\"Data\"].max() == 6.0);\r\n    printTestResult(\"Outlier Removal with NA\", passed, passedCount, totalCount);\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 687, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd36afd0-c4d1-465d-972b-df8d1ea1b842": {"__data__": {"id_": "dd36afd0-c4d1-465d-972b-df8d1ea1b842", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9212bc18-1b51-4ce0-9700-389b5c493306", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "8e9cf836bdc7081d221182b26d6f4520bed6a7849eb9cf85f50358c59ae51244", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nvoid testMemoryIntensiveOperations(int& passedCount, int& totalCount) {\r\n\r\n    const int SIZE = 20000;\r\n    dataFrame df({ {\"A\", column(\"A\", generateRandomNumbers(SIZE, 0, 100, 105))},\r\n                   {\"B\", column(\"B\", generateRandomStrings(SIZE, 106))} });\r\n\r\n    dataFrame doubled = df.concat(df); // Double the size\r\n    bool passed = (doubled.size == SIZE * 2 && doubled[\"A\"][SIZE] == df[\"A\"][0]);\r\n    printTestResult(\"DataFrame Concatenation\", passed, passedCount, totalCount);\r\n\r\n    dataFrame shuffled = doubled.shuffle(107);\r\n    passed = (shuffled.size == SIZE * 2 && shuffled[\"A\"].unique_count() == df[\"A\"].unique_count());\r\n    printTestResult(\"Shuffle Large DataFrame\", passed, passedCount, totalCount);\r\n}\r\n\r\n\r\n\r\n //Main function with formatted output", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 793, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f066b6f-7331-436c-8bfa-2a6e304d5e41": {"__data__": {"id_": "6f066b6f-7331-436c-8bfa-2a6e304d5e41", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b049656-be0c-428c-ad11-b1ea3bf73e08", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "aa5181c6ea64e0e2286a1a98e0633ac6a24bfd3f34d78bf16982403366b3d0c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\nint main() {\r\n    int level1_passed = 0, level1_total = 0;\r\n    int level2_passed = 0, level2_total = 0;\r\n    int level3_passed = 0, level3_total = 0;\r\n\r\n\r\n    printSectionHeader(\"Running Tests Level 1\");\r\n    testConstruction  (level1_passed, level1_total);\r\n    testDataAccessing (level1_passed, level1_total);\r\n    testGettersSetters(level1_passed, level1_total);\r\n    testInformation   (level1_passed, level1_total);\r\n    testBadData       (level1_passed, level1_total);\r\n    testFiltration    (level1_passed, level1_total);\r\n    testExploratory   (level1_passed, level1_total);\r\n    printSummary      (level1_passed, level1_total);\r\n\r\n    printSectionHeader(\"Running Tests Level 2\");\r\n    testLargeConstructionAndOptimization(level2_passed, level2_total);\r\n    testComplexMerge                    (level2_passed, level2_total);\r\n    testAdvancedGroupBy                 (level2_passed, level2_total);\r\n    testMultiColumnOrderBy              (level2_passed, level2_total);\r\n    testEdgeCases                       (level2_passed, level2_total);\r\n    testPerformanceApply                (level2_passed, level2_total);\r\n    printSummary                        (level2_passed, level2_total);\r\n\r\n\r\n    printSectionHeader(\"Running Level 3 Advanced DataFrame Tests\");\r\n    testMassiveDataFrameScalability(level3_passed, level3_total);\r\n    testNestedGroupByMerge          (level3_passed, level3_total);\r\n    testComplexOrderByWithNA        (level3_passed, level3_total);", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd186929-5021-46b4-aa40-128f31aa0172": {"__data__": {"id_": "dd186929-5021-46b4-aa40-128f31aa0172", "embedding": null, "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "28ccbe9b-d7aa-4e64-836a-17a03311ff15", "node_type": "4", "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "410088d4a91791dadc9d084a200a4e3ba739e3cde0d5527534d5a158bb4302fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: tests.cpp\ntestComplexOrderByWithNA        (level3_passed, level3_total);\r\n    testParallelApplyOnLargeData    (level3_passed, level3_total);\r\n    testOutlierDetectionAndRemoval  (level3_passed, level3_total);\r\n    testMemoryIntensiveOperations   (level3_passed, level3_total);\r\n    printSummary                    (level3_passed, level3_total);\r\n\r\n    printSectionHeader(\"Overall Test Results\");\r\n    printSummary(\r\n        level1_passed + level2_passed + level3_passed, \r\n        level1_total  + level2_total  + level3_total);\r\n    \r\n    return 0;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 565, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8256f0b-2c14-4c35-b386-ddd20c3c30ad": {"__data__": {"id_": "a8256f0b-2c14-4c35-b386-ddd20c3c30ad", "embedding": null, "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ddda7976-eac8-43e9-9911-3b3a00330b26", "node_type": "4", "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "175ffb47870957cee504d3729611109a75004cf150524bec0ae77e7207dd5a40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: usage_example_.cpp\n#include \"pandascpp/dataFrameDs/dataFrame.h\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 77, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "16b82e09-9c98-461e-a4f0-b8a697b07cee": {"__data__": {"id_": "16b82e09-9c98-461e-a4f0-b8a697b07cee", "embedding": null, "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "21271cfa-28e6-4725-8d1f-f45fef2e5a2c", "node_type": "4", "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "57aa9a5bb858e8c70c903650dc5110981631e6f4791fbfe5e2bb26313585f24f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: usage_example_.cpp\nint main() {\r\n\r\n    // Step 1: Create sales data with mixed types (numbers, strings, NA)\r\n    dataFrame sales({\r\n        {\"ProductID\", {1, 2, 3, 1, 2, 4, 3, 1}},\r\n        {\"Region\"   , {\"North\", \"South\", \"East\", \"North\", \"South\", \"West\", \"East\", \"North\"}},\r\n        {\"Sales\"    , {100.5, 200.0, 150.0, Object(), 300.0, 1000.0, 120.0, 150}} // NA and outlier\r\n        });\r\n\r\n    // Step 2: Create product details DataFrame\r\n    dataFrame products({\r\n        {\"ProductID\"  , {1, 2, 3, 4}},\r\n        {\"ProductName\", {\"Laptop\", \"Mouse\", \"Keyboard\", \"Monitor\"}},\r\n        {\"UnitPrice\"  , {500.0, 20.0, 50.0, 200.0}}\r\n        });\r\n\r\n    // Step 3: Clean sales data - Fill NA and remove outliers\r\n    sales[\"Sales\"].fillna(true); // Replace NA with mean by defaults in numbers.\r\n    dataFrame cleanedSales = sales.drop_outliers({ \"Sales\" }, 2.0, true); // Remove outliers (e.g., 1000)\r\n    dprint(cleanedSales);\r\n\r\n    // Step 4: Group by Region and ProductName, calculate total sales\r\n    dataFrame grouped = cleanedSales.groupBy({ \"Region\", \"ProductID\"}, \"Sales\", StatFun::SUM);\r\n    dprint(grouped);\r\n\r\n    // Step 5: Apply a parallel function to normalize sales by UnitPrice\r\n    grouped[\"Sales\"] = grouped[\"Sales\"] / Object(10.0);\r\n    dprint(grouped);\r\n\r\n    // Step 6: Merge sales with product details\r\n    dataFrame merged = grouped.merge(products, \"ProductID\", \"inner\");\r\n    dprint(merged);\r\n\r\n    // Step 7: Sort by Sales (descending) to find top performers", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6a7e42fe-d136-4615-aa5c-a215d6d22e8b": {"__data__": {"id_": "6a7e42fe-d136-4615-aa5c-a215d6d22e8b", "embedding": null, "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4c21cbd6-bcf1-44d0-85cf-a411e85c5ebc", "node_type": "4", "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}, "hash": "81454f09c47f5f72edca97a2c0339216ef6bd4a610c36f569ae85d7a3287e18d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "// file name: usage_example_.cpp\ndprint(merged);\r\n\r\n    // Step 7: Sort by Sales (descending) to find top performers\r\n    dataFrame topPerformers = grouped.orderBy({ \"Sales\" }, { true });\r\n    dprint(topPerformers);\r\n\r\n    // Step 8: Filter top performers (Sales >= 15 after normalization)\r\n    dataFrame filtered = topPerformers[topPerformers[\"Sales\"] >= 15];\r\n    dprint(filtered);\r\n\r\n    // Step 9: Optimize memory and display results\r\n    filtered.optimiz_mem(true);\r\n    dprint(filtered);\r\n\r\n    cout << \"Top Performing Products by Region:\";\r\n    cout << filtered;\r\n\r\n\treturn 0;\r\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 586, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"6b75c2c1-0d66-4f61-95c2-998ef865a2fd": {"node_ids": ["accb603c-57d4-430a-957d-66f75ab07d6f"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "5f870049-3cd2-4284-a792-d138f05b3f6a": {"node_ids": ["4850fa5b-5ebf-497f-b524-e252d64bbc6d"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "17944380-e88f-4346-b2a4-888289b7d250": {"node_ids": ["622cbd7b-2231-4102-8303-b9cec34cc2c0"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "d4911bc9-1758-47bb-a460-2f8e47a91c7c": {"node_ids": ["707b694e-4330-4a20-b417-cb2f9efdd547"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "cf0f1d2d-94de-4c9a-9bbd-5fb82da4da73": {"node_ids": ["28f2db0c-124f-44a9-8750-97a534c19819"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "fb8dc5a4-b61d-4ba4-8182-602d3b7e090c": {"node_ids": ["af249ad6-8d40-41b4-a12c-b40f09830cf8"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "84804a87-a5ef-4bbe-8c9a-02c6de28922d": {"node_ids": ["4d0723b0-c678-47e4-9ae0-46dadf162840"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "bc41a12c-3714-4b97-9d00-7bb0ff8af8f5": {"node_ids": ["7517649a-3515-4470-8459-37ad1e34250b"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "30bfa035-6d72-402c-815e-291881214e1b": {"node_ids": ["0216f8b8-7632-409b-8544-18f7596f40ed"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6d1b9bd2-e429-434e-9283-7c3523e4dab8": {"node_ids": ["f1211d0b-1f22-45f1-8b52-1b208597b5b9"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "fdd0a366-46e3-4109-a516-c12a161f6918": {"node_ids": ["3cd40cb2-2fc6-4e58-b2ba-80399a8542b9"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "9f3a89ae-63f3-489f-8bb0-4980ddb577b4": {"node_ids": ["42d8ff52-9ab6-462f-9502-d6b2e12e780a"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b50279fe-23f8-4f9f-8f75-98a47016a0de": {"node_ids": ["e435e1d7-4426-43ac-9ff5-ef7dd205a2a3"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "199c534c-487a-4222-bd21-b7ac05a2e3f5": {"node_ids": ["5ebc90c3-7e0e-4c97-86b8-0045b805e31e"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3deb2676-5a68-4df2-b1eb-5c8509435275": {"node_ids": ["1194b624-3751-4099-bda5-e0abed999143"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "9fac8d03-dbc3-4de1-8014-680bddfbac48": {"node_ids": ["603070a7-76e3-48dc-834a-0920ebdd9b05"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "616a031e-90cd-46ce-a6ab-2ba89c64e5f8": {"node_ids": ["90a39c66-82ef-4a1d-a9e7-4708c296d2ed"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "769584eb-c0e4-4a74-b751-80c83d80a0fa": {"node_ids": ["7bd39aa3-59c5-4cd5-baad-6c67919d455d"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "722ca348-7e3e-4b08-b8b5-5aacae00e539": {"node_ids": ["a6a3d42b-1eb4-4d19-b4e8-9f60afec655d"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "78d9b081-2291-4957-869b-87275b038805": {"node_ids": ["db8e4852-1413-429d-a8e3-e601643f3535"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "675cb5e2-457e-4fc3-9e5d-c82ac84a4ea5": {"node_ids": ["e289c411-4e90-4242-956b-b138c8e87c52"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ed4f65a6-67b1-4528-afd0-0394b7e11f03": {"node_ids": ["420f247d-03e8-4ab2-9f22-4e4c090e6673"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "f12e7db3-0a73-4dbe-8a17-18858f34152a": {"node_ids": ["d06226c4-05c5-451d-85f9-93d80d99b32e"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "0aafbd97-d626-4089-8e7f-ff40407a38ad": {"node_ids": ["e8cbc42e-8030-4a42-8516-2d39445cf8ce"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "d79a52bc-fe42-4c06-a291-faf08e22d866": {"node_ids": ["9b32fb10-ab3b-4759-893c-2a1441752c63"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ff4a3b22-13e1-4312-b6ec-a03c2bba0ef4": {"node_ids": ["39347ff8-b1ef-4f32-89d7-335f8cd630fa"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "518b4fe8-81fe-4c60-b0cb-ee219cfc90a2": {"node_ids": ["752b8591-c8ce-432b-ba4b-4f80a3cbfb1d"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "7218757a-7429-4a3a-ba40-f6a5a69b17f9": {"node_ids": ["73880a0e-4ad1-4921-bb27-311409c33d1b"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "153d19db-0955-49ee-8e42-b2ab554904b2": {"node_ids": ["f40365d2-1875-4898-9af6-aa01dadf5853"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "541ba03d-106c-49f3-ab61-01d208a67f87": {"node_ids": ["1a99075b-c183-4734-93f5-9d86a4a0ef33"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "22f6be7b-60fb-486c-9757-b3d1f3928022": {"node_ids": ["82514485-7a98-4394-8d08-eae8f403e278"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "752a038c-1d56-4151-a6e1-57ade34d0d61": {"node_ids": ["c93b8735-334d-42c1-a0e2-4ecdaa46e211"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "099db20d-999b-4095-8f84-621ea3f159c5": {"node_ids": ["9e929e25-99fb-4219-bff9-cb5d9a9edf37"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "de9c27cc-5cc9-4d8d-9ce2-4a2227a5cbec": {"node_ids": ["b6cc6e4f-777d-43c5-810b-624c98f964ae"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "c2f9c82f-c936-4520-b31e-8fa0ea6281b8": {"node_ids": ["24709d62-c7d6-4485-a1d9-082afeb133c7"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6e05c47c-aa36-44f3-a77e-6fe0172304bf": {"node_ids": ["185bbcc7-be3d-4b74-8751-26194a393427"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "facb0366-5c6e-4b81-8871-d4e5730f1eb6": {"node_ids": ["82a993ff-5008-4a78-a90f-b8954eab3d95"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b3a64e42-4adb-4c02-b4de-9344759a047a": {"node_ids": ["6cae80a2-6fb4-4090-9cc6-77c0d2065b54"], "metadata": {"source": "column.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "e55daa4d-a26f-49ae-85d5-8ec166ac552a": {"node_ids": ["2cdfb903-516b-4906-8510-81cf848dd9a4"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "4b7936b3-1dd9-486f-94bc-917aaac01460": {"node_ids": ["6dfd6ee7-9adb-4fa0-abef-17675b545fd4"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "ea1f226d-c62c-418f-bfdc-906a7cd13daf": {"node_ids": ["cbf4036f-1b1f-476b-96ef-aae92cd2348e"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "877da1ed-aa76-4bc1-a4e7-8567ff314cbe": {"node_ids": ["dc9b278d-f302-4790-8119-fd6fa9a8c09c"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "7a523f53-d272-4679-8c83-46223db58026": {"node_ids": ["b2a924a7-7d26-4488-89ac-999bbdbb0c41"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "d8364767-e8f5-48cf-9c2c-20b3621d772c": {"node_ids": ["73c9f46d-beaf-4b2a-9519-c526d928352e"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "c1dff4c5-6324-4968-abcf-f761e1d6a0b9": {"node_ids": ["c17ed029-9479-44b9-b441-a8e9bc597b2f"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "64106a82-9b59-4f60-82cd-c682b8a70d56": {"node_ids": ["9731ba07-c0e2-4950-bafd-6a926bc5a864"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "da136a53-3d61-49af-9fbc-5c05208d11de": {"node_ids": ["55bde1b2-b329-431f-85a4-0c1b04099010"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "b5f78e2b-6707-4f9f-b151-08655d360a9b": {"node_ids": ["0ce329d6-ea59-4026-86d2-a68acf879c1c"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "72d90471-ef21-4160-bebc-8d3970f18b9b": {"node_ids": ["33cf35c9-4093-4469-8ebc-c06b1a7ea77a"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "1121d67d-f094-47cd-b8a5-1a9e70b648b8": {"node_ids": ["a9592903-191e-47d8-a2e0-e44e57319d98"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "fa21f75b-45a8-450b-837f-ff4a21788c16": {"node_ids": ["1c79a8c9-260d-4a8d-801f-2ae08e511f06"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "f3651a62-81d3-43bc-84f2-80e66bfd05dd": {"node_ids": ["98dc2280-3688-4a27-b0ad-9fa1a4675a50"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "92aaf5a3-585f-4001-aef4-05541309319d": {"node_ids": ["b5a46ec2-314f-4e75-8602-ef6076e0c47a"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "d225eaf8-cbcd-4a0a-a8bd-4939b398a87f": {"node_ids": ["803ed9e8-b633-4fb3-a1de-93de761978b3"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "c4b7a296-d9b3-48e1-b5f5-267544c79b27": {"node_ids": ["b74129dd-563f-41e2-b047-996cd1f0040d"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "6bb2cd90-4ade-4bfd-9895-5961a43e2f66": {"node_ids": ["025ae5c5-f4f8-497b-a870-366438ba5540"], "metadata": {"source": "column.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/columnDs/column.h", "source_last_updated": "2025-03-14 22:22:02"}}, "c39686df-3202-475a-a323-ce5ea6a5572c": {"node_ids": ["feb7bfc3-c537-4b4b-8f8f-69c68ff923b9"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "a55c2433-1bed-42e2-b400-bde775997f03": {"node_ids": ["b4b5fe2d-f752-4fb2-bdf0-c424b8853502"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3a26d13d-c3fe-4e66-a13b-69e1125f9429": {"node_ids": ["b3c2970d-810b-4a8b-9b52-a4d43972dd60"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3ca0527b-de9c-42a1-9ace-e747fd467139": {"node_ids": ["36195c07-fc0c-4a14-9f9d-67405e286b46"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "778cc87b-1fc4-4d08-b45b-ac3484fb24b6": {"node_ids": ["16bc2399-7de0-454f-b320-e3934b922f71"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "66b02433-a600-4ec4-97c2-b6a6afe1b473": {"node_ids": ["aa516b43-8495-46bc-9d2e-451a7bc01e5b"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "2826eadd-fbf7-460b-8716-3c1cc7eabc90": {"node_ids": ["8eda3b05-0bcb-42dc-8b7c-cfabb55738ff"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "515f93f6-703a-4e6a-829e-b2fa6ef1c7ac": {"node_ids": ["9e906416-1712-4807-bd55-223a0328e8f3"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "85e919df-9c3e-4ef8-819d-3b1cb93f1c75": {"node_ids": ["dee6e763-e4e2-47ff-99ec-f8a7098b79da"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6f23c2b4-233f-4d4e-91d6-d4a8f69466a6": {"node_ids": ["810ed5ba-6007-4b76-9b3e-8dc403b05917"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3b22d43b-5ee2-43b7-9298-f4e232a0c352": {"node_ids": ["79eb6b72-4683-4f13-a842-666e29b701ff"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "e5611e91-5ca2-4f95-85b5-afa4c2fa4204": {"node_ids": ["ff9c3221-55d5-4c53-ba08-982b95444b1c"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "8e07f125-b421-4605-878a-2900ba5f8c9d": {"node_ids": ["e2a8b96a-25a9-4e2d-965e-03cef0d93530"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "272782eb-53a5-4cda-8285-e8a7f00d2a1b": {"node_ids": ["c5b14826-34de-4e0d-ac18-3360442f5b12"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "49482eee-b2d3-4a89-ba69-605b95356f12": {"node_ids": ["170d47ac-c928-4b07-be73-3396d40f50c8"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "7e966d04-965d-4f00-b743-472b2cfbffad": {"node_ids": ["6920acb1-81a7-4e79-872c-3b922b49d069"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "d3225cf5-bb14-4533-b02d-05c3997a452a": {"node_ids": ["316afbe1-1761-42e1-abe5-aefcb9705a61"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "44c48063-0ae3-44dc-ac5d-cf2ccb2743c6": {"node_ids": ["2f3197f6-befd-4cd5-9c94-b81107e78ed1"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "67330ad6-fc3b-4fdf-a98a-3d67952fea53": {"node_ids": ["cd8c1a20-b02b-4aec-822a-53998dd72988"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b614016b-6733-4631-8627-ee6dedd125aa": {"node_ids": ["0b63bb53-2b4f-4656-b25d-3334a8749e45"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3d6c5555-bb51-4a89-9d1e-b658cc51f07e": {"node_ids": ["dae4db48-5d6d-416e-9d28-e6908581df94"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "a4599e28-6422-4e1e-916e-586b94af6474": {"node_ids": ["9c72bdaf-548e-4358-a2b2-a910b2c36069"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "0b246e80-9431-4929-a624-276108b13180": {"node_ids": ["4256cf78-4e21-4eba-a9ad-c691bcb377e5"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "12d708cc-7ca2-48f7-91dc-245d76dd6b51": {"node_ids": ["97149381-8904-4d1b-80eb-387fb3714be8"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b7a92457-8d71-4a06-a829-cf4e22bf2b42": {"node_ids": ["0abe758f-0d1e-49da-aade-dcc3ddb88185"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ca001477-1244-4160-9e5d-88e3ed0a397d": {"node_ids": ["3a32dc29-2129-47c4-bfcb-e1b0a60e8462"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "37c6bd61-b717-459f-9a59-e193ca43b858": {"node_ids": ["81f3f0f1-d4d5-48c5-ae0c-6b307d83062f"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "49535141-ce99-4070-8cb2-320ca16fe77e": {"node_ids": ["a4816a14-0967-4c51-baf2-8cf732e384b4"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "58483fe6-0b10-4fab-bb16-4b9f3f7038d7": {"node_ids": ["272df0fa-bac0-4f32-9727-9f94a902c771"], "metadata": {"source": "dataFrame.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ae3f4d3f-a8c2-40de-851f-f2e04a462c13": {"node_ids": ["690c6f97-12ad-4988-9152-8e777c1f8409"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "602cc5ea-2f78-406a-be3b-c671a0444208": {"node_ids": ["a8fc0c6b-82f1-4f33-a4cb-1ebe9d573d3e"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "9b3e4c17-24b1-4c17-bbec-f16c22d45d56": {"node_ids": ["73b972c2-e440-4940-8008-689c61da128f"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "c275e3c3-0b7d-4d30-9dc8-4cbf80c39d36": {"node_ids": ["0f127494-6e03-450f-b20c-c877ca25b319"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "ddd38615-de89-42cf-9cbf-b015d69cd98c": {"node_ids": ["96e3ef3b-b943-475c-b77e-9cbc431502b1"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "f91c9a09-d9d5-4fd3-8559-77cc1726605f": {"node_ids": ["19fa3d3e-7c19-41d6-b86b-e72e75adaae1"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "255f7452-e5ad-4c15-b55c-3e150ed788e5": {"node_ids": ["0294bf87-bc1a-4fa4-bbc9-1d522a107a37"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "f3de3db1-7ee3-492a-8a0d-50c8e770c31c": {"node_ids": ["4f011452-f052-43c7-a7f4-b7e3d2b38394"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "22bf0130-134f-4783-a1db-e9e3e7fcf943": {"node_ids": ["00294ce4-219b-4e81-bffd-d7070081c378"], "metadata": {"source": "dataFrame.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/dataFrameDs/dataFrame.h", "source_last_updated": "2025-03-14 22:22:02"}}, "847a8708-685c-4c97-961c-4bb18ac39a54": {"node_ids": ["d23d2670-f998-4a2b-b686-bb899cd3e445"], "metadata": {"source": "Tools.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "d8254abe-abbb-42e0-aef2-d1e18668d931": {"node_ids": ["74df3ee1-9edc-4894-aba8-3c96a672c0aa"], "metadata": {"source": "Tools.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6404afb5-2906-43d3-94d0-307aed47cb0c": {"node_ids": ["29be9ada-3ef6-494f-84a6-1ffcc2f80613"], "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}}, "a56c38cc-81ef-4da9-92f8-651ff2550d34": {"node_ids": ["06166bab-8102-4c28-826c-8c27e5a367f2"], "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}}, "55aed45c-13b5-48f9-9836-092d41f95dfd": {"node_ids": ["24053360-a280-45e8-a94d-86eaaf7de34e"], "metadata": {"source": "Tools.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/helpers/Tools.h", "source_last_updated": "2025-03-14 22:22:02"}}, "d6d59b5c-620c-44a4-891c-9f126cf3ed49": {"node_ids": ["2aae5618-7a72-4f98-906d-ce3c381a28e3"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "01b5e478-15d5-4a9b-9a95-5a5b8ef48289": {"node_ids": ["73352762-5704-4d4c-ac1a-815596b7809c"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "5f555fec-e0b8-49a7-9756-a205e490cb6b": {"node_ids": ["cc7ac38e-07ef-4eea-b842-f03b15cef582"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6030e332-da6c-48fd-96a5-cd1da6680c04": {"node_ids": ["3be7110f-0f80-47d8-ab6d-0be74eaacced"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "606c77e6-88ba-42fd-b29b-486611922bf7": {"node_ids": ["d1974fb9-4916-420b-95d3-2f0effb98d8a"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "aab63da3-52b9-4995-966a-337cd7793b69": {"node_ids": ["8a9649ae-032b-4ba3-96f0-fe093ec621fe"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "31b09439-5754-4758-a659-f27d5b0db384": {"node_ids": ["dd17cf62-fb34-4d89-b6e8-fa18c6fc276c"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "8e40a6f1-39a9-4d99-8df9-3781bc15fd13": {"node_ids": ["9faad717-01c3-4f8a-be92-38bb75f7ef50"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "841863cc-ac91-4c04-aa0e-61789519e340": {"node_ids": ["72565298-45aa-4b2f-bfac-18bc3ec8244f"], "metadata": {"source": "Date.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "53adbefa-b741-4033-a374-21cf8c391907": {"node_ids": ["de9f7ccf-6467-43ab-83eb-1fcb99ab0c7b"], "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}}, "95d9d9eb-3e47-4697-acf8-a80c2d1df643": {"node_ids": ["2f9b0054-ea3c-439f-9650-ec980d42c27a"], "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}}, "8e7b6de9-1c12-4808-acc7-c379c22665c1": {"node_ids": ["9b28592e-5595-4bd2-97f8-639d5ed8fe08"], "metadata": {"source": "Date.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/DateDs/Date.h", "source_last_updated": "2025-03-14 22:22:02"}}, "5797c2d1-8dcf-4cb2-b0fd-beae5d3dbc15": {"node_ids": ["32062a0a-3cb3-45be-9467-5a4a5fc0f95b"], "metadata": {"source": "enums.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b400607f-5963-476f-a123-c0aacb332a1d": {"node_ids": ["8a0102ec-e546-408a-88e2-223008ee2759"], "metadata": {"source": "enums.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3fe49d07-4daf-4b7d-9f77-d9d0b0d93c2a": {"node_ids": ["6d779f43-cf6c-4403-bc3c-c82202aafb83"], "metadata": {"source": "enums.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/enums/enums.h", "source_last_updated": "2025-03-14 22:22:02"}}, "9480e5db-34ab-499b-98b7-8f28ba13925a": {"node_ids": ["b79facb4-e88c-4deb-a573-49167b824e36"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "fab7694f-f2a4-4fa6-88e3-33e93b725137": {"node_ids": ["1b3f5061-20e2-4530-8cbd-c64bcdb2cc1f"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "cbb653e9-9993-4085-a896-350d25a77429": {"node_ids": ["2ad96b11-e971-49c6-b3fa-af4e1bbc69e0"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "2bf72bfc-8d4e-41fc-a8a1-7d9312278018": {"node_ids": ["8068c98a-a0bb-4740-b61f-96bf793c1229"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "fca68294-5e7b-4397-9c21-f957aaf0f440": {"node_ids": ["44230e33-84a0-404e-bd6a-19c0e0a9a3a7"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "cf856626-99a7-4a6c-b0b8-bdb31d61403e": {"node_ids": ["396e7ac1-cbe8-4f15-bfb4-d39c2d22e061"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "05100e91-71db-44cf-9b5e-8c18ce9755a3": {"node_ids": ["48283ef2-6b77-4b51-b244-a0f9d45d3640"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3e66c6f2-3a07-4681-9126-2a52bb617fed": {"node_ids": ["7eab3c44-c36f-4d97-9fd6-8dd08238f0bd"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "87241ec6-977a-4b18-bbe3-7959d33c1453": {"node_ids": ["90bf7916-92e3-4b06-9943-2fd0c44cebd6"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "9c963056-63a8-41f7-9c33-3bdec3f8e993": {"node_ids": ["989b5652-ce50-4b94-82b6-f76b48e6f2cd"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "893a3a3b-787b-4967-a3bd-fc26e16e9509": {"node_ids": ["966bcd91-7087-40f9-b0de-9af7cad7c765"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "df2bb496-c108-4107-b0e5-7b8113dc5706": {"node_ids": ["3c05a151-89d5-46ef-aa23-a1d1ae99c31d"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "86f92053-3759-4a74-9ea5-1dc37329c667": {"node_ids": ["10fb71ae-c312-4672-bd16-966db5b97947"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b38d3d99-4393-4aa0-be88-da83cc072937": {"node_ids": ["c667a8d7-c163-436f-a621-23035e8ff85d"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "c9b723b2-e9ab-49d7-94a5-72d1ea340fae": {"node_ids": ["ccdd883c-97b8-4903-b57a-25f3115011e9"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "0cf1ecca-3e39-4295-ae0e-59af5b30cd7c": {"node_ids": ["2bc7efa5-d412-4620-b142-c652d59c310e"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3171074d-aa39-4841-a466-3dc941727e4d": {"node_ids": ["7ffb6132-f7ab-45b8-8ca8-0547971c9e00"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "44caa7aa-f85e-4670-80e4-051ed777d0c5": {"node_ids": ["70ebfc59-5122-4b0b-b308-da6c3942d1f5"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "66edd299-9382-409e-b3ef-88672c0d7fe9": {"node_ids": ["a596bbaa-6d05-44c8-98ee-83b1bddcc256"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "4c1f7836-fba3-4b51-8453-bc485596495c": {"node_ids": ["019dd907-86ed-44d2-9ae2-ef2285c8bbb2"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "1383af4d-462d-4f37-99a5-e123e5c91877": {"node_ids": ["266815f1-e886-4fa7-986e-dc55bc4dc4fc"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "c23e6e4a-da16-4d12-95fd-8a5073f4a610": {"node_ids": ["b8777f8b-edb4-4687-ae51-640f3061dff5"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "02630518-88b9-433b-b555-39f191d2131a": {"node_ids": ["a78318e1-51f4-46c0-9f2a-ef1e25548a70"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6b15f92e-ee3e-421c-9008-f8684d2007dc": {"node_ids": ["c372f544-7b04-4558-be0c-f3ff7b80987c"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "1199e8c0-5275-4c26-b4a5-18b4cd3cf963": {"node_ids": ["49b138b3-0fb1-4192-b014-271b730318ce"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "d7400ea9-dffb-4461-b598-6ef466a6290c": {"node_ids": ["1dee8f15-872c-434e-adc0-82a4910831b3"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "1cee0a90-8243-4b89-b13b-d83205a235ce": {"node_ids": ["471f2674-39ca-45b9-b4a9-b00b0a4331dd"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "4a01965c-fc68-4b04-9c8e-9248b4f51bea": {"node_ids": ["734bbd82-a65d-4ea5-8156-66cc0dd593ea"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "072bcc58-db06-4157-a639-3357a2c45127": {"node_ids": ["bd93fbf1-6f32-49c2-8542-41e590d5f90a"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "df030065-bd2a-4db5-b4e5-384d0274029d": {"node_ids": ["d8ee0270-f9bc-4489-a3f0-5aa3b60956fd"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "a5d67529-eddd-4a48-92ae-e2d8deba9cc9": {"node_ids": ["9e64d711-674e-4e9d-9151-aac0cdb352b5"], "metadata": {"source": "object.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "65726522-4667-43fe-88a2-ea5f80ad8500": {"node_ids": ["6533bce3-4fb4-4e52-b368-535a87ba102f"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "4b888147-e092-4335-a5e7-698a9157726b": {"node_ids": ["84b2d8ab-3904-4681-b668-7c471ad6042c"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "11f652e0-7ae4-42e0-bd79-c3ff258cdd6d": {"node_ids": ["d81ba57c-ae53-44f9-8726-5584acfdb050"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "ddc2fdf9-401e-41a6-a3e6-d6f14dee498a": {"node_ids": ["977539cc-394b-4726-9e0d-f8a3e689d5ea"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "f738f2a1-f7a6-4f6f-a363-2dcbcd75de61": {"node_ids": ["a0eb1e52-f3a9-4b34-b200-38ddcbe89a31"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "a2661a6a-24df-4584-a455-f5fe8588e904": {"node_ids": ["08bcd2e4-544d-4fe4-b052-1826d42cb0eb"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "6996ff1c-6afa-4d30-8d41-d778b7a2879d": {"node_ids": ["3f7870f3-b832-4ee1-b602-454ee1b21df1"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "1f3f9551-eb9a-47c2-a529-e07375d3e176": {"node_ids": ["a7d715ac-40a4-4150-b157-d41905bdc010"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "01d805f7-357c-4d69-855c-2772e4f4b38d": {"node_ids": ["30eff0a4-ecbd-4e16-908c-790c228027ca"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "271c89f7-cfbd-47f3-971d-174d5b914a47": {"node_ids": ["4c73ad51-3a53-4a58-9448-c44d22a2c0a9"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "c50656dd-cef0-473e-a1a1-a3c97047be6e": {"node_ids": ["92680dc4-807f-4bf5-834a-3477f32af536"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "4de0799b-ae5b-4cae-989d-2478ac087634": {"node_ids": ["e118d42a-d6aa-4826-a839-e5bb5320a4c0"], "metadata": {"source": "object.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/object.h", "source_last_updated": "2025-03-14 22:22:02"}}, "2f496a99-7295-4c19-9526-6b015a74cd5f": {"node_ids": ["03ac0a5b-b229-4361-8c5b-787ed2e30fda"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "2567bef6-04b3-4db6-a2da-6e3fc7f18df8": {"node_ids": ["6aeb8075-ff72-4214-8429-6393f7a0ae70"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "0d56e06d-4e02-4fc4-bdf1-48340e40cbca": {"node_ids": ["3c0e67d7-0493-4d8f-9796-32e27cc0aadf"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "58b91fe9-cbe9-46e9-b4f7-59562db32b9e": {"node_ids": ["651eec0b-0e83-48d3-86aa-f017795242fa"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "14cf4ea0-32df-43c1-9118-a97cdcc14136": {"node_ids": ["ec63facb-80e6-4697-818b-8fe3c40947d6"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "096313e7-9ff4-43d3-af9a-384fbfe09319": {"node_ids": ["85ea9e60-4555-40ef-a009-d187b78f5889"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b02d13c5-4446-4352-94fa-25f2cb6d6525": {"node_ids": ["12e8ee0a-ffa9-4424-ae2d-ec6a9e666eb2"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "1a9b820d-105d-45c7-bc65-edd7de3b0020": {"node_ids": ["8fac555f-5d56-4013-9d80-ef4264c6790d"], "metadata": {"source": "String.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3265d7bb-a72a-4c28-80a7-5648f691abb9": {"node_ids": ["38e1bc5a-88bb-48cd-b832-200566476dde"], "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}}, "442c8162-2354-402c-8ecd-004677d707ee": {"node_ids": ["75326aee-991e-4156-b379-1bea4a54f4a1"], "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}}, "9a6ba5c7-a0ce-4089-90ed-f18a8adfc595": {"node_ids": ["e5495a44-a122-4130-a222-a58922d5a9e0"], "metadata": {"source": "String.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/ObjectDs/StringDs/String.h", "source_last_updated": "2025-03-14 22:22:02"}}, "23a6a665-6497-4513-b2e6-b0d4b42e146b": {"node_ids": ["ce742108-bf67-427f-938f-bf5d08807e8d"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "0e0847a3-cfc5-4b24-9196-8de96131ff80": {"node_ids": ["69ad0a99-6553-42f7-82c2-c44d11760455"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3cb468df-4593-4f8c-a247-bd568346fe36": {"node_ids": ["630562f6-e80c-4584-aa59-e20b54aa9970"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b5cf5cbd-25ac-43ed-8c17-fde0be0a1248": {"node_ids": ["d72b01c2-5f1d-4dfa-806d-1cd38d715131"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "a68f987e-bab1-4b18-8922-b0ee3a2fccc8": {"node_ids": ["8773f87b-70c4-473d-a3ac-760d075ce006"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3545da3a-97b1-4156-82e0-499abe3f989f": {"node_ids": ["782d38ad-deb0-4a21-bedd-0eed6a3e69ee"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "2fe53206-f5ce-40f2-9ea9-ddb7c6effcfe": {"node_ids": ["a7d0e0a8-9133-44fd-b478-5cc3cc0f169f"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6f700830-3cc8-47c3-9478-ce95941a5aa4": {"node_ids": ["41a77ab5-41bc-41fe-a7e7-862cd2524528"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ac1b1127-55d6-4d4d-93e8-2fc18af77ca2": {"node_ids": ["5c982704-ac17-471f-986b-60d15704fd90"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "f578ce7c-c145-478e-a5a9-9aeeac0c5170": {"node_ids": ["7cfd9106-9448-43d7-993f-4c833a2b01c6"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "7641c1be-4547-4f93-ad89-1559f198a4e5": {"node_ids": ["980b17c8-2489-49ae-b864-c76519823006"], "metadata": {"source": "Sort.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3309a702-c80e-4231-80b5-2c721aae4b0c": {"node_ids": ["4bd04741-9780-43e6-8934-c0e91e07cab1"], "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}}, "65d5062c-6de6-4096-9e9b-07703ae8f0d9": {"node_ids": ["33c6950a-0ab8-41bf-b2e9-aabd46728f91"], "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}}, "fa29b057-a196-44e1-bfe7-9c3d81b4e1d4": {"node_ids": ["412e617a-edc3-4793-9a90-158c357928c7"], "metadata": {"source": "Sort.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/sort_cls/Sort.h", "source_last_updated": "2025-03-14 22:22:02"}}, "e28d8a45-f621-491e-806b-a94ef966c589": {"node_ids": ["27379631-44c9-4d66-afdb-a3a5e0c9c235"], "metadata": {"source": "Table.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/tableclass/Table.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "db8d30b2-5b96-4e25-8195-fe5912d150dc": {"node_ids": ["b0eea57a-0a30-4e64-ab52-45bf3aaf3242"], "metadata": {"source": "Table.h", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/pandascpp/tableclass/Table.h", "source_last_updated": "2025-03-14 22:22:02"}}, "f081ca32-5cbb-490a-adee-34f3028ec7c7": {"node_ids": ["5cc30d45-cc3e-433c-891d-4aa0f1eb6a69"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "f29801ec-360d-41fc-9b4b-f56d2e9fe896": {"node_ids": ["2bc4df5f-32f1-48f3-8d0d-dcf5f87cc658"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "db2c7133-6dad-4797-bd45-082adeaf188b": {"node_ids": ["763d5ab7-3aae-4bf2-b8cf-0a08ce4f2928"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "a7497795-2a37-43ae-b794-f4899c0e47fd": {"node_ids": ["6a23e8f7-020f-456a-bbeb-3afad8a03c69"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "14ec726c-fe7e-4fc0-a897-4684d110ebf9": {"node_ids": ["4b3e6958-6da6-4557-a9b4-f62ebde33500"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "f5469d10-1454-40ff-ba3f-adce46ca9e22": {"node_ids": ["9485bed8-1e74-49a1-92b6-5c1a48bab12e"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "3334dad8-3af3-4c81-8b00-97d64cbd2612": {"node_ids": ["77f8c0bc-308b-4a84-9dc1-6190d3b549e5"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "af4a47fd-2734-44ae-b615-2fb1dc09d12e": {"node_ids": ["7e6cd876-e0ce-4a2e-b654-85ad79464994"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "80c65bc8-1996-4d07-8554-7273979a970f": {"node_ids": ["69869ac0-4530-473a-a9fc-817a8eb7d3ab"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "1caa0533-cd48-4531-b983-dd8c174f0b06": {"node_ids": ["379493ad-c5f6-4904-a3f8-17e55938de36"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "e51fca2f-0e04-47f3-85bf-215116efeaea": {"node_ids": ["02eea05d-ecad-4e3a-97d5-9108e1ddfe27"], "metadata": {"source": "README.md", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/README.md", "source_last_updated": "2025-03-14 22:22:02"}}, "90aa792f-0c60-4c61-bcfd-7e2c2b0e791d": {"node_ids": ["08393434-25e6-4d7d-a420-017b8e4e6f3c"], "metadata": {"source": "simple_usage_example.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/simple_usage_example.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "56fd5320-e23b-4e91-9f45-b2b033f9b12c": {"node_ids": ["2a3cbe39-a3f9-43de-84a6-7a1972d4a036"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b0335f09-1db9-4a17-865f-65912e97017b": {"node_ids": ["9afdec57-68b5-48ac-b702-e1258bfbb881"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6861a104-64a5-4300-bcd8-e9193c817d3c": {"node_ids": ["51b88adb-7317-4d2e-b855-5dfce388c169"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "77bc0a45-c852-44b0-a809-f2225d5046dc": {"node_ids": ["88d458b6-3469-47f6-939c-70b51fdd5d27"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "495b272f-0364-426c-89a2-3fc9e75972d2": {"node_ids": ["fab3d3ef-733b-4849-8d2f-90db390273d9"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "8499f1ae-8e87-4da1-a904-eb96b280da0e": {"node_ids": ["a1cb149a-38f5-492c-9d50-4fd392a9b4f4"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "6c9ba705-414b-48d9-8dd2-1f998b1bcd1f": {"node_ids": ["54d8a03e-71bc-4d3c-97f9-6032517abb13"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b1eabd8a-9f35-4cc1-a79e-bf251822ba96": {"node_ids": ["9549986c-2149-446a-8acf-1595d72019ce"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "09520978-bcb2-4821-88ac-c75c5ae156c5": {"node_ids": ["7eee9c6d-7832-483e-8c6d-fbc4f6eb0b43"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "3f494070-f51e-4846-becb-5493770c9c93": {"node_ids": ["6151898b-a971-460a-a578-f8f17aef06d0"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "1e710377-ed3e-4433-94f6-b87914936025": {"node_ids": ["3c917888-e8ba-4c02-beb8-9b5f5d8cfc4e"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ef119e38-5712-4f9f-b8db-34172d462117": {"node_ids": ["09ce0f38-5a19-4edb-9815-553f5eff5341"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "586e70af-8bf2-45ff-a3f5-28c88e4cd990": {"node_ids": ["74fda538-b38f-4ae8-a8e4-564b2d45d14d"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "fc4bce1e-40a5-40da-bdae-8049037790fe": {"node_ids": ["26d7ad24-f630-4098-ba63-7c5df3bfb82a"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "b16247c3-2168-49a6-8e58-7e8838911cce": {"node_ids": ["b50ac332-bb2d-4e7f-8a12-c858f8fc93f7"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "9212bc18-1b51-4ce0-9700-389b5c493306": {"node_ids": ["dd36afd0-c4d1-465d-972b-df8d1ea1b842"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "5b049656-be0c-428c-ad11-b1ea3bf73e08": {"node_ids": ["6f066b6f-7331-436c-8bfa-2a6e304d5e41"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "28ccbe9b-d7aa-4e64-836a-17a03311ff15": {"node_ids": ["dd186929-5021-46b4-aa40-128f31aa0172"], "metadata": {"source": "tests.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/tests.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "ddda7976-eac8-43e9-9911-3b3a00330b26": {"node_ids": ["a8256f0b-2c14-4c35-b386-ddd20c3c30ad"], "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "21271cfa-28e6-4725-8d1f-f45fef2e5a2c": {"node_ids": ["16b82e09-9c98-461e-a4f0-b8a697b07cee"], "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}}, "4c21cbd6-bcf1-44d0-85cf-a411e85c5ebc": {"node_ids": ["6a7e42fe-d136-4615-aa5c-a215d6d22e8b"], "metadata": {"source": "usage_example_.cpp", "source_url": "https://github.com/hima12-awny/read-csv-dataframe-cpp/blob/32aa37edc5a2f93015e8088651f225d6dc997b24/usage_example_.cpp", "source_last_updated": "2025-03-14 22:22:02"}}}}